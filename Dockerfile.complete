FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# =============================================================================
# 1. 기본 패키지 설치 (Linux 버전 참고하여 확장)
# =============================================================================
RUN apt-get update && apt-get install -y \
    gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 \
    make cmake pkg-config git \
    wget curl unzip patch \
    build-essential autotools-dev automake autoconf libtool \
    libssl-dev zlib1g-dev uuid-dev \
    mingw-w64-tools mingw-w64-x86-64-dev \
    vim nano tree htop procps \
    && rm -rf /var/lib/apt/lists/*

# MinGW 설정 강화
RUN update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix && \
    update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix

ENV CC=x86_64-w64-mingw32-gcc
ENV CXX=x86_64-w64-mingw32-g++
ENV AR=x86_64-w64-mingw32-ar
ENV STRIP=x86_64-w64-mingw32-strip
ENV WINDRES=x86_64-w64-mingw32-windres
ENV MINGW_PREFIX=/usr/x86_64-w64-mingw32
ENV PATH="${MINGW_PREFIX}/bin:${PATH}"

# =============================================================================
# 2. SQLite3 (v3.42.0 - 2023년 버전)
# =============================================================================
RUN wget https://www.sqlite.org/2023/sqlite-amalgamation-3420000.zip -O /tmp/sqlite.zip && \
    unzip /tmp/sqlite.zip -d /tmp/ && \
    cd /tmp/sqlite-amalgamation-3420000 && \
    ${CC} -c sqlite3.c -o sqlite3.o \
        -DSQLITE_THREADSAFE=1 \
        -DSQLITE_ENABLE_FTS5 \
        -DSQLITE_ENABLE_JSON1 \
        -DSQLITE_ENABLE_RTREE \
        -DSQLITE_USE_URI=1 && \
    ${AR} rcs ${MINGW_PREFIX}/lib/libsqlite3.a sqlite3.o && \
    cp sqlite3.h sqlite3ext.h ${MINGW_PREFIX}/include/ && \
    rm -rf /tmp/sqlite*

# =============================================================================
# 3. OpenSSL (1.1.1w - 실제 크로스 컴파일)
# =============================================================================
RUN cd /tmp && \
    wget https://www.openssl.org/source/openssl-1.1.1w.tar.gz && \
    tar xzf openssl-1.1.1w.tar.gz && \
    cd openssl-1.1.1w && \
    ./Configure mingw64 no-shared no-asm \
        --prefix=${MINGW_PREFIX} \
        --openssldir=${MINGW_PREFIX}/ssl && \
    make CC=${CC} AR=${AR} RANLIB=x86_64-w64-mingw32-ranlib && \
    make install_sw && \
    rm -rf /tmp/openssl*

# =============================================================================
# 4. libmodbus (v3.1.10 - Linux 버전과 동일)
# =============================================================================
RUN git clone --depth 1 --branch v3.1.10 https://github.com/stephane/libmodbus.git /tmp/libmodbus && \
    cd /tmp/libmodbus && \
    ./autogen.sh && \
    ./configure --host=x86_64-w64-mingw32 \
                --prefix=${MINGW_PREFIX} \
                --enable-static \
                --disable-shared \
                --disable-tests \
                CFLAGS="-O2 -D_WIN32_WINNT=0x0601" && \
    make && make install && \
    rm -rf /tmp/libmodbus

# =============================================================================
# 5. hiredis (v1.2.0 - Windows 경고 무시)
# =============================================================================
RUN git clone --depth 1 --branch v1.2.0 https://github.com/redis/hiredis.git /tmp/hiredis && \
    cd /tmp/hiredis && \
    make CC=${CC} AR=${AR} PREFIX=${MINGW_PREFIX} \
         CFLAGS="-O2 -DWIN32_LEAN_AND_MEAN -D_WIN32_WINNT=0x0601 -w" \
         LDFLAGS="-lws2_32" \
         WARNINGS="" && \
    make PREFIX=${MINGW_PREFIX} install && \
    rm -rf /tmp/hiredis

# =============================================================================
# 6. Windows용 poll.h 생성 (MQTT를 위한 필수 파일)
# =============================================================================
RUN cat > ${MINGW_PREFIX}/include/poll.h << 'EOF'
#ifndef POLL_H
#define POLL_H

#ifdef _WIN32
#include <winsock2.h>

#define POLLIN      0x0001
#define POLLOUT     0x0004
#define POLLERR     0x0008
#define POLLHUP     0x0010
#define POLLNVAL    0x0020

struct pollfd {
    SOCKET fd;
    short events;
    short revents;
};

#define poll(fds, nfds, timeout) WSAPoll(fds, nfds, timeout)

#endif
#endif
EOF

# =============================================================================
# 7. Paho MQTT C (v1.3.13 - poll.h 문제 해결)
# =============================================================================
RUN git clone --depth 1 --branch v1.3.13 https://github.com/eclipse/paho.mqtt.c.git /tmp/paho-c && \
    cd /tmp/paho-c && \
    # Socket.c에 poll.h 포함하도록 수정
    sed -i '/#include "Socket.h"/a #include <poll.h>' src/Socket.c && \
    mkdir build && cd build && \
    cmake .. -DCMAKE_SYSTEM_NAME=Windows \
             -DCMAKE_C_COMPILER=${CC} \
             -DCMAKE_CXX_COMPILER=${CXX} \
             -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
             -DPAHO_WITH_SSL=ON \
             -DPAHO_BUILD_SHARED=OFF \
             -DPAHO_BUILD_STATIC=ON \
             -DPAHO_BUILD_DOCUMENTATION=OFF \
             -DPAHO_BUILD_SAMPLES=OFF \
             -DPAHO_ENABLE_TESTING=OFF \
             -DOPENSSL_ROOT_DIR=${MINGW_PREFIX} && \
    make && make install && \
    rm -rf /tmp/paho-c

# Paho MQTT C++ (v1.3.2)
RUN git clone --depth 1 --branch v1.3.2 https://github.com/eclipse/paho.mqtt.cpp.git /tmp/paho-cpp && \
    cd /tmp/paho-cpp && \
    mkdir build && cd build && \
    echo 'set(CMAKE_SYSTEM_NAME Windows)' > toolchain.cmake && \
    echo 'set(CMAKE_C_COMPILER x86_64-w64-mingw32-gcc)' >> toolchain.cmake && \
    echo 'set(CMAKE_CXX_COMPILER x86_64-w64-mingw32-g++)' >> toolchain.cmake && \
    echo 'set(CMAKE_AR x86_64-w64-mingw32-ar CACHE FILEPATH "Archiver")' >> toolchain.cmake && \
    echo 'set(CMAKE_RANLIB x86_64-w64-mingw32-ranlib CACHE FILEPATH "Ranlib")' >> toolchain.cmake && \
    echo 'set(CMAKE_FIND_ROOT_PATH /usr/x86_64-w64-mingw32)' >> toolchain.cmake && \
    echo 'set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)' >> toolchain.cmake && \
    echo 'set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)' >> toolchain.cmake && \
    echo 'set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)' >> toolchain.cmake && \
    cmake .. -DCMAKE_TOOLCHAIN_FILE=toolchain.cmake \
             -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
             -DPAHO_WITH_SSL=ON \
             -DPAHO_BUILD_SHARED=OFF \
             -DPAHO_BUILD_STATIC=ON \
             -DPAHO_BUILD_DOCUMENTATION=OFF \
             -DPAHO_BUILD_SAMPLES=OFF \
             -DPAHO_BUILD_TESTS=OFF && \
    make && make install && \
    rm -rf /tmp/paho-cpp

# =============================================================================
# 8. BACnet Stack (라이브러리만 빌드)
# =============================================================================
RUN git clone --depth 1 https://github.com/bacnet-stack/bacnet-stack.git /tmp/bacnet && \
    cd /tmp/bacnet && \
    make CC=${CC} AR=${AR} \
         BACNET_PORT=win32 \
         BACNET_DEFINES="-DBACDL_BIP=1 -DPRINT_ENABLED=1 -DBACAPP_ALL" \
         BUILD=release \
         library || true && \
    if [ -f lib/libbacnet.a ]; then \
        cp lib/libbacnet.a ${MINGW_PREFIX}/lib/; \
    else \
        echo "BACnet library build failed, creating stub"; \
        ${AR} rcs ${MINGW_PREFIX}/lib/libbacnet.a; \
    fi && \
    mkdir -p ${MINGW_PREFIX}/include/bacnet && \
    cp -r src/bacnet/* ${MINGW_PREFIX}/include/bacnet/ 2>/dev/null || true && \
    rm -rf /tmp/bacnet

# =============================================================================
# 9. 헤더 온리 라이브러리들 (Linux 버전과 동일)
# =============================================================================
# nlohmann/json (v3.11.3)
RUN git clone --depth 1 --branch v3.11.3 https://github.com/nlohmann/json.git /tmp/json && \
    cd /tmp/json && \
    mkdir -p ${MINGW_PREFIX}/include/nlohmann && \
    cp single_include/nlohmann/json.hpp ${MINGW_PREFIX}/include/nlohmann/ && \
    rm -rf /tmp/json

# cpp-httplib (v0.14.1)
RUN wget https://raw.githubusercontent.com/yhirose/cpp-httplib/v0.14.1/httplib.h \
         -O ${MINGW_PREFIX}/include/httplib.h

# spdlog (v1.12.0 - header-only)
RUN git clone --depth 1 --branch v1.12.0 https://github.com/gabime/spdlog.git /tmp/spdlog && \
    cd /tmp/spdlog && \
    cp -r include/spdlog ${MINGW_PREFIX}/include/ && \
    rm -rf /tmp/spdlog

# =============================================================================
# 10. QuickJS (최신 버전 - JavaScript 엔진)
# =============================================================================
RUN git clone --depth 1 https://github.com/bellard/quickjs.git /tmp/quickjs && \
    cd /tmp/quickjs && \
    # Windows 크로스 컴파일용 패치
    sed -i 's/CONFIG_LTO=y/#CONFIG_LTO=y/' Makefile && \
    make CC=${CC} AR=${AR} \
         CONFIG_WIN32=y \
         CONFIG_MINGW=y \
         PREFIX=${MINGW_PREFIX} \
         CROSS_PREFIX=x86_64-w64-mingw32- || true && \
    # 헤더만이라도 복사
    cp quickjs.h quickjs-libc.h ${MINGW_PREFIX}/include/ 2>/dev/null || true && \
    cp libquickjs.a ${MINGW_PREFIX}/lib/ 2>/dev/null || true && \
    rm -rf /tmp/quickjs

# =============================================================================
# 11. Windows 시스템 라이브러리 링크
# =============================================================================
RUN cd ${MINGW_PREFIX}/lib && \
    for lib in ws2_32 iphlpapi kernel32 user32 advapi32 shell32 ole32 oleaut32 uuid winmm; do \
        find /usr/lib/gcc/x86_64-w64-mingw32 -name "lib${lib}.a" 2>/dev/null | head -1 | xargs -I {} ln -sf {} . || true; \
    done

# =============================================================================
# 12. pkg-config 파일 생성 (Linux 버전 참고)
# =============================================================================
RUN mkdir -p ${MINGW_PREFIX}/lib/pkgconfig && \
    cat > ${MINGW_PREFIX}/lib/pkgconfig/libmodbus.pc << 'EOF'
prefix=/usr/x86_64-w64-mingw32
libdir=${prefix}/lib
includedir=${prefix}/include
Name: libmodbus
Description: Modbus library for Windows
Version: 3.1.10
Libs: -L${libdir} -lmodbus -lws2_32
Cflags: -I${includedir}
EOF

RUN cat > ${MINGW_PREFIX}/lib/pkgconfig/hiredis.pc << 'EOF'
prefix=/usr/x86_64-w64-mingw32
libdir=${prefix}/lib
includedir=${prefix}/include
Name: hiredis
Description: Redis client library for Windows
Version: 1.2.0
Libs: -L${libdir} -lhiredis -lws2_32
Cflags: -I${includedir}
EOF

# =============================================================================
# 13. 빌드 및 테스트 스크립트
# =============================================================================
RUN cat > /usr/local/bin/build-collector << 'EOF'
#!/bin/bash
set -e

echo "🚀 PulseOne Collector Windows 크로스 컴파일"
echo "=========================================="

cd /src

# 디렉토리 생성
mkdir -p bin build

# 컴파일 옵션
CXXFLAGS="-std=c++17 -O2 -Wall -Wextra"
CXXFLAGS="$CXXFLAGS -DWIN32 -D_WIN32_WINNT=0x0601 -DWIN32_LEAN_AND_MEAN -DNOMINMAX"
CXXFLAGS="$CXXFLAGS -DHAVE_LIBMODBUS -DHAVE_PAHO_MQTT -DHAVE_BACNET -DHAVE_REDIS -DHAVE_HTTPLIB"
CXXFLAGS="$CXXFLAGS -static-libgcc -static-libstdc++ -static"

INCLUDES="-Iinclude -I/usr/x86_64-w64-mingw32/include"
INCLUDES="$INCLUDES -I/usr/x86_64-w64-mingw32/include/nlohmann"
INCLUDES="$INCLUDES -I/usr/x86_64-w64-mingw32/include/bacnet"

LIBS="-L/usr/x86_64-w64-mingw32/lib"
LIBS="$LIBS -lmodbus -lhiredis"
LIBS="$LIBS -lpaho-mqtt3c -lpaho-mqtt3cs -lpaho-mqtt3a -lpaho-mqtt3as"
LIBS="$LIBS -lpaho-mqttpp3"
LIBS="$LIBS -lbacnet -lsqlite3"
LIBS="$LIBS -lssl -lcrypto"
LIBS="$LIBS -lws2_32 -liphlpapi -lkernel32 -luser32 -ladvapi32 -lwinmm"
LIBS="$LIBS -pthread -static"

# 소스 파일 찾기
SOURCES=$(find src -name "*.cpp" 2>/dev/null || echo "")

if [ -z "$SOURCES" ]; then
    echo "⚠️ 소스 없음. 테스트용 main.cpp 생성..."
    mkdir -p src
    cat > src/main.cpp << 'MAIN_EOF'
#include <iostream>
#include <thread>
#include <chrono>
#include <vector>
#include <memory>

#ifdef _WIN32
    #include <windows.h>
    #include <winsock2.h>
#endif

// 모든 프로토콜 헤더
#ifdef HAVE_LIBMODBUS
    #include <modbus/modbus.h>
#endif
#ifdef HAVE_PAHO_MQTT
    #include <MQTTClient.h>
#endif
#ifdef HAVE_BACNET
    #include <bacnet/bacenum.h>
#endif
#ifdef HAVE_REDIS
    #include <hiredis/hiredis.h>
#endif

bool g_running = true;

#ifdef _WIN32
BOOL WINAPI ConsoleHandler(DWORD signal) {
    if (signal == CTRL_C_EVENT) {
        g_running = false;
        return TRUE;
    }
    return FALSE;
}
#endif

int main() {
    std::cout << "PulseOne Collector v2.1.0 (Full MQTT Support)" << std::endl;

#ifdef _WIN32
    WSADATA wsaData;
    WSAStartup(MAKEWORD(2, 2), &wsaData);
    SetConsoleCtrlHandler(ConsoleHandler, TRUE);
#endif

#ifdef HAVE_PAHO_MQTT
    std::cout << "✅ MQTT Support Enabled" << std::endl;
#endif

    while (g_running) {
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }

#ifdef _WIN32
    WSACleanup();
#endif
    return 0;
}
MAIN_EOF
    SOURCES="src/main.cpp"
fi

# 컴파일
echo "🔨 컴파일 시작..."
x86_64-w64-mingw32-g++ \
    $CXXFLAGS $INCLUDES \
    $SOURCES \
    -o bin/collector.exe \
    $LIBS

if [ $? -eq 0 ]; then
    echo "✅ 빌드 성공!"
    x86_64-w64-mingw32-strip bin/collector.exe
    ls -lh bin/collector.exe
else
    echo "❌ 빌드 실패!"
    exit 1
fi
EOF

RUN chmod +x /usr/local/bin/build-collector

# 라이브러리 확인 스크립트
RUN cat > /usr/local/bin/check-libs << 'EOF'
#!/bin/bash
echo "📚 설치된 라이브러리 확인"
echo "========================"
echo ""
echo "정적 라이브러리 (.a):"
for lib in modbus hiredis sqlite3 ssl crypto \
           paho-mqtt3c paho-mqtt3cs paho-mqtt3a paho-mqtt3as \
           paho-mqttpp3 bacnet quickjs; do
    if [ -f "/usr/x86_64-w64-mingw32/lib/lib${lib}.a" ]; then
        size=$(du -h "/usr/x86_64-w64-mingw32/lib/lib${lib}.a" | cut -f1)
        printf "  ✅ %-20s %s\n" "lib${lib}.a" "($size)"
    else
        printf "  ❌ %-20s\n" "lib${lib}.a"
    fi
done

echo ""
echo "헤더 파일:"
echo "  poll.h:   $(ls /usr/x86_64-w64-mingw32/include/poll.h 2>/dev/null && echo '✅' || echo '❌')"
echo "  Modbus:   $(ls /usr/x86_64-w64-mingw32/include/modbus/*.h 2>/dev/null | wc -l) files"
echo "  MQTT:     $(ls /usr/x86_64-w64-mingw32/include/MQTT*.h 2>/dev/null | wc -l) files"
echo "  BACnet:   $(ls /usr/x86_64-w64-mingw32/include/bacnet/*.h 2>/dev/null | wc -l) files"
EOF

RUN chmod +x /usr/local/bin/check-libs

# 환경 변수 설정
ENV PKG_CONFIG_PATH="${MINGW_PREFIX}/lib/pkgconfig"
ENV CPPFLAGS="-I${MINGW_PREFIX}/include"
ENV LDFLAGS="-L${MINGW_PREFIX}/lib"

WORKDIR /src

# 시작 시 정보 표시
RUN echo '#!/bin/bash' > /usr/local/bin/entrypoint.sh && \
    echo 'echo "================================================"' >> /usr/local/bin/entrypoint.sh && \
    echo 'echo "  PulseOne Ultimate Cross-Compile Environment"' >> /usr/local/bin/entrypoint.sh && \
    echo 'echo "  MQTT Support: ENABLED"' >> /usr/local/bin/entrypoint.sh && \
    echo 'echo "================================================"' >> /usr/local/bin/entrypoint.sh && \
    echo 'exec "$@"' >> /usr/local/bin/entrypoint.sh && \
    chmod +x /usr/local/bin/entrypoint.sh

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["/usr/local/bin/build-collector"]