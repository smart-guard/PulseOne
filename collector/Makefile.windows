# =============================================================================
# Makefile.windows - PulseOne ÏôÑÏ†ÑÌïú Windows ÌÅ¨Î°úÏä§ Ïª¥ÌååÏùº
# Î™®Îì† ÌîÑÎ°úÌÜ†ÏΩúÍ≥º Í∏∞Îä• ÏßÄÏõê
# =============================================================================

# ÌîåÎû´Ìèº ÏÑ§Ï†ï
PLATFORM = Windows
IS_WINDOWS = 1

# Windows ÌÅ¨Î°úÏä§ Ïª¥ÌååÏùºÎü¨
CXX = x86_64-w64-mingw32-g++
CC = x86_64-w64-mingw32-gcc
AR = x86_64-w64-mingw32-ar
STRIP = x86_64-w64-mingw32-strip
WINDRES = x86_64-w64-mingw32-windres

# ÎîîÎ†âÌÜ†Î¶¨
SRC_DIR = src
INCLUDE_DIR = include
BUILD_DIR = build-win
BIN_DIR = bin-win
LIB_DIR = lib

# ÌÉÄÍ≤ü
TARGET = collector.exe

# =============================================================================
# Ïª¥ÌååÏùº ÌîåÎûòÍ∑∏
# =============================================================================
CXXFLAGS = -std=c++17 -Wall -Wextra -O2
CXXFLAGS += -DPULSEONE_WINDOWS=1
CXXFLAGS += -DWIN32 -D_WIN32 -DWINVER=0x0601 -D_WIN32_WINNT=0x0601
CXXFLAGS += -DWIN32_LEAN_AND_MEAN -DNOMINMAX
CXXFLAGS += -D_USE_MATH_DEFINES
CXXFLAGS += -DUNICODE -D_UNICODE

# Ï†ïÏ†Å ÎßÅÌÅ¨ (Ìè¨ÌÑ∞Î∏î Ïã§ÌñâÌååÏùº)
CXXFLAGS += -static -static-libgcc -static-libstdc++

# =============================================================================
# Include Í≤ΩÎ°ú
# =============================================================================
INCLUDES = -I$(INCLUDE_DIR)
INCLUDES += -I$(INCLUDE_DIR)/Common
INCLUDES += -I$(INCLUDE_DIR)/Core
INCLUDES += -I$(INCLUDE_DIR)/Utils
INCLUDES += -I$(INCLUDE_DIR)/Client
INCLUDES += -I$(INCLUDE_DIR)/Workers
INCLUDES += -I$(INCLUDE_DIR)/Workers/Base
INCLUDES += -I$(INCLUDE_DIR)/Workers/Protocol
INCLUDES += -I$(INCLUDE_DIR)/Database
INCLUDES += -I$(INCLUDE_DIR)/Database/Entities
INCLUDES += -I$(INCLUDE_DIR)/Database/Repositories
INCLUDES += -I$(INCLUDE_DIR)/Alarm
INCLUDES += -I$(INCLUDE_DIR)/Platform
INCLUDES += -I$(INCLUDE_DIR)/VirtualPoint
INCLUDES += -I$(INCLUDE_DIR)/Communication
INCLUDES += -I$(INCLUDE_DIR)/DataStore
INCLUDES += -I$(INCLUDE_DIR)/Monitoring

# MinGW include
MINGW_PREFIX = /usr/x86_64-w64-mingw32
INCLUDES += -I$(MINGW_PREFIX)/include

# ÎùºÏù¥Î∏åÎü¨Î¶¨ Ìó§Îçî
ifneq ($(wildcard $(MINGW_PREFIX)/include/nlohmann/json.hpp),)
    INCLUDES += -I$(MINGW_PREFIX)/include/nlohmann
    CXXFLAGS += -DHAVE_NLOHMANN_JSON=1
endif

ifneq ($(wildcard $(MINGW_PREFIX)/include/modbus),)
    INCLUDES += -I$(MINGW_PREFIX)/include/modbus
endif

ifneq ($(wildcard $(MINGW_PREFIX)/include/bacnet),)
    INCLUDES += -I$(MINGW_PREFIX)/include/bacnet
endif

# =============================================================================
# ÎùºÏù¥Î∏åÎü¨Î¶¨ Í∞êÏßÄ Î∞è ÏÑ§Ï†ï
# =============================================================================
LDFLAGS = -L$(MINGW_PREFIX)/lib
LDFLAGS += -Wl,--enable-stdcall-fixup
LDFLAGS += -static

# Windows ÌïÑÏàò ÎùºÏù¥Î∏åÎü¨Î¶¨
WIN_LIBS = -lws2_32 -lwsock32 -liphlpapi
WIN_LIBS += -lrpcrt4 -luuid -lole32 -loleaut32
WIN_LIBS += -lwinmm -lkernel32 -luser32 -ladvapi32
WIN_LIBS += -lpsapi -lshlwapi -ldbghelp

# Modbus
ifneq ($(wildcard $(MINGW_PREFIX)/lib/libmodbus.a),)
    PROTOCOL_LIBS += -lmodbus
    CXXFLAGS += -DHAVE_LIBMODBUS=1
    HAS_MODBUS = 1
    $(info ‚úÖ Modbus support enabled)
endif

# MQTT
ifneq ($(wildcard $(MINGW_PREFIX)/lib/libpaho-mqtt3c.a),)
    PROTOCOL_LIBS += -lpaho-mqttpp3 -lpaho-mqtt3cs -lpaho-mqtt3as -lpaho-mqtt3c
    CXXFLAGS += -DHAVE_PAHO_MQTT=1
    HAS_MQTT = 1
    $(info ‚úÖ MQTT support enabled)
endif

# BACnet
ifneq ($(wildcard $(MINGW_PREFIX)/lib/libbacnet.a),)
    PROTOCOL_LIBS += -lbacnet
    CXXFLAGS += -DHAVE_BACNET=1
    HAS_BACNET = 1
    $(info ‚úÖ BACnet support enabled)
endif

# Redis
ifneq ($(wildcard $(MINGW_PREFIX)/lib/libhiredis.a),)
    DB_LIBS += -lhiredis
    CXXFLAGS += -DHAVE_REDIS=1
    HAS_REDIS = 1
    $(info ‚úÖ Redis support enabled)
endif

# SQLite3
ifneq ($(wildcard $(MINGW_PREFIX)/lib/libsqlite3.a),)
    DB_LIBS += -lsqlite3
    CXXFLAGS += -DHAVE_SQLITE=1
    HAS_SQLITE = 1
    $(info ‚úÖ SQLite support enabled)
endif

# OpenSSL
ifneq ($(wildcard $(MINGW_PREFIX)/lib/libssl.a),)
    SSL_LIBS += -lssl -lcrypto
    CXXFLAGS += -DHAVE_OPENSSL=1
    $(info ‚úÖ OpenSSL support enabled)
endif

# QuickJS (JavaScript ÏóîÏßÑ)
ifneq ($(wildcard $(MINGW_PREFIX)/lib/libquickjs.a),)
    JS_LIBS += -lquickjs
    CXXFLAGS += -DHAVE_QUICKJS=1
    $(info ‚úÖ QuickJS support enabled)
endif

# HTTP ÎùºÏù¥Î∏åÎü¨Î¶¨ (Ìó§Îçî Ïò®Î¶¨)
ifneq ($(wildcard $(MINGW_PREFIX)/include/httplib.h),)
    CXXFLAGS += -DHAVE_HTTPLIB=1
    $(info ‚úÖ HTTP support enabled)
endif

# =============================================================================
# ÏÜåÏä§ ÌååÏùº Î™©Î°ù
# =============================================================================

# Core Î™®Îìà (ÌïÑÏàò)
CORE_SOURCES = \
    $(SRC_DIR)/main.cpp \
    $(SRC_DIR)/Core/Application.cpp

# Utils Î™®Îìà
UTILS_SOURCES = \
    $(SRC_DIR)/Utils/ConfigManager.cpp \
    $(SRC_DIR)/Utils/LogManager.cpp

# Database Î™®Îìà (SQLite Í∏∞Î∞ò)
ifdef HAS_SQLITE
DATABASE_SOURCES = \
    $(SRC_DIR)/Database/DatabaseManager.cpp \
    $(SRC_DIR)/Database/SQLiteWrapper.cpp
endif

# Client Î™®Îìà
CLIENT_SOURCES =
ifdef HAS_REDIS
    CLIENT_SOURCES += $(SRC_DIR)/Client/RedisClientImpl.cpp
endif
ifdef HAS_SQLITE
    CLIENT_SOURCES += $(SRC_DIR)/Client/SQLiteClient.cpp
endif

# Workers - Base
WORKER_BASE_SOURCES = \
    $(SRC_DIR)/Workers/Base/BaseDeviceWorker.cpp \
    $(SRC_DIR)/Workers/WorkerFactory.cpp

# Platform ÌäπÌôî Workers (Windows Ìò∏Ìôò Î≤ÑÏ†Ñ)
WORKER_PLATFORM_SOURCES = \
    $(SRC_DIR)/Workers/Base/TcpBasedWorker.cpp \
    $(SRC_DIR)/Workers/Base/SerialBasedWorker.cpp

# Workers - Protocol
WORKER_PROTOCOL_SOURCES =
ifdef HAS_MODBUS
    WORKER_PROTOCOL_SOURCES += $(SRC_DIR)/Workers/Protocol/ModbusWorker.cpp
    WORKER_PROTOCOL_SOURCES += $(SRC_DIR)/Workers/Protocol/ModbusTCPWorker.cpp
    WORKER_PROTOCOL_SOURCES += $(SRC_DIR)/Workers/Protocol/ModbusRTUWorker.cpp
endif

ifdef HAS_MQTT
    WORKER_PROTOCOL_SOURCES += $(SRC_DIR)/Workers/Protocol/MQTTWorker.cpp
endif

ifdef HAS_BACNET
    WORKER_PROTOCOL_SOURCES += $(SRC_DIR)/Workers/Protocol/BACnetWorker.cpp
endif

# Alarm Î™®Îìà (SQLite Í∏∞Î∞òÏúºÎ°ú Î≥ÄÍ≤Ω)
ifdef HAS_SQLITE
ALARM_SOURCES = \
    $(SRC_DIR)/Alarm/AlarmEngine.cpp \
    $(SRC_DIR)/Alarm/AlarmManager.cpp \
    $(SRC_DIR)/Alarm/AlarmStartupRecovery.cpp
endif

# VirtualPoint Î™®Îìà (JavaScript ÏóîÏßÑ Ìè¨Ìï®)
VIRTUAL_SOURCES = \
    $(SRC_DIR)/VirtualPoint/VirtualPointEngine.cpp \
    $(SRC_DIR)/VirtualPoint/VirtualPointManager.cpp

ifdef HAS_QUICKJS
    VIRTUAL_SOURCES += $(SRC_DIR)/VirtualPoint/JavaScriptEngine.cpp
endif

# Communication Î™®Îìà
COMM_SOURCES = \
    $(SRC_DIR)/Communication/MessageBus.cpp \
    $(SRC_DIR)/Communication/EventDispatcher.cpp

# DataStore Î™®Îìà
DATASTORE_SOURCES = \
    $(SRC_DIR)/DataStore/DataCache.cpp \
    $(SRC_DIR)/DataStore/HistoryManager.cpp

# Monitoring Î™®Îìà
MONITORING_SOURCES = \
    $(SRC_DIR)/Monitoring/PerformanceMonitor.cpp \
    $(SRC_DIR)/Monitoring/SystemHealthMonitor.cpp

# HTTP API Î™®Îìà
ifdef HAVE_HTTPLIB
HTTP_SOURCES = \
    $(SRC_DIR)/HTTP/HttpServer.cpp \
    $(SRC_DIR)/HTTP/RestApiHandler.cpp
endif

# Ï†ÑÏ≤¥ ÏÜåÏä§ Î™©Î°ù
SOURCES = $(CORE_SOURCES) \
          $(UTILS_SOURCES) \
          $(DATABASE_SOURCES) \
          $(CLIENT_SOURCES) \
          $(WORKER_BASE_SOURCES) \
          $(WORKER_PLATFORM_SOURCES) \
          $(WORKER_PROTOCOL_SOURCES) \
          $(ALARM_SOURCES) \
          $(VIRTUAL_SOURCES) \
          $(COMM_SOURCES) \
          $(DATASTORE_SOURCES) \
          $(MONITORING_SOURCES) \
          $(HTTP_SOURCES)

# Ïã§Ï†ú Ï°¥Ïû¨ÌïòÎäî ÏÜåÏä§Îßå ÌïÑÌÑ∞ÎßÅ
EXISTING_SOURCES = $(wildcard $(SOURCES))

# Ïò§Î∏åÏ†ùÌä∏ ÌååÏùº
OBJS = $(EXISTING_SOURCES:$(SRC_DIR)/%.cpp=$(BUILD_DIR)/%.o)

# Î™®Îì† ÎùºÏù¥Î∏åÎü¨Î¶¨
LIBS = $(PROTOCOL_LIBS) $(DB_LIBS) $(SSL_LIBS) $(JS_LIBS) $(WIN_LIBS) -lpthread

# =============================================================================
# ÎπåÎìú Í∑úÏπô
# =============================================================================

.PHONY: all clean check-env info test

all: check-env $(BIN_DIR)/$(TARGET)

check-env:
	@echo "================================================"
	@echo "  PulseOne Windows Cross-Compile Environment"
	@echo "================================================"
	@echo "Compiler: $(CXX)"
	@echo "Platform: $(PLATFORM)"
	@echo ""
	@echo "Enabled Features:"
	@echo "  Modbus:   $(if $(HAS_MODBUS),‚úÖ,‚ùå)"
	@echo "  MQTT:     $(if $(HAS_MQTT),‚úÖ,‚ùå)"
	@echo "  BACnet:   $(if $(HAS_BACNET),‚úÖ,‚ùå)"
	@echo "  Redis:    $(if $(HAS_REDIS),‚úÖ,‚ùå)"
	@echo "  SQLite:   $(if $(HAS_SQLITE),‚úÖ,‚ùå)"
	@echo "  OpenSSL:  $(if $(findstring -lssl,$(SSL_LIBS)),‚úÖ,‚ùå)"
	@echo "  QuickJS:  $(if $(findstring -lquickjs,$(JS_LIBS)),‚úÖ,‚ùå)"
	@echo "  HTTP API: $(if $(findstring HAVE_HTTPLIB,$(CXXFLAGS)),‚úÖ,‚ùå)"
	@echo "================================================"

$(BIN_DIR)/$(TARGET): $(OBJS)
	@mkdir -p $(BIN_DIR)
	@echo "üîó Linking $@..."
	$(CXX) $(LDFLAGS) -o $@ $(OBJS) $(LIBS)
	@echo "üì¶ Stripping debug symbols..."
	$(STRIP) $@
	@echo "‚úÖ Build complete: $@ ($(shell du -h $@ 2>/dev/null | cut -f1))"

$(BUILD_DIR)/%.o: $(SRC_DIR)/%.cpp
	@mkdir -p $(dir $@)
	@echo "‚öôÔ∏è  Compiling $(notdir $<)..."
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@ 2>/dev/null || \
	 (echo "‚ùå Failed: $(notdir $<)" && exit 1)

clean:
	@echo "üßπ Cleaning build artifacts..."
	@rm -rf $(BUILD_DIR) $(BIN_DIR)
	@echo "‚úÖ Clean complete"

info:
	@echo "Source files to compile:"
	@for src in $(EXISTING_SOURCES); do echo "  - $$src"; done
	@echo ""
	@echo "Total: $(words $(EXISTING_SOURCES)) files"

test: $(BIN_DIR)/$(TARGET)
	@echo "üß™ Testing executable..."
	@file $(BIN_DIR)/$(TARGET) | grep -q "PE32+" && \
	 echo "‚úÖ Valid Windows 64-bit executable" || \
	 echo "‚ùå Invalid executable format"