# =============================================================================
# Makefile.windows - 실제 파일 기반 PulseOne Windows 크로스 컴파일
# =============================================================================

# 기본 설정
CXX = x86_64-w64-mingw32-g++
CC = x86_64-w64-mingw32-gcc
AR = x86_64-w64-mingw32-ar
STRIP = x86_64-w64-mingw32-strip

# 디렉토리
SRC_DIR = src
INCLUDE_DIR = include
BUILD_DIR = build-windows
BIN_DIR = bin-windows
TARGET = collector.exe

# Windows 특화 컴파일 플래그
CXXFLAGS = -std=c++17 -O2 -Wall -Wextra
CXXFLAGS += -DPULSEONE_WINDOWS=1 -D_WIN32 -DPULSEONE_DISABLE_MSSQL=1
CXXFLAGS += -DWIN32_LEAN_AND_MEAN -DNOMINMAX
CXXFLAGS += -static -static-libgcc -static-libstdc++

# Include 경로
MINGW_PREFIX = /usr/x86_64-w64-mingw32
INCLUDES = -I$(INCLUDE_DIR)
INCLUDES += -I$(INCLUDE_DIR)/Platform
INCLUDES += -I$(INCLUDE_DIR)/Common
INCLUDES += -I$(INCLUDE_DIR)/Utils
INCLUDES += -I$(INCLUDE_DIR)/Database
INCLUDES += -I$(INCLUDE_DIR)/Database/Entities
INCLUDES += -I$(INCLUDE_DIR)/Database/Repositories
INCLUDES += -I$(INCLUDE_DIR)/Workers
INCLUDES += -I$(INCLUDE_DIR)/Workers/Base
INCLUDES += -I$(INCLUDE_DIR)/Workers/Protocol
INCLUDES += -I$(INCLUDE_DIR)/Workers/Components
INCLUDES += -I$(INCLUDE_DIR)/Client
INCLUDES += -I$(INCLUDE_DIR)/Alarm
INCLUDES += -I$(INCLUDE_DIR)/VirtualPoint
INCLUDES += -I$(INCLUDE_DIR)/Pipeline
INCLUDES += -I$(INCLUDE_DIR)/Storage
INCLUDES += -I$(MINGW_PREFIX)/include

# 라이브러리 감지 및 설정
LDFLAGS = -L$(MINGW_PREFIX)/lib -static

# Windows 필수 라이브러리
WIN_LIBS = -lws2_32 -lwsock32 -liphlpapi -lrpcrt4 -luuid
WIN_LIBS += -lwinmm -lkernel32 -luser32 -ladvapi32

# SQLite (기본)
DB_LIBS = -lsqlite3

# 프로토콜 라이브러리 (선택적)
PROTOCOL_LIBS =
ifneq ($(wildcard $(MINGW_PREFIX)/lib/libmodbus.a),)
    PROTOCOL_LIBS += -lmodbus
    CXXFLAGS += -DHAVE_MODBUS=1
endif

ifneq ($(wildcard $(MINGW_PREFIX)/lib/libpaho-mqtt3c.a),)
    PROTOCOL_LIBS += -lpaho-mqtt3c
    CXXFLAGS += -DHAVE_MQTT=1
endif

ifneq ($(wildcard $(MINGW_PREFIX)/lib/libbacnet.a),)
    PROTOCOL_LIBS += -lbacnet
    CXXFLAGS += -DHAVE_BACNET=1
endif

# Redis (선택적)
ifneq ($(wildcard $(MINGW_PREFIX)/lib/libhiredis.a),)
    DB_LIBS += -lhiredis
    CXXFLAGS += -DHAVE_REDIS=1
endif

# 모든 라이브러리
LIBS = $(PROTOCOL_LIBS) $(DB_LIBS) $(WIN_LIBS) -lpthread

# =============================================================================
# 실제 존재하는 소스 파일 탐지
# =============================================================================

# wildcard를 사용해서 실제 존재하는 파일만 포함
ALL_CPP_FILES = $(shell find $(SRC_DIR) -name "*.cpp" -type f 2>/dev/null)

# 컴파일할 소스 파일들 (main.cpp는 마지막에)
SOURCES = $(filter-out $(SRC_DIR)/main.cpp,$(ALL_CPP_FILES))
MAIN_SOURCE = $(SRC_DIR)/main.cpp

# 오브젝트 파일들
OBJECTS = $(SOURCES:$(SRC_DIR)/%.cpp=$(BUILD_DIR)/%.o)
MAIN_OBJECT = $(BUILD_DIR)/main.o

# =============================================================================
# 빌드 규칙
# =============================================================================

.PHONY: all clean info check-files help

all: check-files $(BIN_DIR)/$(TARGET)

check-files:
	@echo "================================================"
	@echo "  PulseOne Windows Cross-Compile"
	@echo "================================================"
	@echo "Compiler: $(CXX)"
	@echo "Found CPP files: $(words $(ALL_CPP_FILES))"
	@echo ""
	@echo "Libraries:"
	@echo "  SQLite:   ✅ (기본)"
	@echo "  Modbus:   $(if $(findstring -lmodbus,$(PROTOCOL_LIBS)),✅,❌)"
	@echo "  MQTT:     $(if $(findstring -lpaho-mqtt3c,$(PROTOCOL_LIBS)),✅,❌)"
	@echo "  BACnet:   $(if $(findstring -lbacnet,$(PROTOCOL_LIBS)),✅,❌)"
	@echo "  Redis:    $(if $(findstring -lhiredis,$(DB_LIBS)),✅,❌)"
	@echo "================================================"

$(BIN_DIR)/$(TARGET): $(OBJECTS) $(MAIN_OBJECT) | $(BIN_DIR)
	@echo "🔗 Linking $@..."
	$(CXX) $(LDFLAGS) -o $@ $(OBJECTS) $(MAIN_OBJECT) $(LIBS)
	@echo "📦 Stripping debug symbols..."
	$(STRIP) $@
	@echo "✅ Build complete: $@"
	@echo "   Size: $(shell du -h $@ 2>/dev/null | cut -f1 || echo 'N/A')"

# 일반 소스 파일 컴파일
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.cpp | $(BUILD_DIR)
	@mkdir -p $(dir $@)
	@echo "⚙️  Compiling $(notdir $<)..."
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@ || \
	 (echo "❌ Failed: $(notdir $<)" && exit 1)

# main.cpp 컴파일
$(MAIN_OBJECT): $(MAIN_SOURCE) | $(BUILD_DIR)
	@mkdir -p $(dir $@)
	@echo "⚙️  Compiling main.cpp..."
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@ || \
	 (echo "❌ Failed: main.cpp" && exit 1)

# 디렉토리 생성
$(BUILD_DIR):
	@mkdir -p $@
	@mkdir -p $(BUILD_DIR)/Utils
	@mkdir -p $(BUILD_DIR)/Database
	@mkdir -p $(BUILD_DIR)/Database/Entities
	@mkdir -p $(BUILD_DIR)/Database/Repositories
	@mkdir -p $(BUILD_DIR)/Workers
	@mkdir -p $(BUILD_DIR)/Workers/Base
	@mkdir -p $(BUILD_DIR)/Workers/Protocol
	@mkdir -p $(BUILD_DIR)/Workers/Components
	@mkdir -p $(BUILD_DIR)/Client
	@mkdir -p $(BUILD_DIR)/Alarm
	@mkdir -p $(BUILD_DIR)/VirtualPoint
	@mkdir -p $(BUILD_DIR)/Pipeline
	@mkdir -p $(BUILD_DIR)/Storage
	@mkdir -p $(BUILD_DIR)/Platform

$(BIN_DIR):
	@mkdir -p $@

clean:
	@echo "🧹 Cleaning build artifacts..."
	@rm -rf $(BUILD_DIR) $(BIN_DIR)
	@echo "✅ Clean complete"

info:
	@echo "📊 Source files analysis:"
	@echo "Total CPP files: $(words $(ALL_CPP_FILES))"
	@echo ""
	@echo "Found source files:"
	@for src in $(ALL_CPP_FILES); do echo "  - $$src"; done
	@echo ""
	@echo "Will compile $(words $(SOURCES)) files + main.cpp"

# 개별 파일 테스트 컴파일
test-file:
	@if [ -z "$(FILE)" ]; then \
		echo "Usage: make test-file FILE=src/path/to/file.cpp"; \
		exit 1; \
	fi
	@echo "🧪 Testing compilation of $(FILE)..."
	@mkdir -p build-test
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $(FILE) -o build-test/test.o && \
	 echo "✅ $(FILE) compiles successfully" || \
	 echo "❌ $(FILE) failed to compile"
	@rm -f build-test/test.o

help:
	@echo "PulseOne Windows Build System"
	@echo ""
	@echo "Targets:"
	@echo "  all        - Build complete project"
	@echo "  clean      - Clean build artifacts"
	@echo "  info       - Show source file information"
	@echo "  test-file  - Test single file (use FILE=path)"
	@echo "  help       - Show this help"
	@echo ""
	@echo "Examples:"
	@echo "  make all"
	@echo "  make test-file FILE=src/main.cpp"
	@echo "  make clean"