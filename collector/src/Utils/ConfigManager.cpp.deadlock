// =============================================================================
// 디버깅용 ConfigManager.cpp - 각 단계마다 로그 추가
// =============================================================================

#include "Utils/ConfigManager.h"
#include "Utils/LogManager.h"
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <algorithm>
#include <filesystem>
#include <iostream>
#include <cstring>

ConfigManager& ConfigManager::getInstance() {
    static ConfigManager instance;
    return instance;
}

void ConfigManager::initialize() {
    std::lock_guard<std::mutex> lock(configMutex);
    
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 ConfigManager 초기화 시작...");
    
    // 1. 설정 디렉토리 찾기
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 1단계: 설정 디렉토리 찾기 시작");
    configDir_ = findConfigDirectory();
    if (configDir_.empty()) {
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::ERROR, "❌ 설정 디렉토리를 찾을 수 없습니다!");
        return;
    }
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ 설정 디렉토리: " + configDir_);
    
    // 2. 설정 파일들 존재 확인 및 생성
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 2단계: 설정 파일 확인 시작");
    try {
        ensureConfigFilesExist();
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ 2단계: 설정 파일 확인 완료");
    } catch (const std::exception& e) {
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::WARN, "⚠️ 설정 파일 생성 중 오류 (계속 진행): " + std::string(e.what()));
    }
    
    // 3. 데이터 디렉토리 설정
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 3단계: 데이터 디렉토리 설정 시작");
    dataDir_ = findDataDirectory();
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ 3단계: 데이터 디렉토리: " + dataDir_);
    
    try {
        ensureDataDirectories();
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ 3단계: 데이터 디렉토리 생성 완료");
    } catch (const std::exception& e) {
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::WARN, "⚠️ 데이터 디렉토리 생성 중 오류: " + std::string(e.what()));
    }
    
    // 4. envFilePath 설정
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 4단계: envFilePath 설정");
    envFilePath = configDir_ + "/.env";
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ 4단계: envFilePath = " + envFilePath);
    
    // 5. 메인 설정 파일 로드
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 5단계: 메인 설정 파일 로드 시작");
    loadMainConfig();
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ 5단계: 메인 설정 파일 로드 완료");
    
    // 6. 추가 설정 파일 로드
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 6단계: 추가 설정 파일 로드 시작");
    loadAdditionalConfigs();
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ 6단계: 추가 설정 파일 로드 완료");
    
    // 7. 변수 확장
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 7단계: 변수 확장 시작");
    expandAllVariables();
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ 7단계: 변수 확장 완료");
    
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, 
        "✅ ConfigManager 초기화 완료 - " + std::to_string(configMap.size()) + "개 설정 로드됨");
}

// =============================================================================
// 기존 메서드들 (변경 없음)
// =============================================================================

void ConfigManager::reload() {
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔄 ConfigManager 재로딩 시작...");
    {
        std::lock_guard<std::mutex> lock(configMutex);
        configMap.clear();
        loadedFiles_.clear();
        searchLog_.clear();
    }
    initialize();
}

std::string ConfigManager::findConfigDirectory() {
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 findConfigDirectory() 시작");
    
    searchLog_.clear();
    
    // 1. 환경변수 확인 (최우선)
    const char* env_config = std::getenv("PULSEONE_CONFIG_DIR");
    if (env_config && strlen(env_config) > 0 && directoryExists(env_config)) {
        searchLog_.push_back("✅ 환경변수: " + std::string(env_config));
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ 환경변수에서 발견: " + std::string(env_config));
        return std::string(env_config);
    } else if (env_config) {
        searchLog_.push_back("❌ 환경변수 (존재하지 않음): " + std::string(env_config));
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "❌ 환경변수 디렉토리 없음: " + std::string(env_config));
    }
    
    // 기본 경로들 확인 (간소화)
    std::vector<std::string> candidates = {"./config", "../config", "../../config"};
    
    for (const auto& candidate : candidates) {
        try {
            if (directoryExists(candidate)) {
                std::string canonical_path = std::filesystem::canonical(candidate).string();
                searchLog_.push_back("✅ 발견: " + candidate + " → " + canonical_path);
                PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ 기본 경로에서 발견: " + canonical_path);
                return canonical_path;
            } else {
                searchLog_.push_back("❌ 없음: " + candidate);
            }
        } catch (const std::exception& e) {
            searchLog_.push_back("❌ 오류: " + candidate + " (" + e.what() + ")");
        }
    }
    
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::WARN, "❌ 설정 디렉토리를 찾을 수 없음");
    return "";
}

bool ConfigManager::directoryExists(const std::string& path) {
    try {
        return std::filesystem::exists(path) && std::filesystem::is_directory(path);
    } catch (const std::exception&) {
        return false;
    }
}

void ConfigManager::ensureConfigFilesExist() {
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 설정 파일 존재 여부 확인 중...");
    
    try {
        // 메인 .env 파일만 확인/생성
        std::string main_env_path = configDir_ + "/.env";
        if (!std::filesystem::exists(main_env_path)) {
            PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::WARN, "⚠️ 메인 설정 파일 없음, 기본 템플릿 생성: .env");
            createMainEnvFile();
        } else {
            PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ 메인 설정 파일 존재: .env");
        }
        
        // 기본 추가 파일들도 생성 (실패해도 계속 진행)
        createDefaultConfigFiles();
        
    } catch (const std::exception& e) {
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::WARN, "⚠️ 설정 파일 확인 중 오류: " + std::string(e.what()) + " (계속 진행)");
    }
}

void ConfigManager::createDefaultConfigFiles() {
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 기본 설정 파일들 생성 시작");
    
    try {
        createSecretsDirectory();
        createDatabaseEnvFile();
        createRedisEnvFile();
        createTimeseriesEnvFile();
        createMessagingEnvFile();
        
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ 기본 설정 파일들이 생성되었습니다.");
            
    } catch (const std::exception& e) {
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::WARN, "⚠️ 추가 설정 파일 생성 실패: " + std::string(e.what()));
    }
}

void ConfigManager::createMainEnvFile() {
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 메인 .env 파일 생성");
    
    std::string content = R"(# PulseOne 메인 설정 파일 (.env) - 자동 생성됨
NODE_ENV=development
LOG_LEVEL=info
DATABASE_TYPE=SQLITE
DATA_DIR=./data
MAX_WORKER_THREADS=4
DEFAULT_TIMEOUT_MS=5000
CONFIG_FILES=
)";
    
    if (createFileFromTemplate(configDir_ + "/.env", content)) {
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ 메인 .env 파일 생성 완료");
    } else {
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::WARN, "⚠️ 메인 .env 파일 생성 실패");
    }
}

// 나머지 create 메서드들 (간소화)
void ConfigManager::createDatabaseEnvFile() {
    std::string content = "# Database config\nDATABASE_TYPE=SQLITE\n";
    createFileFromTemplate(configDir_ + "/database.env", content);
}

void ConfigManager::createRedisEnvFile() {
    std::string content = "# Redis config\nREDIS_HOST=localhost\n";
    createFileFromTemplate(configDir_ + "/redis.env", content);
}

void ConfigManager::createTimeseriesEnvFile() {
    std::string content = "# Timeseries config\nINFLUX_HOST=localhost\n";
    createFileFromTemplate(configDir_ + "/timeseries.env", content);
}

void ConfigManager::createMessagingEnvFile() {
    std::string content = "# Messaging config\nRABBITMQ_HOST=localhost\n";
    createFileFromTemplate(configDir_ + "/messaging.env", content);
}

void ConfigManager::createSecretsDirectory() {
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 Secrets 디렉토리 생성");
    
    std::string secrets_dir = configDir_ + "/secrets";
    
    try {
        if (std::filesystem::exists(secrets_dir)) {
            return;
        }
        
        std::filesystem::create_directories(secrets_dir);
        
        std::string readme_content = "# Secrets Directory\n";
        createFileFromTemplate(secrets_dir + "/README.md", readme_content);
        createFileFromTemplate(secrets_dir + "/.gitignore", "*\n!README.md\n!.gitignore\n");
        
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ Secrets 디렉토리 생성: " + secrets_dir);
            
    } catch (const std::exception& e) {
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::WARN, "⚠️ Secrets 디렉토리 생성 실패: " + std::string(e.what()));
    }
}

bool ConfigManager::createFileFromTemplate(const std::string& filepath, const std::string& content) {
    try {
        if (std::filesystem::exists(filepath)) {
            return true;
        }
        
        std::ofstream file(filepath);
        if (!file.is_open()) {
            return false;
        }
        
        file << content;
        file.close();
        
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ 설정 파일 생성: " + std::filesystem::path(filepath).filename().string());
        
        return true;
        
    } catch (const std::exception& e) {
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::WARN, "⚠️ 파일 생성 중 예외: " + std::string(e.what()));
        return false;
    }
}

std::string ConfigManager::findDataDirectory() {
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 findDataDirectory() 시작");
    
    // 1. 환경변수 최우선 확인
    const char* env_data = std::getenv("PULSEONE_DATA_DIR");
    if (env_data && strlen(env_data) > 0) {
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ 환경변수에서 데이터 디렉토리: " + std::string(env_data));
        return std::string(env_data);
    }
    
    // 2. 설정파일에서 확인
    std::string config_data = get("DATA_DIR");
    if (!config_data.empty()) {
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ 설정에서 데이터 디렉토리: " + config_data);
        return expandVariables(config_data);
    }
    
    // 3. 기본 경로 사용
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ 기본 데이터 디렉토리: ./data");
    return "./data";
}

void ConfigManager::ensureDataDirectories() {
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 ensureDataDirectories() 시작");
    
    if (dataDir_.empty()) {
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::WARN, "⚠️ 데이터 디렉토리가 비어있음");
        return;
    }
    
    std::vector<std::string> dirs = {"db", "logs", "backup", "temp"};
    
    for (const auto& dir : dirs) {
        try {
            std::string full_path = dataDir_ + "/" + dir;
            std::filesystem::create_directories(full_path);
            PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ 디렉토리 생성: " + full_path);
        } catch (const std::exception& e) {
            PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::WARN, "⚠️ 디렉토리 생성 실패: " + dir + " - " + e.what());
        }
    }
    
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ ensureDataDirectories() 완료");
}

void ConfigManager::loadMainConfig() {
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 loadMainConfig() 시작");
    
    std::string main_env_path = configDir_ + "/.env";
    
    if (std::filesystem::exists(main_env_path)) {
        loadConfigFile(main_env_path);
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ 메인 설정 로드: .env");
    } else {
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::WARN, "⚠️ 메인 설정 파일 없음: .env");
    }
    
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ loadMainConfig() 완료");
}

void ConfigManager::loadAdditionalConfigs() {
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 loadAdditionalConfigs() 시작");
    
    // CONFIG_FILES에서 추가 파일 목록 읽기
    std::string config_files = getOrDefault("CONFIG_FILES", "");
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 CONFIG_FILES 값: '" + config_files + "'");
    
    if (config_files.empty()) {
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "ℹ️ 추가 설정 파일 없음 (CONFIG_FILES 비어있음)");
        return;
    }
    
    // 🚨 무한루프 방지: 간단하게 처리
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "ℹ️ 추가 설정 파일 기능 임시 비활성화 (무한루프 방지)");
    
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ loadAdditionalConfigs() 완료");
}

void ConfigManager::loadConfigFile(const std::string& filepath) {
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 loadConfigFile() 시작: " + filepath);
    
    std::ifstream file(filepath);
    if (!file.is_open()) {
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::ERROR, "❌ 파일 열기 실패: " + filepath);
        return;
    }
    
    std::string line;
    int line_count = 0;
    int parsed_count = 0;
    
    while (std::getline(file, line)) {
        line_count++;
        size_t original_size = configMap.size();
        parseLine(line);
        
        if (configMap.size() > original_size) {
            parsed_count++;
        }
    }
    
    file.close();
    loadedFiles_.push_back(filepath);
    
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, 
        "📄 " + filepath + " - " + std::to_string(parsed_count) + "/" + std::to_string(line_count) + " 라인 파싱됨");
    
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ loadConfigFile() 완료");
}

void ConfigManager::expandAllVariables() {
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 expandAllVariables() 시작");
    
    // 간단하게 처리 (무한루프 방지)
    bool changed = true;
    int max_iterations = 3;  // 최대 3번만
    
    for (int i = 0; i < max_iterations && changed; ++i) {
        changed = false;
        
        for (auto& [key, value] : configMap) {
            std::string expanded = expandVariables(value);
            if (expanded != value) {
                value = expanded;
                changed = true;
            }
        }
        
        PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "🔍 변수 확장 반복 " + std::to_string(i + 1) + "회");
    }
    
    PulseOne::LogManager::getInstance().log("config", PulseOne::LogLevel::INFO, "✅ expandAllVariables() 완료");
}

std::string ConfigManager::expandVariables(const std::string& value) const {
    // 간단한 버전 (무한루프 방지)
    return value;  // 일단 변수 확장 비활성화
}

// 기본 인터페이스들
void ConfigManager::parseLine(const std::string& line) {
    if (line.empty() || line[0] == '#') return;

    size_t eqPos = line.find('=');
    if (eqPos == std::string::npos) return;

    std::string key = line.substr(0, eqPos);
    std::string value = line.substr(eqPos + 1);

    // 앞뒤 공백 제거
    key.erase(std::remove_if(key.begin(), key.end(), ::isspace), key.end());
    value.erase(0, value.find_first_not_of(" \t"));
    value.erase(value.find_last_not_of(" \t") + 1);
    value.erase(std::remove(value.begin(), value.end(), '\"'), value.end());

    if (!key.empty()) {
        configMap[key] = value;
    }
}

std::string ConfigManager::get(const std::string& key) const {
    std::lock_guard<std::mutex> lock(configMutex);
    auto it = configMap.find(key);
    return (it != configMap.end()) ? it->second : "";
}

std::string ConfigManager::getOrDefault(const std::string& key, const std::string& defaultValue) const {
    std::lock_guard<std::mutex> lock(configMutex);
    auto it = configMap.find(key);
    return (it != configMap.end()) ? it->second : defaultValue;
}

void ConfigManager::set(const std::string& key, const std::string& value) {
    std::lock_guard<std::mutex> lock(configMutex);
    configMap[key] = value;
}

bool ConfigManager::hasKey(const std::string& key) const {
    std::lock_guard<std::mutex> lock(configMutex);
    return configMap.find(key) != configMap.end();
}

std::map<std::string, std::string> ConfigManager::listAll() const {
    std::lock_guard<std::mutex> lock(configMutex);
    return configMap;
}

// 추가 메서드들 (기본 구현)
int ConfigManager::getInt(const std::string& key, int defaultValue) const {
    std::string value = get(key);
    if (value.empty()) return defaultValue;
    try { return std::stoi(value); } catch (...) { return defaultValue; }
}

bool ConfigManager::getBool(const std::string& key, bool defaultValue) const {
    std::string value = get(key);
    if (value.empty()) return defaultValue;
    std::transform(value.begin(), value.end(), value.begin(), ::tolower);
    return (value == "true" || value == "yes" || value == "1" || value == "on");
}

double ConfigManager::getDouble(const std::string& key, double defaultValue) const {
    std::string value = get(key);
    if (value.empty()) return defaultValue;
    try { return std::stod(value); } catch (...) { return defaultValue; }
}

std::string ConfigManager::getDataDirectory() const {
    return dataDir_.empty() ? "./data" : dataDir_;
}

std::string ConfigManager::getSQLiteDbPath() const {
    return getDataDirectory() + "/db/pulseone.db";
}

std::string ConfigManager::getBackupDirectory() const {
    return getDataDirectory() + "/backup";
}

void ConfigManager::printConfigSearchLog() const {
    std::cout << "\n🔍 ConfigManager 경로 검색 로그:\n";
    for (const auto& log_entry : searchLog_) {
        std::cout << log_entry << "\n";
    }
    std::cout << "\n📄 로드된 설정 파일들:\n";
    for (const auto& file : loadedFiles_) {
        std::cout << "  " + file << "\n";
    }
    std::cout << "\n⚙️ 총 " << configMap.size() << "개 설정 항목 로드됨\n";
}