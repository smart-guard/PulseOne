기본 사용법

// 드라이버 생성
auto modbus_driver = DriverFactory::GetInstance().CreateDriver(ProtocolType::MODBUS_TCP);

// 설정
DriverConfig config;
config.device_id = "modbus-device-001";
config.endpoint = "192.168.1.100:502";
config.timeout_ms = 3000;
config.polling_interval_ms = 1000;

// 슬레이브 ID 설정
config.protocol_settings["slave_id"] = "1";

// 초기화 및 연결
modbus_driver->Initialize(config);
modbus_driver->Connect();

// 데이터 포인트 설정
DataPoint temperature_point;
temperature_point.id = "temp-001";
temperature_point.address = 100;
temperature_point.data_type = DataType::FLOAT;
temperature_point.scaling_factor = 0.1;  // 원시값 * 0.1
temperature_point.unit = "°C";
temperature_point.properties["modbus_function"] = "input_registers";

// 데이터 읽기
std::vector<DataPoint> points = {temperature_point};
std::vector<TimestampedValue> values;
bool success = modbus_driver->ReadValues(points, values);

if (success) {
    auto temp_value = std::get<float>(values[0].value);
    std::cout << "Temperature: " << temp_value << "°C" << std::endl;
}


고급 기능 사용
// 대량 레지스터 읽기
std::vector<uint16_t> registers;
bool success = static_cast<ModbusDriver*>(modbus_driver.get())
    ->ReadHoldingRegistersBulk(1, 0, 50, registers, 3);

// 연결 품질 테스트
int quality = static_cast<ModbusDriver*>(modbus_driver.get())
    ->TestConnectionQuality();
std::cout << "Connection quality: " << quality << "%" << std::endl;

// 진단 정보 확인
auto diagnostics = modbus_driver->GetDiagnostics();
for (const auto& [key, value] : diagnostics) {
    std::cout << key << ": " << value << std::endl;
}