# =============================================================================
# collector/tests/Makefile.windows - Windows 네이티브 + MinGW 크로스 컴파일 테스트
# 리눅스 테스트 Makefile 기반으로 Windows 환경 최적화
# =============================================================================

# Windows 빌드 환경 감지
UNAME := $(shell uname -s 2>/dev/null || echo Windows)
ifeq ($(OS),Windows_NT)
    # 네이티브 Windows 환경
    PLATFORM := Windows-Native
    IS_WINDOWS_NATIVE := 1
    IS_MINGW_CROSS := 0
    CXX := g++
    EXE_SUFFIX := .exe
    PATH_SEP := \\
    MKDIR_CMD := if not exist
    RM_CMD := del /Q /F
    RMDIR_CMD := rmdir /S /Q
else ifeq ($(findstring MINGW,$(UNAME)),MINGW)
    # MSYS2/MinGW 환경
    PLATFORM := Windows-MSYS2
    IS_WINDOWS_NATIVE := 0
    IS_MINGW_CROSS := 0
    CXX := g++
    EXE_SUFFIX := .exe
    PATH_SEP := /
    MKDIR_CMD := mkdir -p
    RM_CMD := rm -f
    RMDIR_CMD := rm -rf
else
    # Linux에서 MinGW 크로스 컴파일
    PLATFORM := Linux-CrossCompile
    IS_WINDOWS_NATIVE := 0
    IS_MINGW_CROSS := 1
    CXX := x86_64-w64-mingw32-g++
    EXE_SUFFIX := .exe
    PATH_SEP := /
    MKDIR_CMD := mkdir -p
    RM_CMD := rm -f
    RMDIR_CMD := rm -rf
    MINGW_PREFIX := /usr/x86_64-w64-mingw32
endif

# 성능 최적화 (Windows에서는 보수적으로)
ifeq ($(IS_WINDOWS_NATIVE),1)
    NPROC := $(shell echo %NUMBER_OF_PROCESSORS% 2>nul || echo 4)
    MAKEFLAGS += -j$(NPROC)
else
    NPROC := $(shell nproc 2>/dev/null || echo 4)
    MAKEFLAGS += -j$(NPROC) --output-sync=target
endif

# Windows 컴파일러 설정 (보안 강화)
CXXFLAGS = -std=c++17 -Wall -Wextra -g -DPULSEONE_DEBUG_MODE \
           -O1 -fno-omit-frame-pointer \
           -DPULSEONE_WINDOWS=1 -DPULSEONE_LINUX=0 \
           -D_WIN32_WINNT=0x0A00 -DWIN32_LEAN_AND_MEAN -DNOMINMAX \
           -DUNICODE -D_UNICODE \
           -Wno-unused-but-set-variable -Wno-unused-variable \
           -Wno-unused-parameter \
           -fdiagnostics-color=always

# 크로스 컴파일 시 정적 링킹 강제
ifeq ($(IS_MINGW_CROSS),1)
    CXXFLAGS += -static-libgcc -static-libstdc++
    LDFLAGS = -static -Wl,--gc-sections
else
    LDFLAGS = -Wl,--gc-sections
endif

# 디렉토리 설정 (Windows 경로 호환)
ifeq ($(IS_WINDOWS_NATIVE),1)
    OBJ_DIR := .\\obj
    BIN_DIR := .\\bin
    DATA_DIR := .\\data
    LOG_DIR := .\\logs
    PARENT_DIR := ..
    INCLUDE_DIR := $(PARENT_DIR)\\include
    SRC_DIR := $(PARENT_DIR)\\src
else
    OBJ_DIR := ./obj
    BIN_DIR := ./bin
    DATA_DIR := ./data
    LOG_DIR := ./logs
    PARENT_DIR := ..
    INCLUDE_DIR := $(PARENT_DIR)/include
    SRC_DIR := $(PARENT_DIR)/src
endif

# Include 경로 설정 (크로스 컴파일 고려)
INCLUDES = -I$(INCLUDE_DIR) \
           -I$(INCLUDE_DIR)/Platform \
           -I$(INCLUDE_DIR)/Api \
           -I$(INCLUDE_DIR)/Alarm \
           -I$(INCLUDE_DIR)/VirtualPoint \
           -I$(INCLUDE_DIR)/Network \
           -I$(INCLUDE_DIR)/Workers \
           -I$(INCLUDE_DIR)/Workers/Base \
           -I$(INCLUDE_DIR)/Workers/Protocol \
           -I$(INCLUDE_DIR)/Workers/Components \
           -I$(INCLUDE_DIR)/Database \
           -I$(INCLUDE_DIR)/Database/Entities \
           -I$(INCLUDE_DIR)/Database/Repositories \
           -I$(INCLUDE_DIR)/Common \
           -I$(INCLUDE_DIR)/Utils \
           -I$(INCLUDE_DIR)/Config \
           -I$(INCLUDE_DIR)/Drivers \
           -I$(INCLUDE_DIR)/Drivers/Common \
           -I$(INCLUDE_DIR)/Pipeline \
           -I$(INCLUDE_DIR)/Storage \
           -I$(INCLUDE_DIR)/Client

# 크로스 컴파일용 추가 include 경로
ifeq ($(IS_MINGW_CROSS),1)
    INCLUDES += -I$(MINGW_PREFIX)/include
endif

# =============================================================================
# Windows 라이브러리 감지 (플랫폼별)
# =============================================================================

# Windows 전용 라이브러리 감지 함수
define check_windows_lib
$(shell $(CXX) -print-search-dirs | grep -q "$(1)" && echo "1" || echo "0")
endef

# 네이티브 Windows에서 라이브러리 감지
ifeq ($(IS_WINDOWS_NATIVE),1)
    # pkg-config 대신 직접 라이브러리 체크
    HAS_NLOHMANN_JSON := $(shell echo '\#include <nlohmann/json.hpp>' | $(CXX) -E -x c++ - >nul 2>&1 && echo "1" || echo "0")
    HAS_HIREDIS := $(shell echo '\#include <hiredis/hiredis.h>' | $(CXX) -E -x c++ - >nul 2>&1 && echo "1" || echo "0")
    HAS_HTTPLIB := $(shell echo '\#include <httplib.h>' | $(CXX) -E -x c++ - >nul 2>&1 && echo "1" || echo "0")
    HAS_SQLITE3 := 1  # Windows에서는 기본 포함
else ifeq ($(IS_MINGW_CROSS),1)
    # 크로스 컴파일 환경에서 라이브러리 감지
    HAS_NLOHMANN_JSON := $(shell echo '\#include <nlohmann/json.hpp>' | $(CXX) -I$(MINGW_PREFIX)/include -E -x c++ - >/dev/null 2>&1 && echo "1" || echo "0")
    HAS_HIREDIS := $(shell [ -f "$(MINGW_PREFIX)/lib/libhiredis.a" ] && echo "1" || echo "0")
    HAS_HTTPLIB := $(shell [ -f "$(MINGW_PREFIX)/include/httplib.h" ] && echo "1" || echo "0")
    HAS_SQLITE3 := $(shell [ -f "$(MINGW_PREFIX)/lib/libsqlite3.a" ] && echo "1" || echo "0")
else
    # MSYS2 환경
    HAS_NLOHMANN_JSON := $(shell echo '\#include <nlohmann/json.hpp>' | $(CXX) -E -x c++ - >/dev/null 2>&1 && echo "1" || echo "0")
    HAS_HIREDIS := $(shell echo '\#include <hiredis/hiredis.h>' | $(CXX) -E -x c++ - >/dev/null 2>&1 && echo "1" || echo "0")
    HAS_HTTPLIB := $(shell echo '\#include <httplib.h>' | $(CXX) -E -x c++ - >/dev/null 2>&1 && echo "1" || echo "0")
    HAS_SQLITE3 := 1
endif

# MQTT 라이브러리 감지 (Windows에서는 까다로움)
ifeq ($(IS_MINGW_CROSS),1)
    HAS_MQTT_C := $(shell [ -f "$(MINGW_PREFIX)/lib/libpaho-mqtt3c.a" ] && echo "1" || echo "0")
    HAS_MQTT_CPP := $(shell [ -f "$(MINGW_PREFIX)/lib/libpaho-mqttpp3.a" ] && echo "1" || echo "0")
    HAS_MODBUS := $(shell [ -f "$(MINGW_PREFIX)/lib/libmodbus.a" ] && echo "1" || echo "0")
else
    HAS_MQTT_C := $(shell echo "int main(){return 0;}" | $(CXX) -x c++ - -lpaho-mqtt3c >/dev/null 2>&1 && echo "1" || echo "0")
    HAS_MQTT_CPP := $(shell echo "int main(){return 0;}" | $(CXX) -x c++ - -lpaho-mqttpp3 >/dev/null 2>&1 && echo "1" || echo "0")
    HAS_MODBUS := $(shell echo "int main(){return 0;}" | $(CXX) -x c++ - -lmodbus >/dev/null 2>&1 && echo "1" || echo "0")
endif

# QuickJS와 CURL은 Windows에서 설치가 까다로움
HAS_QUICKJS := 0  # Windows에서는 기본적으로 비활성화
HAS_CURL := $(shell echo "int main(){return 0;}" | $(CXX) -x c++ - -lcurl >/dev/null 2>&1 && echo "1" || echo "0")
HAS_BACNET_STACK := 0  # Windows용 BACnet 스택은 별도 설치 필요

# =============================================================================
# Windows 라이브러리 설정
# =============================================================================

# 기본 Windows 시스템 라이브러리 (반드시 필요)
WIN_SYSTEM_LIBS = -lws2_32 -lwsock32 -liphlpapi -lrpcrt4 -luuid -lwinmm \
                  -lkernel32 -luser32 -ladvapi32 -lshell32 -lole32 -loleaut32 \
                  -lcrypt32 -lsecur32 -lbcrypt -lncrypt

# 기본 C++ 라이브러리
BASIC_LIBS = -lpthread -lstdc++ -lm -lgcc

# SQLite3 (Windows에서는 DLL 또는 정적 링크)
ifeq ($(HAS_SQLITE3),1)
    SQLITE_LIBS = -lsqlite3
    CXXFLAGS += -DHAS_SQLITE3=1
else
    SQLITE_LIBS = 
    CXXFLAGS += -DHAS_SQLITE3=0
endif

# JSON 라이브러리
ifeq ($(HAS_NLOHMANN_JSON),1)
    CXXFLAGS += -DHAS_NLOHMANN_JSON=1
else
    CXXFLAGS += -DHAS_NLOHMANN_JSON=0
endif

# Redis 라이브러리
ifeq ($(HAS_HIREDIS),1)
    REDIS_LIBS = -lhiredis
    CXXFLAGS += -DHAS_HIREDIS=1
else
    REDIS_LIBS = 
    CXXFLAGS += -DHAS_HIREDIS=0
endif

# HTTP 라이브러리
ifeq ($(HAS_HTTPLIB),1)
    CXXFLAGS += -DHAVE_HTTPLIB=1
else
    CXXFLAGS += -DHAVE_HTTPLIB=0
endif

# MQTT 라이브러리
ifeq ($(HAS_MQTT_C),1)
    MQTT_LIBS = -lpaho-mqtt3c
    CXXFLAGS += -DHAVE_MQTT=1
else
    MQTT_LIBS = 
    CXXFLAGS += -DHAVE_MQTT=0
endif

ifeq ($(HAS_MQTT_CPP),1)
    MQTT_LIBS += -lpaho-mqttpp3
    CXXFLAGS += -DHAVE_MQTT_CPP=1
else
    CXXFLAGS += -DHAVE_MQTT_CPP=0
endif

# Modbus 라이브러리
ifeq ($(HAS_MODBUS),1)
    MODBUS_LIBS = -lmodbus
    CXXFLAGS += -DHAVE_MODBUS=1
else
    MODBUS_LIBS = 
    CXXFLAGS += -DHAVE_MODBUS=0
endif

# CURL 라이브러리 (Step 7용)
ifeq ($(HAS_CURL),1)
    CURL_LIBS = -lcurl
    CXXFLAGS += -DHAS_CURL=1
else
    CURL_LIBS = 
    CXXFLAGS += -DHAS_CURL=0
endif

# QuickJS (Windows에서는 대부분 비활성화)
ifeq ($(HAS_QUICKJS),1)
    QUICKJS_LIBS = -lquickjs
    CXXFLAGS += -DHAS_QUICKJS=1
else
    QUICKJS_LIBS = 
    CXXFLAGS += -DHAS_QUICKJS=0
endif

# 전체 라이브러리 링크 순서 (Windows에서는 순서가 중요!)
PROTOCOL_LIBS = $(MODBUS_LIBS) $(MQTT_LIBS)
OPTIONAL_LIBS = $(REDIS_LIBS) $(CURL_LIBS) $(QUICKJS_LIBS)
LIBS = $(PROTOCOL_LIBS) $(OPTIONAL_LIBS) $(SQLITE_LIBS) $(WIN_SYSTEM_LIBS) $(BASIC_LIBS)

# 테스트 라이브러리 (Windows용 Google Test)
ifeq ($(IS_MINGW_CROSS),1)
    TEST_LIBS = -lgtest -lgtest_main -pthread
else
    # 네이티브 Windows에서는 gtest 설치 확인
    HAS_GTEST := $(shell echo "int main(){return 0;}" | $(CXX) -x c++ - -lgtest >/dev/null 2>&1 && echo "1" || echo "0")
    ifeq ($(HAS_GTEST),1)
        TEST_LIBS = -lgtest -lgtest_main -pthread
    else
        TEST_LIBS = 
        $(warning ⚠️ Google Test not found - tests will be disabled)
    endif
endif

# =============================================================================
# 소스 파일 수집 (Windows 경로 호환)
# =============================================================================

# Windows에서 find 명령어 대신 wildcard 사용
CORE_SOURCES := $(wildcard $(SRC_DIR)/Core/*.cpp)
UTILS_SOURCES := $(wildcard $(SRC_DIR)/Utils/*.cpp)
CONFIG_SOURCES := $(wildcard $(SRC_DIR)/Config/*.cpp)
DATABASE_SOURCES := $(wildcard $(SRC_DIR)/Database/*.cpp) \
                   $(wildcard $(SRC_DIR)/Database/Entities/*.cpp) \
                   $(wildcard $(SRC_DIR)/Database/Repositories/*.cpp)
CLIENT_SOURCES := $(wildcard $(SRC_DIR)/Client/*.cpp)
WORKERS_SOURCES := $(wildcard $(SRC_DIR)/Workers/Base/*.cpp) \
                  $(wildcard $(SRC_DIR)/Workers/Protocol/*.cpp) \
                  $(wildcard $(SRC_DIR)/Workers/Components/*.cpp) \
                  $(wildcard $(SRC_DIR)/Workers/WorkerFactory.cpp) \
                  $(wildcard $(SRC_DIR)/Workers/WorkerManager.cpp)
STORAGE_SOURCES := $(wildcard $(SRC_DIR)/Storage/*.cpp)

# 조건부 소스 파일 포함
ifeq ($(HAS_HTTPLIB),1)
    NETWORK_SOURCES := $(wildcard $(SRC_DIR)/Network/*.cpp)
    API_SOURCES := $(wildcard $(SRC_DIR)/Api/*.cpp)
else
    NETWORK_SOURCES :=
    API_SOURCES :=
endif

DRIVERS_SOURCES = $(wildcard $(SRC_DIR)/Drivers/Common/*.cpp)
ifeq ($(HAS_MODBUS),1)
    DRIVERS_SOURCES += $(wildcard $(SRC_DIR)/Drivers/Modbus/*.cpp)
endif
ifeq ($(HAS_MQTT_CPP),1)
    DRIVERS_SOURCES += $(wildcard $(SRC_DIR)/Drivers/Mqtt/*.cpp)
endif

PIPELINE_SOURCES := $(wildcard $(SRC_DIR)/Pipeline/*.cpp)
ALARM_SOURCES := $(wildcard $(SRC_DIR)/Alarm/*.cpp)
VIRTUALPOINT_SOURCES := $(wildcard $(SRC_DIR)/VirtualPoint/*.cpp)
PLATFORM_SOURCES := $(wildcard $(SRC_DIR)/Platform/*.cpp)
PLUGIN_SOURCES := $(wildcard $(SRC_DIR)/Plugin/*.cpp)

ALL_SOURCES = $(CORE_SOURCES) $(UTILS_SOURCES) $(CONFIG_SOURCES) \
              $(DATABASE_SOURCES) $(CLIENT_SOURCES) $(WORKERS_SOURCES) \
              $(DRIVERS_SOURCES) $(PIPELINE_SOURCES) $(ALARM_SOURCES) \
              $(VIRTUALPOINT_SOURCES) $(NETWORK_SOURCES) $(API_SOURCES) \
              $(PLATFORM_SOURCES) $(PLUGIN_SOURCES) $(STORAGE_SOURCES)

ALL_OBJECTS = $(patsubst $(SRC_DIR)/%.cpp,$(OBJ_DIR)/%.o,$(ALL_SOURCES))

# 테스트 오브젝트 파일들
TEST_OBJECTS = $(OBJ_DIR)/test_step1_config_connection_win.o \
               $(OBJ_DIR)/test_step2_database_entity.o \
               $(OBJ_DIR)/test_step3_protocol_worker.o \
               $(OBJ_DIR)/test_step4_driver_data_validation.o \
               $(OBJ_DIR)/test_step5_complete_db_integration_validation.o \
               $(OBJ_DIR)/test_step6_rest_api_worker_reload.o \
               $(OBJ_DIR)/test_step6_enhanced_pipeline.o \
               $(OBJ_DIR)/test_step7_rest_api_backend_complete.o \
               $(OBJ_DIR)/test_network_api.o \
               $(OBJ_DIR)/test_platform_compat.o \
               $(OBJ_DIR)/test_workermanager.o

# =============================================================================
# 색상 정의 (Windows CMD 호환)
# =============================================================================

# Windows에서는 ANSI 색상 지원이 제한적이므로 조건부 사용
ifeq ($(IS_WINDOWS_NATIVE),1)
    # 네이티브 Windows CMD에서는 색상 비활성화
    GREEN := 
    BLUE := 
    YELLOW := 
    RED := 
    PURPLE := 
    CYAN := 
    MAGENTA := 
    NC := 
else
    # MSYS2/크로스 컴파일에서는 색상 사용
    GREEN := \033[0;32m
    BLUE := \033[0;34m
    YELLOW := \033[1;33m
    RED := \033[0;31m
    PURPLE := \033[0;35m
    CYAN := \033[0;36m
    MAGENTA := \033[0;95m
    NC := \033[0m
endif

# =============================================================================
# 로그 유틸리티 (Windows 경로 호환)
# =============================================================================

TIMESTAMP := $(shell powershell -Command "Get-Date -Format 'yyyyMMdd_HHmmss'" 2>nul || date '+%Y%m%d_%H%M%S')

create-log-dir:
ifeq ($(IS_WINDOWS_NATIVE),1)
	@if not exist "$(LOG_DIR)" mkdir "$(LOG_DIR)"
else
	@mkdir -p $(LOG_DIR)
endif

define get_log_filename
$(LOG_DIR)/$(1)_test_$(TIMESTAMP).log
endef

# =============================================================================
# 디렉토리 생성 규칙 (Windows 호환)
# =============================================================================

.DEFAULT_GOAL := help

.PHONY: create-dirs
create-dirs: create-log-dir
	@echo "Creating directories for $(PLATFORM)..."
ifeq ($(IS_WINDOWS_NATIVE),1)
	@if not exist "$(OBJ_DIR)" mkdir "$(OBJ_DIR)"
	@if not exist "$(BIN_DIR)" mkdir "$(BIN_DIR)"
	@if not exist "$(DATA_DIR)" mkdir "$(DATA_DIR)"
	@if not exist "$(OBJ_DIR)\Core" mkdir "$(OBJ_DIR)\Core"
	@if not exist "$(OBJ_DIR)\Utils" mkdir "$(OBJ_DIR)\Utils"
	@if not exist "$(OBJ_DIR)\Config" mkdir "$(OBJ_DIR)\Config"
	@if not exist "$(OBJ_DIR)\Database" mkdir "$(OBJ_DIR)\Database"
	@if not exist "$(OBJ_DIR)\Database\Entities" mkdir "$(OBJ_DIR)\Database\Entities"
	@if not exist "$(OBJ_DIR)\Database\Repositories" mkdir "$(OBJ_DIR)\Database\Repositories"
	@if not exist "$(OBJ_DIR)\Client" mkdir "$(OBJ_DIR)\Client"
	@if not exist "$(OBJ_DIR)\Workers" mkdir "$(OBJ_DIR)\Workers"
	@if not exist "$(OBJ_DIR)\Workers\Base" mkdir "$(OBJ_DIR)\Workers\Base"
	@if not exist "$(OBJ_DIR)\Workers\Protocol" mkdir "$(OBJ_DIR)\Workers\Protocol"
	@if not exist "$(OBJ_DIR)\Workers\Components" mkdir "$(OBJ_DIR)\Workers\Components"
	@if not exist "$(OBJ_DIR)\Drivers" mkdir "$(OBJ_DIR)\Drivers"
	@if not exist "$(OBJ_DIR)\Drivers\Common" mkdir "$(OBJ_DIR)\Drivers\Common"
	@if not exist "$(OBJ_DIR)\Drivers\Modbus" mkdir "$(OBJ_DIR)\Drivers\Modbus"
	@if not exist "$(OBJ_DIR)\Drivers\Mqtt" mkdir "$(OBJ_DIR)\Drivers\Mqtt"
	@if not exist "$(OBJ_DIR)\Pipeline" mkdir "$(OBJ_DIR)\Pipeline"
	@if not exist "$(OBJ_DIR)\Alarm" mkdir "$(OBJ_DIR)\Alarm"
	@if not exist "$(OBJ_DIR)\VirtualPoint" mkdir "$(OBJ_DIR)\VirtualPoint"
	@if not exist "$(OBJ_DIR)\Plugin" mkdir "$(OBJ_DIR)\Plugin"
	@if not exist "$(OBJ_DIR)\Network" mkdir "$(OBJ_DIR)\Network"
	@if not exist "$(OBJ_DIR)\Api" mkdir "$(OBJ_DIR)\Api"
	@if not exist "$(OBJ_DIR)\Platform" mkdir "$(OBJ_DIR)\Platform"
	@if not exist "$(OBJ_DIR)\Storage" mkdir "$(OBJ_DIR)\Storage"
else
	@mkdir -p $(OBJ_DIR) $(BIN_DIR) $(DATA_DIR) $(LOG_DIR)
	@mkdir -p $(OBJ_DIR)/Core $(OBJ_DIR)/Utils $(OBJ_DIR)/Config 
	@mkdir -p $(OBJ_DIR)/Database $(OBJ_DIR)/Database/Entities $(OBJ_DIR)/Database/Repositories
	@mkdir -p $(OBJ_DIR)/Client $(OBJ_DIR)/Workers $(OBJ_DIR)/Workers/Base $(OBJ_DIR)/Workers/Protocol $(OBJ_DIR)/Workers/Components
	@mkdir -p $(OBJ_DIR)/Drivers $(OBJ_DIR)/Drivers/Common $(OBJ_DIR)/Drivers/Modbus $(OBJ_DIR)/Drivers/Mqtt
	@mkdir -p $(OBJ_DIR)/Pipeline $(OBJ_DIR)/Alarm $(OBJ_DIR)/VirtualPoint $(OBJ_DIR)/Plugin
	@mkdir -p $(OBJ_DIR)/Network $(OBJ_DIR)/Api $(OBJ_DIR)/Platform $(OBJ_DIR)/Storage
endif
	@echo "All directories created for $(PLATFORM)"

# =============================================================================
# 컴파일 규칙 (Windows 호환)
# =============================================================================

# 기본 소스 파일 컴파일
ifeq ($(IS_WINDOWS_NATIVE),1)
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	@if not exist "$(dir $@)" mkdir "$(dir $@)"
	@echo Compiling $< [$(PLATFORM)]...
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@
else
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	@mkdir -p $(dir $@)
	@echo $(YELLOW)Compiling $< [$(PLATFORM)]...$(NC)
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@
endif

# 테스트 파일 컴파일 규칙들
$(OBJ_DIR)/test_step1_config_connection_win.o: test_step1_config_connection_win.cpp
	@echo $(CYAN)Compiling Step 1 Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

$(OBJ_DIR)/test_step2_database_entity.o: test_step2_database_entity.cpp
	@echo $(CYAN)Compiling Step 2 Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

$(OBJ_DIR)/test_step3_protocol_worker.o: test_step3_protocol_worker.cpp
	@echo $(CYAN)Compiling Step 3 Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

$(OBJ_DIR)/test_step4_driver_data_validation.o: test_step4_driver_data_validation.cpp
	@echo $(CYAN)Compiling Step 4 Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

$(OBJ_DIR)/test_step5_complete_db_integration_validation.o: test_step5_complete_db_integration_validation.cpp
	@echo $(CYAN)Compiling Step 5 Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

$(OBJ_DIR)/test_step6_rest_api_worker_reload.o: test_step6_rest_api_worker_reload.cpp
	@echo $(CYAN)Compiling Step 6 RestAPI Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

$(OBJ_DIR)/test_step6_enhanced_pipeline.o: test_step6_enhanced_pipeline.cpp
	@echo $(CYAN)Compiling Step 6 Pipeline Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

$(OBJ_DIR)/test_step7_rest_api_backend_complete.o: test_step7_rest_api_backend_complete.cpp
	@echo $(CYAN)Compiling Step 7 Complete Test [$(PLATFORM)]...$(NC)
ifeq ($(HAS_CURL),1)
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@
else
	@echo $(RED)Skipping Step 7 - libcurl not available$(NC)
	@echo > $@  # 빈 파일 생성
endif

$(OBJ_DIR)/test_network_api.o: test_network_api.cpp
	@echo $(CYAN)Compiling Network Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

$(OBJ_DIR)/test_platform_compat.o: test_platform_compat.cpp
	@echo $(CYAN)Compiling Platform Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

$(OBJ_DIR)/test_workermanager.o: test_workermanager.cpp
	@echo $(CYAN)Compiling WorkerManager Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

# =============================================================================
# 테스트 실행 파일 빌드 (Windows 호환)
# =============================================================================

$(BIN_DIR)/test_step1$(EXE_SUFFIX): $(ALL_OBJECTS) $(OBJ_DIR)/test_step1_config_connection_win.o
	@echo $(PURPLE)Linking Step 1 Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(LDFLAGS) $(ALL_OBJECTS) $(OBJ_DIR)/test_step1_config_connection_win.o $(TEST_LIBS) $(LIBS) -o $@
	@echo $(GREEN)Step 1 Test build completed!$(NC)

$(BIN_DIR)/test_step2$(EXE_SUFFIX): $(ALL_OBJECTS) $(OBJ_DIR)/test_step2_database_entity.o
	@echo $(PURPLE)Linking Step 2 Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(LDFLAGS) $(ALL_OBJECTS) $(OBJ_DIR)/test_step2_database_entity.o $(TEST_LIBS) $(LIBS) -o $@
	@echo $(GREEN)Step 2 Test build completed!$(NC)

$(BIN_DIR)/test_step3$(EXE_SUFFIX): $(ALL_OBJECTS) $(OBJ_DIR)/test_step3_protocol_worker.o
	@echo $(PURPLE)Linking Step 3 Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(LDFLAGS) $(ALL_OBJECTS) $(OBJ_DIR)/test_step3_protocol_worker.o $(TEST_LIBS) $(LIBS) -o $@
	@echo $(GREEN)Step 3 Test build completed!$(NC)

$(BIN_DIR)/test_step4$(EXE_SUFFIX): $(ALL_OBJECTS) $(OBJ_DIR)/test_step4_driver_data_validation.o
	@echo $(PURPLE)Linking Step 4 Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(LDFLAGS) $(ALL_OBJECTS) $(OBJ_DIR)/test_step4_driver_data_validation.o $(TEST_LIBS) $(LIBS) -o $@
	@echo $(GREEN)Step 4 Test build completed!$(NC)

$(BIN_DIR)/test_step5$(EXE_SUFFIX): $(ALL_OBJECTS) $(OBJ_DIR)/test_step5_complete_db_integration_validation.o
	@echo $(PURPLE)Linking Step 5 Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(LDFLAGS) $(ALL_OBJECTS) $(OBJ_DIR)/test_step5_complete_db_integration_validation.o $(TEST_LIBS) $(LIBS) -o $@
	@echo $(GREEN)Step 5 Test build completed!$(NC)

$(BIN_DIR)/test_step6$(EXE_SUFFIX): $(ALL_OBJECTS) $(OBJ_DIR)/test_step6_rest_api_worker_reload.o
	@echo $(PURPLE)Linking Step 6 RestAPI Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(LDFLAGS) $(ALL_OBJECTS) $(OBJ_DIR)/test_step6_rest_api_worker_reload.o $(TEST_LIBS) $(LIBS) -o $@
	@echo $(GREEN)Step 6 RestAPI Test build completed!$(NC)

$(BIN_DIR)/test_step6_pipeline$(EXE_SUFFIX): $(ALL_OBJECTS) $(OBJ_DIR)/test_step6_enhanced_pipeline.o
	@echo $(PURPLE)Linking Step 6 Pipeline Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(LDFLAGS) $(ALL_OBJECTS) $(OBJ_DIR)/test_step6_enhanced_pipeline.o $(TEST_LIBS) $(LIBS) -o $@
	@echo $(GREEN)Step 6 Pipeline Test build completed!$(NC)

$(BIN_DIR)/test_step7$(EXE_SUFFIX): $(ALL_OBJECTS) $(OBJ_DIR)/test_step7_rest_api_backend_complete.o
ifeq ($(HAS_CURL),1)
	@echo $(PURPLE)Linking Step 7 Complete Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(LDFLAGS) $(ALL_OBJECTS) $(OBJ_DIR)/test_step7_rest_api_backend_complete.o $(TEST_LIBS) $(LIBS) -o $@
	@echo $(GREEN)Step 7 Complete Test build completed!$(NC)
else
	@echo $(YELLOW)Step 7 Test skipped - libcurl not available$(NC)
	@echo @echo Step 7 test requires libcurl > $@
endif

$(BIN_DIR)/test_network$(EXE_SUFFIX): $(ALL_OBJECTS) $(OBJ_DIR)/test_network_api.o
	@echo $(PURPLE)Linking Network Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(LDFLAGS) $(ALL_OBJECTS) $(OBJ_DIR)/test_network_api.o $(TEST_LIBS) $(LIBS) -o $@
	@echo $(GREEN)Network Test build completed!$(NC)

$(BIN_DIR)/test_platform$(EXE_SUFFIX): $(ALL_OBJECTS) $(OBJ_DIR)/test_platform_compat.o
	@echo $(PURPLE)Linking Platform Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(LDFLAGS) $(ALL_OBJECTS) $(OBJ_DIR)/test_platform_compat.o $(TEST_LIBS) $(LIBS) -o $@
	@echo $(GREEN)Platform Test build completed!$(NC)

$(BIN_DIR)/test_workermanager$(EXE_SUFFIX): $(ALL_OBJECTS) $(OBJ_DIR)/test_workermanager.o
	@echo $(PURPLE)Linking WorkerManager Test [$(PLATFORM)]...$(NC)
	@$(CXX) $(LDFLAGS) $(ALL_OBJECTS) $(OBJ_DIR)/test_workermanager.o $(TEST_LIBS) $(LIBS) -o $@
	@echo $(GREEN)WorkerManager Test build completed!$(NC)

# =============================================================================
# 테스트 실행 (Windows 호환)
# =============================================================================

step1-build: create-dirs $(BIN_DIR)/test_step1$(EXE_SUFFIX)

step1-test: step1-build create-log-dir
	$(eval LOG_FILE := $(call get_log_filename,step1))
	@echo $(MAGENTA)Running Step 1 Test [$(PLATFORM)]...$(NC)
	@echo $(CYAN)Configuration and Connection Test$(NC)
ifeq ($(IS_WINDOWS_NATIVE),1)
	@$(BIN_DIR)\test_step1$(EXE_SUFFIX) > $(LOG_FILE) 2>&1 && type $(LOG_FILE) || type $(LOG_FILE)
else
	@./$(BIN_DIR)/test_step1$(EXE_SUFFIX) 2>&1 | tee $(LOG_FILE)
endif
	@echo $(GREEN)Step 1 Test completed. Log saved: $(LOG_FILE)$(NC)

step2-build: create-dirs $(BIN_DIR)/test_step2$(EXE_SUFFIX)

step2-test: step2-build create-log-dir
	$(eval LOG_FILE := $(call get_log_filename,step2))
	@echo $(MAGENTA)Running Step 2 Test [$(PLATFORM)]...$(NC)
	@echo $(CYAN)Database Entity Validation Test$(NC)
ifeq ($(IS_WINDOWS_NATIVE),1)
	@$(BIN_DIR)\test_step2$(EXE_SUFFIX) > $(LOG_FILE) 2>&1 && type $(LOG_FILE) || type $(LOG_FILE)
else
	@./$(BIN_DIR)/test_step2$(EXE_SUFFIX) 2>&1 | tee $(LOG_FILE)
endif
	@echo $(GREEN)Step 2 Test completed. Log saved: $(LOG_FILE)$(NC)

step3-build: create-dirs $(BIN_DIR)/test_step3$(EXE_SUFFIX)

step3-test: step3-build create-log-dir
	$(eval LOG_FILE := $(call get_log_filename,step3))
	@echo $(MAGENTA)Running Step 3 Test [$(PLATFORM)]...$(NC)
	@echo $(CYAN)Protocol Worker Property Validation Test$(NC)
ifeq ($(IS_WINDOWS_NATIVE),1)
	@$(BIN_DIR)\test_step3$(EXE_SUFFIX) > $(LOG_FILE) 2>&1 && type $(LOG_FILE) || type $(LOG_FILE)
else
	@./$(BIN_DIR)/test_step3$(EXE_SUFFIX) 2>&1 | tee $(LOG_FILE)
endif
	@echo $(GREEN)Step 3 Test completed. Log saved: $(LOG_FILE)$(NC)

step4-build: create-dirs $(BIN_DIR)/test_step4$(EXE_SUFFIX)

step4-test: step4-build create-log-dir
	$(eval LOG_FILE := $(call get_log_filename,step4))
	@echo $(MAGENTA)Running Step 4 Test [$(PLATFORM)]...$(NC)
	@echo $(CYAN)Driver Data Validation Test$(NC)
ifeq ($(IS_WINDOWS_NATIVE),1)
	@$(BIN_DIR)\test_step4$(EXE_SUFFIX) > $(LOG_FILE) 2>&1 && type $(LOG_FILE) || type $(LOG_FILE)
else
	@./$(BIN_DIR)/test_step4$(EXE_SUFFIX) 2>&1 | tee $(LOG_FILE)
endif
	@echo $(GREEN)Step 4 Test completed. Log saved: $(LOG_FILE)$(NC)

step5-build: create-dirs $(BIN_DIR)/test_step5$(EXE_SUFFIX)

step5-test: step5-build create-log-dir
	$(eval LOG_FILE := $(call get_log_filename,step5))
	@echo $(MAGENTA)Running Step 5 Test [$(PLATFORM)]...$(NC)
	@echo $(CYAN)Complete DB Integration Validation Test$(NC)
ifeq ($(IS_WINDOWS_NATIVE),1)
	@$(BIN_DIR)\test_step5$(EXE_SUFFIX) > $(LOG_FILE) 2>&1 && type $(LOG_FILE) || type $(LOG_FILE)
else
	@./$(BIN_DIR)/test_step5$(EXE_SUFFIX) 2>&1 | tee $(LOG_FILE)
endif
	@echo $(GREEN)Step 5 Test completed. Log saved: $(LOG_FILE)$(NC)

step6-build: create-dirs $(BIN_DIR)/test_step6$(EXE_SUFFIX)

step6-test: step6-build create-log-dir
	$(eval LOG_FILE := $(call get_log_filename,step6))
	@echo $(MAGENTA)Running Step 6 Test [$(PLATFORM)]...$(NC)
	@echo $(CYAN)RestAPI Worker Manager Integration Test$(NC)
ifeq ($(IS_WINDOWS_NATIVE),1)
	@$(BIN_DIR)\test_step6$(EXE_SUFFIX) > $(LOG_FILE) 2>&1 && type $(LOG_FILE) || type $(LOG_FILE)
else
	@./$(BIN_DIR)/test_step6$(EXE_SUFFIX) 2>&1 | tee $(LOG_FILE)
endif
	@echo $(GREEN)Step 6 Test completed. Log saved: $(LOG_FILE)$(NC)

step7-build: create-dirs $(BIN_DIR)/test_step7$(EXE_SUFFIX)

step7-test: step7-build create-log-dir
	$(eval LOG_FILE := $(call get_log_filename,step7))
	@echo $(MAGENTA)Running Step 7 Test [$(PLATFORM)]...$(NC)
	@echo $(CYAN)Complete REST API Backend Integration Test$(NC)
ifeq ($(HAS_CURL),1)
ifeq ($(IS_WINDOWS_NATIVE),1)
	@$(BIN_DIR)\test_step7$(EXE_SUFFIX) > $(LOG_FILE) 2>&1 && type $(LOG_FILE) || type $(LOG_FILE)
else
	@./$(BIN_DIR)/test_step7$(EXE_SUFFIX) 2>&1 | tee $(LOG_FILE)
endif
	@echo $(GREEN)Step 7 Test completed. Log saved: $(LOG_FILE)$(NC)
else
	@echo $(YELLOW)Step 7 requires libcurl - install curl development libraries$(NC)
endif

# 추가 테스트들
network-build: create-dirs $(BIN_DIR)/test_network$(EXE_SUFFIX)

network-test: network-build create-log-dir
	$(eval LOG_FILE := $(call get_log_filename,network))
	@echo $(MAGENTA)Running Network Test [$(PLATFORM)]...$(NC)
ifeq ($(IS_WINDOWS_NATIVE),1)
	@$(BIN_DIR)\test_network$(EXE_SUFFIX) > $(LOG_FILE) 2>&1 && type $(LOG_FILE) || type $(LOG_FILE)
else
	@./$(BIN_DIR)/test_network$(EXE_SUFFIX) 2>&1 | tee $(LOG_FILE)
endif
	@echo $(GREEN)Network Test completed. Log saved: $(LOG_FILE)$(NC)

platform-build: create-dirs $(BIN_DIR)/test_platform$(EXE_SUFFIX)

platform-test: platform-build create-log-dir
	$(eval LOG_FILE := $(call get_log_filename,platform))
	@echo $(MAGENTA)Running Platform Test [$(PLATFORM)]...$(NC)
ifeq ($(IS_WINDOWS_NATIVE),1)
	@$(BIN_DIR)\test_platform$(EXE_SUFFIX) > $(LOG_FILE) 2>&1 && type $(LOG_FILE) || type $(LOG_FILE)
else
	@./$(BIN_DIR)/test_platform$(EXE_SUFFIX) 2>&1 | tee $(LOG_FILE)
endif
	@echo $(GREEN)Platform Test completed. Log saved: $(LOG_FILE)$(NC)

workermanager-build: create-dirs $(BIN_DIR)/test_workermanager$(EXE_SUFFIX)

workermanager-test: workermanager-build create-log-dir
	$(eval LOG_FILE := $(call get_log_filename,workermanager))
	@echo $(MAGENTA)Running WorkerManager Test [$(PLATFORM)]...$(NC)
ifeq ($(IS_WINDOWS_NATIVE),1)
	@$(BIN_DIR)\test_workermanager$(EXE_SUFFIX) > $(LOG_FILE) 2>&1 && type $(LOG_FILE) || type $(LOG_FILE)
else
	@./$(BIN_DIR)/test_workermanager$(EXE_SUFFIX) 2>&1 | tee $(LOG_FILE)
endif
	@echo $(GREEN)WorkerManager Test completed. Log saved: $(LOG_FILE)$(NC)

# =============================================================================
# 통합 실행 (Windows 호환)
# =============================================================================

all-tests-build: create-dirs $(BIN_DIR)/test_step1$(EXE_SUFFIX) $(BIN_DIR)/test_step2$(EXE_SUFFIX) $(BIN_DIR)/test_step3$(EXE_SUFFIX) $(BIN_DIR)/test_step4$(EXE_SUFFIX) $(BIN_DIR)/test_step5$(EXE_SUFFIX) $(BIN_DIR)/test_step6$(EXE_SUFFIX) $(BIN_DIR)/test_step7$(EXE_SUFFIX) $(BIN_DIR)/test_network$(EXE_SUFFIX) $(BIN_DIR)/test_platform$(EXE_SUFFIX) $(BIN_DIR)/test_workermanager$(EXE_SUFFIX)
	@echo $(GREEN)All tests build completed for $(PLATFORM)!$(NC)

all-tests-run: all-tests-build create-log-dir
	@echo $(BLUE)Running all tests for $(PLATFORM)...$(NC)
	@$(MAKE) step1-test step2-test step3-test step4-test step5-test step6-test step7-test network-test platform-test workermanager-test
	@echo $(GREEN)All tests completed for $(PLATFORM)!$(NC)

quick-test: workermanager-test platform-test step7-test
	@echo $(GREEN)Quick test completed for $(PLATFORM)$(NC)

restapi-test: step6-test step7-test network-test
	@echo $(GREEN)RestAPI integration tests completed for $(PLATFORM)$(NC)

# =============================================================================
# 유틸리티 (Windows 호환)
# =============================================================================

clean:
	@echo Cleaning $(PLATFORM) build files...
ifeq ($(IS_WINDOWS_NATIVE),1)
	@if exist "$(OBJ_DIR)" $(RMDIR_CMD) "$(OBJ_DIR)"
	@if exist "$(BIN_DIR)" $(RMDIR_CMD) "$(BIN_DIR)"
else
	@$(RMDIR_CMD) $(OBJ_DIR) $(BIN_DIR)
endif
	@echo Clean completed for $(PLATFORM)

status:
	@echo "Build Status for $(PLATFORM)"
	@echo "================================================"
	@echo "Platform: $(PLATFORM)"
	@echo "Native Windows: $(IS_WINDOWS_NATIVE)"
	@echo "MinGW Cross: $(IS_MINGW_CROSS)"
	@echo "Compiler: $(CXX)"
	@echo ""
	@echo "Library Support:"
	@echo "SQLite3: $(if $(filter 1,$(HAS_SQLITE3)),Available,Missing)"
	@echo "JSON (nlohmann): $(if $(filter 1,$(HAS_NLOHMANN_JSON)),Available,Missing)"
	@echo "Redis (hiredis): $(if $(filter 1,$(HAS_HIREDIS)),Available,Missing)"
	@echo "HTTP (httplib): $(if $(filter 1,$(HAS_HTTPLIB)),Available,Missing)"
	@echo "MQTT C: $(if $(filter 1,$(HAS_MQTT_C)),Available,Missing)"
	@echo "MQTT C++: $(if $(filter 1,$(HAS_MQTT_CPP)),Available,Missing)"
	@echo "Modbus: $(if $(filter 1,$(HAS_MODBUS)),Available,Missing)"
	@echo "CURL: $(if $(filter 1,$(HAS_CURL)),Available,Missing)"
	@echo "QuickJS: $(if $(filter 1,$(HAS_QUICKJS)),Available,Missing)"
	@echo ""
	@echo "Binary Status:"
	@echo "Step 1: $(if $(wildcard $(BIN_DIR)/test_step1$(EXE_SUFFIX)),Exists,Missing)"
	@echo "Step 2: $(if $(wildcard $(BIN_DIR)/test_step2$(EXE_SUFFIX)),Exists,Missing)"
	@echo "Step 3: $(if $(wildcard $(BIN_DIR)/test_step3$(EXE_SUFFIX)),Exists,Missing)"
	@echo "Step 4: $(if $(wildcard $(BIN_DIR)/test_step4$(EXE_SUFFIX)),Exists,Missing)"
	@echo "Step 5: $(if $(wildcard $(BIN_DIR)/test_step5$(EXE_SUFFIX)),Exists,Missing)"
	@echo "Step 6: $(if $(wildcard $(BIN_DIR)/test_step6$(EXE_SUFFIX)),Exists,Missing)"
	@echo "Step 7: $(if $(wildcard $(BIN_DIR)/test_step7$(EXE_SUFFIX)),Exists,Missing)"
	@echo "Network: $(if $(wildcard $(BIN_DIR)/test_network$(EXE_SUFFIX)),Exists,Missing)"
	@echo "Platform: $(if $(wildcard $(BIN_DIR)/test_platform$(EXE_SUFFIX)),Exists,Missing)"
	@echo "WorkerManager: $(if $(wildcard $(BIN_DIR)/test_workermanager$(EXE_SUFFIX)),Exists,Missing)"

help:
	@echo $(BLUE)PulseOne Windows Test System$(NC)
	@echo ====================================
	@echo
	@echo $(MAGENTA)Platform Support:$(NC)
	@echo Current platform: $(PLATFORM)
	@echo Native Windows: $(IS_WINDOWS_NATIVE)
	@echo MinGW Cross-compile: $(IS_MINGW_CROSS)
	@echo
	@echo $(GREEN)Step-by-Step Test Commands:$(NC)
	@echo make step1-test   - Step 1: Configuration and connection test
	@echo make step2-test   - Step 2: Database entity validation test
	@echo make step3-test   - Step 3: Protocol worker property validation test
	@echo make step4-test   - Step 4: Driver data validation test
	@echo make step5-test   - Step 5: Complete DB integration validation test
	@echo make step6-test   - Step 6: RestAPI WorkerManager integration test
	@echo make step7-test   - Step 7: Complete REST API Backend integration
	@echo make network-test - Network: REST API server test
	@echo make platform-test - Platform: Cross-platform compatibility test
	@echo make workermanager-test - WorkerManager: Singleton and lifecycle test
	@echo
	@echo $(GREEN)Build Commands:$(NC)
	@echo make step1-build, step2-build, ..., step7-build
	@echo make all-tests-build - Build all tests
	@echo
	@echo $(GREEN)Integrated Execution:$(NC)
	@echo make all-tests-run - Run all tests with logging
	@echo make quick-test    - Run core tests (WorkerManager + Platform + Step7)
	@echo make restapi-test  - Run RestAPI related tests
	@echo
	@echo $(GREEN)Utility Commands:$(NC)
	@echo make status       - Check build status and library availability
	@echo make clean        - Clean build files
	@echo make create-dirs  - Create all required directories
	@echo
	@echo $(CYAN)Windows Dependencies:$(NC)
	@echo For native Windows: Install MSYS2 or Visual Studio with C++ tools
	@echo For cross-compile: Install mingw-w64 on Linux
	@echo Required libs: sqlite3, nlohmann-json, hiredis, httplib
	@echo Optional: libcurl (for Step 7), libmodbus, paho-mqtt
	@echo
	@echo $(YELLOW)Recommended Test Sequence:$(NC)
	@echo 1. make platform-test  - Check platform compatibility
	@echo 2. make step7-test     - Most comprehensive test
	@echo 3. make all-tests-run  - Complete system validation

.PHONY: create-log-dir create-dirs \
        step1-test step2-test step3-test step4-test step5-test step6-test step7-test \
        network-test platform-test workermanager-test quick-test all-tests-run restapi-test \
        clean help status