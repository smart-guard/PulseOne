# collector/Makefile (간단한 버전)
# PulseOne Collector 빌드 시스템 - 복잡성 최소화

# =============================================================================
# 기본 설정
# =============================================================================

# 컴파일러 및 플래그
CXX = g++
CXXFLAGS = -std=c++17 -Wall -Wextra -O2
DEBUG_FLAGS = -g -DDEBUG -O0
INCLUDE_FLAGS = -Iinclude

# 디렉토리
SRC_DIR = src
INCLUDE_DIR = include
BUILD_DIR = build
TARGET = pulseone_collector

# 색상 코드 (출력 미화용)
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[0;33m
BLUE = \033[0;34m
PURPLE = \033[0;35m
CYAN = \033[0;36m
NC = \033[0m

# =============================================================================
# 소스 파일 정의 (필수만)
# =============================================================================

# 핵심 소스 파일들
CORE_SOURCES = \
    $(SRC_DIR)/main.cpp \
    $(SRC_DIR)/Core/CollectorApplication.cpp

# 기존 동작하는 소스들
EXISTING_SOURCES = \
    $(SRC_DIR)/Config/ConfigManager.cpp \
    $(SRC_DIR)/Utils/LogManager.cpp

# TODO: 나중에 추가할 소스들 (주석 처리)
# FUTURE_SOURCES = \
#     $(SRC_DIR)/Database/DatabaseManager.cpp \
#     $(SRC_DIR)/Drivers/ProtocolDriver.cpp

# 전체 소스 파일 (현재 빌드할 것들만)
ALL_SOURCES = $(CORE_SOURCES) $(EXISTING_SOURCES)

# 오브젝트 파일들
ALL_OBJECTS = $(ALL_SOURCES:.cpp=.o)

# =============================================================================
# 라이브러리 설정 (최소한만)
# =============================================================================

# 필수 시스템 라이브러리
SYSTEM_LIBS = -lpthread

# TODO: 나중에 추가할 라이브러리들 (주석 처리)
# OPTIONAL_LIBS = -lpq -lredis -ljson

# 현재 사용할 라이브러리
ALL_LIBS = $(SYSTEM_LIBS)

# =============================================================================
# 메인 타겟들
# =============================================================================

.PHONY: all debug clean help status quick

# 기본 타겟
all: status $(TARGET) post-build

# 디버그 빌드
debug: CXXFLAGS += $(DEBUG_FLAGS)
debug: $(TARGET)

# 빠른 빌드 (기존 오브젝트 파일 재사용)
quick: $(TARGET)

# =============================================================================
# 빌드 규칙들
# =============================================================================

# 메인 실행 파일
$(TARGET): $(ALL_OBJECTS)
	@echo -e "$(BLUE)🔗 Linking $(TARGET)...$(NC)"
	@echo -e "$(CYAN)   Using $(words $(ALL_OBJECTS)) object files$(NC)"
	$(CXX) $(CXXFLAGS) -o $@ $^ $(ALL_LIBS)
	@echo -e "$(GREEN)✅ Build successful: $(TARGET)$(NC)"

# C++ 소스 파일 컴파일
%.o: %.cpp
	@echo -e "$(YELLOW)🔨 Compiling: $<$(NC)"
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) $(INCLUDE_FLAGS) -c $< -o $@

# =============================================================================
# 유틸리티 타겟들
# =============================================================================

# 빌드 전 상태 확인
status:
	@echo -e "$(CYAN)🏗️ PulseOne Collector Build Status$(NC)"
	@echo -e "$(BLUE)━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━$(NC)"
	@echo -e "$(YELLOW)📁 Source files to compile:$(NC)"
	@for src in $(ALL_SOURCES); do \
		if [ -f "$$src" ]; then \
			echo -e "   $(GREEN)✅ $$src$(NC)"; \
		else \
			echo -e "   $(RED)❌ $$src (missing)$(NC)"; \
		fi \
	done
	@echo -e "$(YELLOW)📚 Include directories:$(NC)"
	@echo -e "   $(GREEN)✅ $(INCLUDE_DIR)$(NC)"
	@echo -e "$(YELLOW)🔗 Libraries:$(NC)"
	@echo -e "   $(GREEN)✅ $(ALL_LIBS)$(NC)"
	@echo -e "$(BLUE)━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━$(NC)"

# 빌드 후 처리
post-build:
	@echo -e "$(BLUE)📋 Post-build processing...$(NC)"
	@if [ -f "$(TARGET)" ]; then \
		chmod +x $(TARGET); \
		file_size=$$(ls -lh $(TARGET) | awk '{print $$5}'); \
		echo -e "$(GREEN)✅ Executable ready: $(TARGET) ($$file_size)$(NC)"; \
		echo -e "$(CYAN)🚀 Run with: ./$(TARGET)$(NC)"; \
		echo -e "$(CYAN)🔍 Debug with: ./$(TARGET) --verbose$(NC)"; \
	fi

# 필요한 디렉토리 생성
directories:
	@mkdir -p $(BUILD_DIR)
	@mkdir -p include/Core
	@mkdir -p src/Core

# 정리
clean:
	@echo -e "$(YELLOW)🧹 Cleaning build artifacts...$(NC)"
	@rm -f $(ALL_OBJECTS)
	@rm -f $(TARGET)
	@rm -f *.log
	@echo -e "$(GREEN)✅ Clean completed$(NC)"

# 도움말
help:
	@echo -e "$(CYAN)📖 PulseOne Collector Build System$(NC)"
	@echo -e "$(BLUE)━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━$(NC)"
	@echo -e "$(YELLOW)Available targets:$(NC)"
	@echo -e "  $(GREEN)all$(NC)       - 전체 빌드 (기본)"
	@echo -e "  $(GREEN)debug$(NC)     - 디버그 빌드"
	@echo -e "  $(GREEN)quick$(NC)     - 빠른 빌드 (증분 컴파일)"
	@echo -e "  $(GREEN)clean$(NC)     - 빌드 파일 정리"
	@echo -e "  $(GREEN)status$(NC)    - 빌드 상태 확인"
	@echo -e "  $(GREEN)help$(NC)      - 이 도움말"
	@echo -e ""
	@echo -e "$(YELLOW)Usage examples:$(NC)"
	@echo -e "  make              # 기본 빌드"
	@echo -e "  make debug        # 디버그 빌드"
	@echo -e "  make clean all    # 클린 빌드"
	@echo -e "$(BLUE)━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━$(NC)"

# =============================================================================
# 개발용 타겟들
# =============================================================================

# 빠른 테스트 (컴파일만)
test-compile:
	@echo -e "$(CYAN)🧪 Testing compilation only...$(NC)"
	@for src in $(ALL_SOURCES); do \
		echo -e "$(YELLOW)Testing: $$src$(NC)"; \
		$(CXX) $(CXXFLAGS) $(INCLUDE_FLAGS) -c $$src -o /tmp/test.o || exit 1; \
	done
	@rm -f /tmp/test.o
	@echo -e "$(GREEN)✅ All source files compile successfully$(NC)"

# 실행 (빌드 후)
run: $(TARGET)
	@echo -e "$(CYAN)🚀 Running $(TARGET)...$(NC)"
	@echo -e "$(YELLOW)Press Ctrl+C to stop$(NC)"
	@echo -e "$(BLUE)━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━$(NC)"
	./$(TARGET)

# =============================================================================
# 헤더 의존성 (자동 생성하지 않고 수동 관리)
# =============================================================================

# 주요 헤더 파일 의존성
$(SRC_DIR)/main.o: include/Core/CollectorApplication.h
$(SRC_DIR)/Core/CollectorApplication.o: include/Core/CollectorApplication.h include/Utils/LogManager.h include/Config/ConfigManager.h
$(SRC_DIR)/Config/ConfigManager.o: include/Config/ConfigManager.h
$(SRC_DIR)/Utils/LogManager.o: include/Utils/LogManager.h