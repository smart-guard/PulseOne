# collector/Dockerfile.dev - BACnet ÎùºÏù¥Î∏åÎü¨Î¶¨ Ìè¨Ìï® Î≤ÑÏ†Ñ (ÏàòÏ†ïÎê®)
FROM gcc:12

# Í∏∞Î≥∏ Ìå®ÌÇ§ÏßÄ ÏÑ§Ïπò
RUN apt-get update && apt-get install -y \
    cmake make build-essential \
    libpqxx-dev libpq-dev libsqlite3-dev \
    curl git nodejs npm pkg-config \
    wget unzip \
    libssl-dev uuid-dev \
    autotools-dev autoconf automake libtool \
    && rm -rf /var/lib/apt/lists/*

# =============================================================================
# ÌïÑÏàò ÎùºÏù¥Î∏åÎü¨Î¶¨Îì§ ÏÑ§Ïπò (ÏïàÏ†ïÏ†ÅÏù∏ Î≤ÑÏ†Ñ)
# =============================================================================

# 1. libmodbus ÏÑ§Ïπò
RUN echo "üîß Installing libmodbus..." && \
    cd /tmp && git clone --depth 1 --branch v3.1.10 https://github.com/stephane/libmodbus.git && \
    cd libmodbus && ./autogen.sh && ./configure --prefix=/usr/local && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/libmodbus && echo "‚úÖ libmodbus installed"

# 2. hiredis ÏÑ§Ïπò
RUN echo "üîß Installing hiredis..." && \
    cd /tmp && git clone --depth 1 --branch v1.2.0 https://github.com/redis/hiredis.git && \
    cd hiredis && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_SSL=ON && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/hiredis && echo "‚úÖ hiredis installed"

# 3. Paho MQTT C ÏÑ§Ïπò
RUN echo "üîß Installing Paho MQTT C..." && \
    cd /tmp && git clone --depth 1 --branch v1.3.13 https://github.com/eclipse/paho.mqtt.c.git && \
    cd paho.mqtt.c && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DPAHO_WITH_SSL=TRUE -DPAHO_BUILD_DOCUMENTATION=FALSE && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/paho.mqtt.c && echo "‚úÖ Paho MQTT C installed"

# 3-1. Paho MQTT C++ ÏÑ§Ïπò (üî• ÏÉàÎ°ú Ï∂îÍ∞Ä)
RUN echo "üîß Installing Paho MQTT C++..." && \
    cd /tmp && git clone --depth 1 --branch v1.3.2 https://github.com/eclipse/paho.mqtt.cpp.git && \
    cd paho.mqtt.cpp && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local \
             -DPAHO_WITH_SSL=TRUE \
             -DPAHO_BUILD_DOCUMENTATION=FALSE \
             -DPAHO_BUILD_SAMPLES=FALSE \
             -DPAHO_BUILD_TESTS=FALSE && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/paho.mqtt.cpp && echo "‚úÖ Paho MQTT C++ installed"

# 4. nlohmann/json ÏÑ§Ïπò (ÏÜåÏä§ÏóêÏÑú ÎπåÎìú)
RUN echo "üîß Installing nlohmann/json..." && \
    cd /tmp && git clone --depth 1 --branch v3.11.3 https://github.com/nlohmann/json.git && \
    cd json && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DJSON_BuildTests=OFF && \
    make -j$(nproc) && make install && \
    cd / && rm -rf /tmp/json && echo "‚úÖ nlohmann/json installed"

# 5. spdlog ÏÑ§Ïπò (Î°úÍπÖ ÎùºÏù¥Î∏åÎü¨Î¶¨)
RUN echo "üîß Installing spdlog..." && \
    cd /tmp && git clone --depth 1 --branch v1.12.0 https://github.com/gabime/spdlog.git && \
    cd spdlog && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DSPDLOG_BUILD_SHARED=ON && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/spdlog && echo "‚úÖ spdlog installed"

# 6. BACnet Stack Ìó§Îçî Î∞è Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ ÏÑ§Ïπò (ÌôòÍ≤ΩÎ≥ÄÏàò Ìò∏Ìôò)
RUN echo "üîß Installing BACnet headers and interface..." && \
    cd /tmp && \
    git clone --depth 1 https://github.com/bacnet-stack/bacnet-stack.git && \
    cd bacnet-stack && \
    echo "üìã Configuring BACnet environment..." && \
    export BACNET_PORT=linux && \
    export BACNET_DEFINES="-DPRINT_ENABLED=1 -DBACAPP_ALL -DBACFILE -DINTRINSIC_REPORTING" && \
    echo "üìÇ Installing BACnet headers with proper structure..." && \
    mkdir -p /usr/local/include/bacnet && \
    cp -r src/bacnet/* /usr/local/include/bacnet/ && \
    cp -r src/*.h /usr/local/include/bacnet/ 2>/dev/null || true

# BACnet ÏÑ§Ï†ï Ìó§Îçî ÏÉùÏÑ±
RUN echo "üîß Creating BACnet configuration headers..." && \
    cat > /usr/local/include/bacnet_config.h << 'EOF'
// BACnet Configuration for PulseOne (ÌôòÍ≤ΩÎ≥ÄÏàò Ìò∏Ìôò)
#ifndef BACNET_CONFIG_H
#define BACNET_CONFIG_H

// Í∏∞Ï°¥ ÌôòÍ≤ΩÎ≥ÄÏàòÎì§ÏùÑ Îß§ÌÅ¨Î°úÎ°ú Ï†ïÏùò
#define PRINT_ENABLED 1
#define BACAPP_ALL 1
#define BACFILE 1
#define DINTRINSIC_REPORTING 1

// ÌîåÎû´Ìèº ÏÑ§Ï†ï
#ifdef __linux__
    #define BACNET_PORT linux
#elif _WIN32
    #define BACNET_PORT win32
#elif __APPLE__
    #define BACNET_PORT macos
#endif

// BACnet Í∏∞Î≥∏ ÏÑ§Ï†ïÎì§
#define MAX_APDU 1476
#define MAX_TSM_TRANSACTIONS 255
#define BACNET_USE_THREADS 1

// BACnet Í∞ùÏ≤¥ ÌÉÄÏûÖÎì§ (ÌëúÏ§Ä)
#define OBJECT_ANALOG_INPUT 0
#define OBJECT_ANALOG_OUTPUT 1
#define OBJECT_ANALOG_VALUE 2
#define OBJECT_BINARY_INPUT 3
#define OBJECT_BINARY_OUTPUT 4
#define OBJECT_BINARY_VALUE 5
#define OBJECT_DEVICE 8

// BACnet ÌîÑÎ°úÌçºÌã∞ IDÎì§ (ÌëúÏ§Ä)
#define PROP_PRESENT_VALUE 85
#define PROP_OBJECT_NAME 77
#define PROP_OBJECT_TYPE 79
#define PROP_DESCRIPTION 28

#endif // BACNET_CONFIG_H
EOF

# BACnet Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ Ï†ïÏùò ÌååÏùº ÏÉùÏÑ±
RUN echo "üìã Creating BACnet interface definitions..." && \
    cat > /usr/local/include/bacnet_interface.h << 'EOF'
// BACnet Interface for PulseOne (Í∏∞Ï°¥ ÌôòÍ≤ΩÎ≥ÄÏàò Ìò∏Ìôò)
#ifndef BACNET_INTERFACE_H
#define BACNET_INTERFACE_H

// Í∏∞Ï°¥ ÏÑ§Ï†ï Ìè¨Ìï®
#include "bacnet_config.h"

#ifdef __cplusplus
extern "C" {
#endif

// BACnet Í∏∞Î≥∏ ÌÉÄÏûÖÎì§ (Í∏∞Ï°¥ BACnet StackÍ≥º Ìò∏Ìôò)
typedef struct {
    uint32_t device_id;
    char name[64];
    char description[128];
    char ip_address[16];
    uint16_t port;
    uint8_t network_type;  // IP=0, MSTP=1, Ethernet=2
    uint32_t vendor_id;
    uint16_t max_apdu;
} BACnet_Device_Info;

typedef struct {
    uint32_t object_instance;
    uint16_t object_type;
    char object_name[64];
    float present_value;
    char units[32];
    uint8_t priority;
    uint8_t reliability;
    uint8_t status_flags;
} BACnet_Object_Info;

// BACnet Ïò§Î•ò ÏΩîÎìúÎì§
typedef enum {
    BACNET_SUCCESS = 0,
    BACNET_ERROR_TIMEOUT = -1,
    BACNET_ERROR_REJECT = -2,
    BACNET_ERROR_ABORT = -3,
    BACNET_ERROR_DEVICE_NOT_FOUND = -4,
    BACNET_ERROR_OBJECT_NOT_FOUND = -5,
    BACNET_ERROR_PROPERTY_NOT_FOUND = -6,
    BACNET_ERROR_INVALID_PARAMETER = -7,
    BACNET_ERROR_CONNECTION_FAILED = -8
} BACnet_Error_Code;

// BACnet Ìï®Ïàò Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ (Ïã§Ï†ú BACnet Stack APIÏôÄ Ïú†ÏÇ¨)
typedef struct {
    // Ï¥àÍ∏∞Ìôî Î∞è ÏÑ§Ï†ï
    int (*init)(const char* interface_name);
    int (*set_device_info)(uint32_t device_id, const char* name, const char* description);
    int (*cleanup)(void);
    
    // ÎîîÎ∞îÏù¥Ïä§ Í¥ÄÎ¶¨
    int (*discover_devices)(BACnet_Device_Info* devices, int max_devices, int timeout_ms);
    int (*bind_device)(uint32_t device_id, const char* ip_address, uint16_t port);
    int (*is_device_connected)(uint32_t device_id);
    
    // ÌîÑÎ°úÌçºÌã∞ ÏùΩÍ∏∞/Ïì∞Í∏∞ (Í∏∞Ï°¥ BACnet Î∞©Ïãù)
    int (*read_property)(uint32_t device_id, uint16_t object_type, uint32_t object_instance, 
                        uint32_t property_id, uint32_t array_index, void* value, size_t* value_len);
    int (*write_property)(uint32_t device_id, uint16_t object_type, uint32_t object_instance, 
                         uint32_t property_id, uint32_t array_index, const void* value, size_t value_len, uint8_t priority);
    
    // Í∞ùÏ≤¥ Î¶¨Ïä§ÌåÖ
    int (*get_object_list)(uint32_t device_id, BACnet_Object_Info* objects, int max_objects);
    int (*get_object_name)(uint32_t device_id, uint16_t object_type, uint32_t object_instance, char* name, size_t name_len);
    
    // Íµ¨ÎèÖ Î∞è Ïù¥Î≤§Ìä∏ (COV - Change of Value)
    int (*subscribe_cov)(uint32_t device_id, uint16_t object_type, uint32_t object_instance, uint32_t lifetime);
    int (*unsubscribe_cov)(uint32_t device_id, uint16_t object_type, uint32_t object_instance);
    
    // ÏÉÅÌÉú Î∞è Ïò§Î•ò Í¥ÄÎ¶¨
    BACnet_Error_Code (*get_last_error)(void);
    const char* (*get_error_string)(BACnet_Error_Code error_code);
    int (*get_device_status)(uint32_t device_id);
    
    // ÌÜµÍ≥Ñ Î∞è ÏßÑÎã®
    int (*get_statistics)(uint32_t* total_requests, uint32_t* successful_requests, uint32_t* failed_requests);
    void (*reset_statistics)(void);
    
} BACnet_Interface;

// Ìï®Ïàò Ìè¨Ïù∏ÌÑ∞ Î°úÎî© (ÎèôÏ†Å ÎùºÏù¥Î∏åÎü¨Î¶¨ÏóêÏÑú)
extern BACnet_Interface* bacnet_load_interface(const char* library_path);
extern void bacnet_unload_interface(BACnet_Interface* interface);

#ifdef __cplusplus
}
#endif

#endif // BACNET_INTERFACE_H
EOF

# ÌîåÎû´ÌèºÎ≥Ñ ÎùºÏù¥Î∏åÎü¨Î¶¨ Î°úÎçî ÏÉùÏÑ±
RUN echo "üîß Creating platform-specific library loader..." && \
    cat > /usr/local/include/bacnet_loader.h << 'EOF'
// Platform-specific BACnet library loader
#ifndef BACNET_LOADER_H
#define BACNET_LOADER_H

#include "bacnet_interface.h"

#ifdef _WIN32
    #include <windows.h>
    #define LIB_HANDLE HMODULE
    #define LIB_LOAD(path) LoadLibrary(path)
    #define LIB_GETSYM(lib, name) GetProcAddress(lib, name)
    #define LIB_CLOSE(lib) FreeLibrary(lib)
    #define LIB_EXT ".dll"
    #define PATH_SEP "\\"
#elif __APPLE__
    #include <dlfcn.h>
    #define LIB_HANDLE void*
    #define LIB_LOAD(path) dlopen(path, RTLD_LAZY)
    #define LIB_GETSYM(lib, name) dlsym(lib, name)
    #define LIB_CLOSE(lib) dlclose(lib)
    #define LIB_EXT ".dylib"
    #define PATH_SEP "/"
#else // Linux
    #include <dlfcn.h>
    #define LIB_HANDLE void*
    #define LIB_LOAD(path) dlopen(path, RTLD_LAZY)
    #define LIB_GETSYM(lib, name) dlsym(lib, name)
    #define LIB_CLOSE(lib) dlclose(lib)
    #define LIB_EXT ".so"
    #define PATH_SEP "/"
#endif

// ÏûêÎèô ÎùºÏù¥Î∏åÎü¨Î¶¨ Í≤ΩÎ°ú Í∞êÏßÄ
static inline const char* get_bacnet_library_path(void) {
    static char path[512];
#ifdef _WIN32
    snprintf(path, sizeof(path), ".%sdrivers%sbacnet%s", PATH_SEP, PATH_SEP, LIB_EXT);
#else
    snprintf(path, sizeof(path), ".%sdrivers%slibbacnet%s", PATH_SEP, PATH_SEP, LIB_EXT);
#endif
    return path;
}

// BACnet Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ Î°úÎçî Íµ¨ÌòÑ
static inline BACnet_Interface* bacnet_load_interface(const char* library_path) {
    static BACnet_Interface interface;
    const char* path = library_path ? library_path : get_bacnet_library_path();
    
    LIB_HANDLE lib = LIB_LOAD(path);
    if (!lib) {
        return NULL;
    }
    
    // Ìï®Ïàò Ìè¨Ïù∏ÌÑ∞Îì§ Î°úÎìú
    interface.init = (int (*)(const char*))LIB_GETSYM(lib, "bacnet_init");
    interface.set_device_info = (int (*)(uint32_t, const char*, const char*))LIB_GETSYM(lib, "bacnet_set_device_info");
    interface.cleanup = (int (*)(void))LIB_GETSYM(lib, "bacnet_cleanup");
    
    interface.discover_devices = (int (*)(BACnet_Device_Info*, int, int))LIB_GETSYM(lib, "bacnet_discover_devices");
    interface.bind_device = (int (*)(uint32_t, const char*, uint16_t))LIB_GETSYM(lib, "bacnet_bind_device");
    interface.is_device_connected = (int (*)(uint32_t))LIB_GETSYM(lib, "bacnet_is_device_connected");
    
    interface.read_property = (int (*)(uint32_t, uint16_t, uint32_t, uint32_t, uint32_t, void*, size_t*))LIB_GETSYM(lib, "bacnet_read_property");
    interface.write_property = (int (*)(uint32_t, uint16_t, uint32_t, uint32_t, uint32_t, const void*, size_t, uint8_t))LIB_GETSYM(lib, "bacnet_write_property");
    
    interface.get_object_list = (int (*)(uint32_t, BACnet_Object_Info*, int))LIB_GETSYM(lib, "bacnet_get_object_list");
    interface.get_object_name = (int (*)(uint32_t, uint16_t, uint32_t, char*, size_t))LIB_GETSYM(lib, "bacnet_get_object_name");
    
    interface.subscribe_cov = (int (*)(uint32_t, uint16_t, uint32_t, uint32_t))LIB_GETSYM(lib, "bacnet_subscribe_cov");
    interface.unsubscribe_cov = (int (*)(uint32_t, uint16_t, uint32_t))LIB_GETSYM(lib, "bacnet_unsubscribe_cov");
    
    interface.get_last_error = (BACnet_Error_Code (*)(void))LIB_GETSYM(lib, "bacnet_get_last_error");
    interface.get_error_string = (const char* (*)(BACnet_Error_Code))LIB_GETSYM(lib, "bacnet_get_error_string");
    interface.get_device_status = (int (*)(uint32_t))LIB_GETSYM(lib, "bacnet_get_device_status");
    
    interface.get_statistics = (int (*)(uint32_t*, uint32_t*, uint32_t*))LIB_GETSYM(lib, "bacnet_get_statistics");
    interface.reset_statistics = (void (*)(void))LIB_GETSYM(lib, "bacnet_reset_statistics");
    
    return &interface;
}

#endif // BACNET_LOADER_H
EOF

# BACnet Stack Ï†ïÎ¶¨
RUN echo "üìã BACnet headers installation summary:" && \
    echo "  Headers installed to: /usr/local/include/bacnet/" && \
    echo "  Configuration file: /usr/local/include/bacnet_config.h" && \
    echo "  Interface file: /usr/local/include/bacnet_interface.h" && \
    echo "  Loader utility: /usr/local/include/bacnet_loader.h" && \
    echo "üßπ Cleaning up..." && \
    cd / && rm -rf /tmp/bacnet-stack && \
    echo "‚úÖ BACnet headers and interface installed successfully"

# 7. BACnet pkg-config ÌååÏùº ÏÉùÏÑ± (Í∏∞Ï°¥ ÌôòÍ≤ΩÎ≥ÄÏàò Ìò∏Ìôò)
RUN echo "üìù Creating BACnet pkg-config file..." && \
    mkdir -p /usr/local/lib/pkgconfig && \
    cat > /usr/local/lib/pkgconfig/bacnet.pc << 'EOF'
prefix=/usr/local
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include

Name: BACnet Headers
Description: BACnet protocol headers and interface definitions (ÌôòÍ≤ΩÎ≥ÄÏàò Ìò∏Ìôò)
Version: 1.0.0
Libs: -ldl
Cflags: -I${includedir} -DPRINT_ENABLED=1 -DBACAPP_ALL -DBACFILE -DINTRINSIC_REPORTING
EOF

# libmodbus pkg-config ÌååÏùº ÏÉùÏÑ±
RUN echo "üìù Creating other pkg-config files..." && \
    cat > /usr/local/lib/pkgconfig/libmodbus.pc << 'EOF'
prefix=/usr/local
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include

Name: libmodbus
Description: Modbus library
Version: 3.1.10
Libs: -L${libdir} -lmodbus
Cflags: -I${includedir}
EOF

# Paho MQTT C++ pkg-config ÌååÏùº ÏÉùÏÑ± (üî• ÏÉàÎ°ú Ï∂îÍ∞Ä)
RUN echo "üìù Creating Paho MQTT C++ pkg-config file..." && \
    cat > /usr/local/lib/pkgconfig/paho-mqttpp3.pc << 'EOF'
prefix=/usr/local
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include

Name: Paho MQTT C++
Description: Eclipse Paho MQTT C++ Client Library
Version: 1.3.2
Requires: paho-mqtt3c
Libs: -L${libdir} -lpaho-mqttpp3
Cflags: -I${includedir}
EOF

# ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
ENV BACNET_PORT=linux
ENV BACNET_DEFINES="-DPRINT_ENABLED=1 -DBACAPP_ALL -DBACFILE -DINTRINSIC_REPORTING"

# Í∞úÎ∞úÏö© Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±
RUN echo '#!/bin/bash' > /usr/local/bin/dev-build.sh && \
    echo 'echo "üîß PulseOne Collector Í∞úÎ∞ú ÎπåÎìú"' >> /usr/local/bin/dev-build.sh && \
    echo 'cd /app/collector' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "üìã ÏÑ§ÏπòÎêú ÎùºÏù¥Î∏åÎü¨Î¶¨ ÌôïÏù∏:"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  libmodbus: $(pkg-config --exists libmodbus && echo "‚úÖ OK" || echo "‚ùå Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  BACnet: $(pkg-config --exists bacnet && echo "‚úÖ OK" || echo "‚ùå Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  Paho MQTT: $(ls -la /usr/local/lib/libpaho-mqtt3c.so* 2>/dev/null && echo "‚úÖ Found" || echo "‚ùå Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo ""' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "üî® ÎπåÎìú ÏãúÏûë:"' >> /usr/local/bin/dev-build.sh && \
    echo 'make clean && make debug' >> /usr/local/bin/dev-build.sh && \
    chmod +x /usr/local/bin/dev-build.sh

# BACnet ÏÑ§Ïπò ÌôïÏù∏ Ïä§ÌÅ¨Î¶ΩÌä∏
RUN echo '#!/bin/bash' > /usr/local/bin/check-bacnet.sh && \
    echo 'echo "üîç BACnet ÏÑ§Ïπò ÌôïÏù∏:"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'echo "üìÇ Ìó§Îçî ÌååÏùºÎì§:"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'find /usr/local/include/bacnet -name "*.h" 2>/dev/null | head -10 || echo "Ìó§Îçî ÌååÏùº ÏóÜÏùå"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'echo "üìã ÏÑ§Ï†ï ÌååÏùºÎì§:"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'ls -la /usr/local/include/bacnet_*.h 2>/dev/null || echo "ÏÑ§Ï†ï ÌååÏùº ÏóÜÏùå"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'echo "üß™ pkg-config ÌÖåÏä§Ìä∏:"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'pkg-config --cflags bacnet 2>/dev/null || echo "pkg-config ÏÑ§Ï†ï ÏóÜÏùå"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'pkg-config --libs bacnet 2>/dev/null || echo "pkg-config ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏóÜÏùå"' >> /usr/local/bin/check-bacnet.sh && \
    chmod +x /usr/local/bin/check-bacnet.sh

# Bash ÌîÑÎ°¨ÌîÑÌä∏ Í∞úÏÑ† Î∞è Í∞úÎ∞ú ÌôòÍ≤Ω Î©îÏãúÏßÄ
RUN echo 'export PS1="\[\033[01;32m\]\u@collector-dev\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ "' >> /root/.bashrc && \
    echo 'echo "üöÄ PulseOne Collector Development Environment Ready!"' >> /root/.bashrc && \
    echo 'echo "üìã ÏÑ§ÏπòÎêú ÎùºÏù¥Î∏åÎü¨Î¶¨Îì§:"' >> /root/.bashrc && \
    echo 'echo "  - libmodbus (Modbus ÌÜµÏã†)"' >> /root/.bashrc && \
    echo 'echo "  - Paho MQTT C (MQTT ÌÜµÏã†)"' >> /root/.bashrc && \
    echo 'echo "  - BACnet Headers (BACnet ÌÜµÏã†)"' >> /root/.bashrc && \
    echo 'echo "  - hiredis (Redis ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏)"' >> /root/.bashrc && \
    echo 'echo "  - nlohmann/json (JSON ÌååÏã±)"' >> /root/.bashrc && \
    echo 'echo "  - spdlog (Î°úÍπÖ)"' >> /root/.bashrc && \
    echo 'echo ""' >> /root/.bashrc && \
    echo 'echo "üîß Ïú†Ïö©Ìïú Î™ÖÎ†πÏñ¥Îì§:"' >> /root/.bashrc && \
    echo 'echo "  dev-build.sh      - Í∞úÎ∞ú ÎπåÎìú"' >> /root/.bashrc && \
    echo 'echo "  check-bacnet.sh   - BACnet ÏÑ§Ïπò ÌôïÏù∏"' >> /root/.bashrc && \
    echo 'echo "  make help         - Makefile ÎèÑÏõÄÎßê"' >> /root/.bashrc && \
    echo 'echo ""' >> /root/.bashrc

# Í∏∞Ï°¥ Í∞úÎ∞úÏö© Ïä§ÌÅ¨Î¶ΩÌä∏ ÏàòÏ†ï - MQTT C++ ÌôïÏù∏ Ï∂îÍ∞Ä:
RUN echo '#!/bin/bash' > /usr/local/bin/dev-build.sh && \
    echo 'echo "üîß PulseOne Collector Í∞úÎ∞ú ÎπåÎìú"' >> /usr/local/bin/dev-build.sh && \
    echo 'cd /app/collector' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "üìã ÏÑ§ÏπòÎêú ÎùºÏù¥Î∏åÎü¨Î¶¨ ÌôïÏù∏:"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  libmodbus: $(pkg-config --exists libmodbus && echo "‚úÖ OK" || echo "‚ùå Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  BACnet: $(pkg-config --exists bacnet && echo "‚úÖ OK" || echo "‚ùå Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  Paho MQTT C: $(ls -la /usr/local/lib/libpaho-mqtt3c.so* 2>/dev/null && echo "‚úÖ Found" || echo "‚ùå Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  Paho MQTT C++: $(ls -la /usr/local/lib/libpaho-mqttpp*.so* 2>/dev/null && echo "‚úÖ Found" || echo "‚ùå Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  MQTT Headers: $(find /usr/local/include -name async_client.h 2>/dev/null && echo "‚úÖ Found" || echo "‚ùå Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo ""' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "üî® ÎπåÎìú ÏãúÏûë:"' >> /usr/local/bin/dev-build.sh && \
    echo 'make clean && make debug' >> /usr/local/bin/dev-build.sh && \
    chmod +x /usr/local/bin/dev-build.sh

# Í∏∞Ï°¥ Bash ÌîÑÎ°¨ÌîÑÌä∏ Í∞úÏÑ† ÏÑπÏÖòÏóêÏÑú MQTT C++ Ï∂îÍ∞Ä:
RUN echo 'export PS1="\[\033[01;32m\]\u@collector-dev\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ "' >> /root/.bashrc && \
    echo 'echo "üöÄ PulseOne Collector Development Environment Ready!"' >> /root/.bashrc && \
    echo 'echo "üìã ÏÑ§ÏπòÎêú ÎùºÏù¥Î∏åÎü¨Î¶¨Îì§:"' >> /root/.bashrc && \
    echo 'echo "  - libmodbus (Modbus ÌÜµÏã†)"' >> /root/.bashrc && \
    echo 'echo "  - Paho MQTT C (MQTT ÌÜµÏã† - C)"' >> /root/.bashrc && \
    echo 'echo "  - Paho MQTT C++ (MQTT ÌÜµÏã† - C++)"' >> /root/.bashrc && \
    echo 'echo "  - BACnet Headers (BACnet ÌÜµÏã†)"' >> /root/.bashrc && \
    echo 'echo "  - hiredis (Redis ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏)"' >> /root/.bashrc && \
    echo 'echo "  - nlohmann/json (JSON ÌååÏã±)"' >> /root/.bashrc && \
    echo 'echo "  - spdlog (Î°úÍπÖ)"' >> /root/.bashrc && \
    echo 'echo ""' >> /root/.bashrc && \
    echo 'echo "üîß Ïú†Ïö©Ìïú Î™ÖÎ†πÏñ¥Îì§:"' >> /root/.bashrc && \
    echo 'echo "  dev-build.sh      - Í∞úÎ∞ú ÎπåÎìú"' >> /root/.bashrc && \
    echo 'echo "  check-bacnet.sh   - BACnet ÏÑ§Ïπò ÌôïÏù∏"' >> /root/.bashrc && \
    echo 'echo "  make help         - Makefile ÎèÑÏõÄÎßê"' >> /root/.bashrc && \
    echo 'echo ""' >> /root/.bashrc


# ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
ENV CC=gcc CXX=g++
ENV CFLAGS="-std=c11 -Wall -Wextra"
ENV CXXFLAGS="-std=c++17 -Wall -Wextra"

# ÏûëÏóÖ ÎîîÎ†âÌÜ†Î¶¨ ÏÑ§Ï†ï
WORKDIR /app

# Í∏∞Î≥∏ Î™ÖÎ†πÏñ¥
CMD ["/bin/bash"]

# ÎπåÎìú ÏôÑÎ£å ÌõÑ ÌôïÏù∏ÏÇ¨Ìï≠ Ï∂úÎ†• ÏàòÏ†ï:
RUN echo "üéâ Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú ÏôÑÎ£å!" && \
    echo "üìã BACnet Ìó§Îçî ÌååÏùº Í∞úÏàò:" && \
    find /usr/local/include/bacnet -name "*.h" 2>/dev/null | wc -l && \
    echo "üìã MQTT C++ Ìó§Îçî ÌôïÏù∏:" && \
    find /usr/local/include -name "async_client.h" 2>/dev/null | wc -l && \
    echo "‚úÖ Î™®Îì† ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏÑ§Ïπò ÏôÑÎ£å (MQTT C++ Ìè¨Ìï®)"