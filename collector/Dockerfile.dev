# collector/Dockerfile.dev - BACnet 라이브러리 포함 버전 (수정됨)
FROM gcc:12

# 기본 패키지 설치
RUN apt-get update && apt-get install -y \
    cmake make build-essential \
    libpqxx-dev libpq-dev libsqlite3-dev \
    curl git nodejs npm pkg-config \
    wget unzip \
    libssl-dev uuid-dev \
    autotools-dev autoconf automake libtool \
    && rm -rf /var/lib/apt/lists/*

# =============================================================================
# 필수 라이브러리들 설치 (안정적인 버전)
# =============================================================================

# 1. libmodbus 설치
RUN echo "🔧 Installing libmodbus..." && \
    cd /tmp && git clone --depth 1 --branch v3.1.10 https://github.com/stephane/libmodbus.git && \
    cd libmodbus && ./autogen.sh && ./configure --prefix=/usr/local && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/libmodbus && echo "✅ libmodbus installed"

# 2. hiredis 설치
RUN echo "🔧 Installing hiredis..." && \
    cd /tmp && git clone --depth 1 --branch v1.2.0 https://github.com/redis/hiredis.git && \
    cd hiredis && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_SSL=ON && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/hiredis && echo "✅ hiredis installed"

# 3. Paho MQTT C 설치
RUN echo "🔧 Installing Paho MQTT C..." && \
    cd /tmp && git clone --depth 1 --branch v1.3.13 https://github.com/eclipse/paho.mqtt.c.git && \
    cd paho.mqtt.c && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DPAHO_WITH_SSL=TRUE -DPAHO_BUILD_DOCUMENTATION=FALSE && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/paho.mqtt.c && echo "✅ Paho MQTT C installed"

# 3-1. Paho MQTT C++ 설치 (🔥 새로 추가)
RUN echo "🔧 Installing Paho MQTT C++..." && \
    cd /tmp && git clone --depth 1 --branch v1.3.2 https://github.com/eclipse/paho.mqtt.cpp.git && \
    cd paho.mqtt.cpp && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local \
             -DPAHO_WITH_SSL=TRUE \
             -DPAHO_BUILD_DOCUMENTATION=FALSE \
             -DPAHO_BUILD_SAMPLES=FALSE \
             -DPAHO_BUILD_TESTS=FALSE && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/paho.mqtt.cpp && echo "✅ Paho MQTT C++ installed"

# 4. nlohmann/json 설치 (소스에서 빌드)
RUN echo "🔧 Installing nlohmann/json..." && \
    cd /tmp && git clone --depth 1 --branch v3.11.3 https://github.com/nlohmann/json.git && \
    cd json && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DJSON_BuildTests=OFF && \
    make -j$(nproc) && make install && \
    cd / && rm -rf /tmp/json && echo "✅ nlohmann/json installed"

# 5. spdlog 설치 (로깅 라이브러리)
RUN echo "🔧 Installing spdlog..." && \
    cd /tmp && git clone --depth 1 --branch v1.12.0 https://github.com/gabime/spdlog.git && \
    cd spdlog && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DSPDLOG_BUILD_SHARED=ON && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/spdlog && echo "✅ spdlog installed"

# 6. BACnet Stack 정적 라이브러리 빌드 및 설치
RUN echo "🔧 Installing BACnet Stack as static library..." && \
    cd /tmp && \
    git clone --depth 1 https://github.com/bacnet-stack/bacnet-stack.git && \
    cd bacnet-stack && \
    echo "📋 Configuring BACnet build environment..." && \
    export BACNET_PORT=linux && \
    export BACNET_DEFINES="-DPRINT_ENABLED=1 -DBACAPP_ALL -DBACFILE -DINTRINSIC_REPORTING" && \
    \
    echo "🔨 Building BACnet Stack as static library..." && \
    # BACnet Stack을 정적 라이브러리로 빌드
    make clean && \
    make BACNET_PORT=linux \
         BACNET_DEFINES="-DPRINT_ENABLED=1 -DBACAPP_ALL -DBACFILE -DINTRINSIC_REPORTING" \
         OPTIMIZATION="-O2" \
         -j$(nproc) all && \
    \
    echo "📦 Creating BACnet static library..." && \
    # 모든 오브젝트 파일을 정적 라이브러리로 패키징
    find . -name "*.o" -type f > object_files.txt && \
    ar rcs libbacnet.a $(cat object_files.txt) && \
    ranlib libbacnet.a && \
    \
    echo "📂 Installing BACnet headers..." && \
    mkdir -p /usr/local/include/bacnet && \
    cp -r src/bacnet/* /usr/local/include/bacnet/ && \
    cp -r src/*.h /usr/local/include/bacnet/ 2>/dev/null || true && \
    \
    echo "📚 Installing BACnet static library..." && \
    cp libbacnet.a /usr/local/lib/ && \
    \
    echo "🧹 Cleaning up..." && \
    cd / && rm -rf /tmp/bacnet-stack && \
    echo "✅ BACnet Stack static library and headers installed successfully"

# 플랫폼별 라이브러리 로더 생성
RUN echo "🔧 Creating platform-specific library loader..." && \
    cat > /usr/local/include/bacnet_loader.h << 'EOF'
// Platform-specific BACnet library loader
#ifndef BACNET_LOADER_H
#define BACNET_LOADER_H

#include "bacnet_interface.h"

#ifdef _WIN32
    #include <windows.h>
    #define LIB_HANDLE HMODULE
    #define LIB_LOAD(path) LoadLibrary(path)
    #define LIB_GETSYM(lib, name) GetProcAddress(lib, name)
    #define LIB_CLOSE(lib) FreeLibrary(lib)
    #define LIB_EXT ".dll"
    #define PATH_SEP "\\"
#elif __APPLE__
    #include <dlfcn.h>
    #define LIB_HANDLE void*
    #define LIB_LOAD(path) dlopen(path, RTLD_LAZY)
    #define LIB_GETSYM(lib, name) dlsym(lib, name)
    #define LIB_CLOSE(lib) dlclose(lib)
    #define LIB_EXT ".dylib"
    #define PATH_SEP "/"
#else // Linux
    #include <dlfcn.h>
    #define LIB_HANDLE void*
    #define LIB_LOAD(path) dlopen(path, RTLD_LAZY)
    #define LIB_GETSYM(lib, name) dlsym(lib, name)
    #define LIB_CLOSE(lib) dlclose(lib)
    #define LIB_EXT ".so"
    #define PATH_SEP "/"
#endif

// 자동 라이브러리 경로 감지
static inline const char* get_bacnet_library_path(void) {
    static char path[512];
#ifdef _WIN32
    snprintf(path, sizeof(path), ".%sdrivers%sbacnet%s", PATH_SEP, PATH_SEP, LIB_EXT);
#else
    snprintf(path, sizeof(path), ".%sdrivers%slibbacnet%s", PATH_SEP, PATH_SEP, LIB_EXT);
#endif
    return path;
}

// BACnet 인터페이스 로더 구현
static inline BACnet_Interface* bacnet_load_interface(const char* library_path) {
    static BACnet_Interface interface;
    const char* path = library_path ? library_path : get_bacnet_library_path();
    
    LIB_HANDLE lib = LIB_LOAD(path);
    if (!lib) {
        return NULL;
    }
    
    // 함수 포인터들 로드
    interface.init = (int (*)(const char*))LIB_GETSYM(lib, "bacnet_init");
    interface.set_device_info = (int (*)(uint32_t, const char*, const char*))LIB_GETSYM(lib, "bacnet_set_device_info");
    interface.cleanup = (int (*)(void))LIB_GETSYM(lib, "bacnet_cleanup");
    
    interface.discover_devices = (int (*)(BACnet_Device_Info*, int, int))LIB_GETSYM(lib, "bacnet_discover_devices");
    interface.bind_device = (int (*)(uint32_t, const char*, uint16_t))LIB_GETSYM(lib, "bacnet_bind_device");
    interface.is_device_connected = (int (*)(uint32_t))LIB_GETSYM(lib, "bacnet_is_device_connected");
    
    interface.read_property = (int (*)(uint32_t, uint16_t, uint32_t, uint32_t, uint32_t, void*, size_t*))LIB_GETSYM(lib, "bacnet_read_property");
    interface.write_property = (int (*)(uint32_t, uint16_t, uint32_t, uint32_t, uint32_t, const void*, size_t, uint8_t))LIB_GETSYM(lib, "bacnet_write_property");
    
    interface.get_object_list = (int (*)(uint32_t, BACnet_Object_Info*, int))LIB_GETSYM(lib, "bacnet_get_object_list");
    interface.get_object_name = (int (*)(uint32_t, uint16_t, uint32_t, char*, size_t))LIB_GETSYM(lib, "bacnet_get_object_name");
    
    interface.subscribe_cov = (int (*)(uint32_t, uint16_t, uint32_t, uint32_t))LIB_GETSYM(lib, "bacnet_subscribe_cov");
    interface.unsubscribe_cov = (int (*)(uint32_t, uint16_t, uint32_t))LIB_GETSYM(lib, "bacnet_unsubscribe_cov");
    
    interface.get_last_error = (BACnet_Error_Code (*)(void))LIB_GETSYM(lib, "bacnet_get_last_error");
    interface.get_error_string = (const char* (*)(BACnet_Error_Code))LIB_GETSYM(lib, "bacnet_get_error_string");
    interface.get_device_status = (int (*)(uint32_t))LIB_GETSYM(lib, "bacnet_get_device_status");
    
    interface.get_statistics = (int (*)(uint32_t*, uint32_t*, uint32_t*))LIB_GETSYM(lib, "bacnet_get_statistics");
    interface.reset_statistics = (void (*)(void))LIB_GETSYM(lib, "bacnet_reset_statistics");
    
    return &interface;
}

#endif // BACNET_LOADER_H
EOF

# BACnet Stack 정리
RUN echo "📋 BACnet headers installation summary:" && \
    echo "  Headers installed to: /usr/local/include/bacnet/" && \
    echo "  Configuration file: /usr/local/include/bacnet_config.h" && \
    echo "  Interface file: /usr/local/include/bacnet_interface.h" && \
    echo "  Loader utility: /usr/local/include/bacnet_loader.h" && \
    echo "🧹 Cleaning up..." && \
    cd / && rm -rf /tmp/bacnet-stack && \
    echo "✅ BACnet headers and interface installed successfully"

# 7. BACnet pkg-config 파일 생성 (기존 환경변수 호환)
RUN echo "📝 Creating BACnet pkg-config file..." && \
    mkdir -p /usr/local/lib/pkgconfig && \
    cat > /usr/local/lib/pkgconfig/bacnet.pc << 'EOF'
prefix=/usr/local
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include

Name: BACnet Headers
Description: BACnet protocol headers and interface definitions (환경변수 호환)
Version: 1.0.0
Libs: -ldl
Cflags: -I${includedir} -DPRINT_ENABLED=1 -DBACAPP_ALL -DBACFILE -DINTRINSIC_REPORTING
EOF

# libmodbus pkg-config 파일 생성
RUN echo "📝 Creating other pkg-config files..." && \
    cat > /usr/local/lib/pkgconfig/libmodbus.pc << 'EOF'
prefix=/usr/local
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include

Name: libmodbus
Description: Modbus library
Version: 3.1.10
Libs: -L${libdir} -lmodbus
Cflags: -I${includedir}
EOF

# Paho MQTT C++ pkg-config 파일 생성 (🔥 새로 추가)
RUN echo "📝 Creating Paho MQTT C++ pkg-config file..." && \
    cat > /usr/local/lib/pkgconfig/paho-mqttpp3.pc << 'EOF'
prefix=/usr/local
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include

Name: Paho MQTT C++
Description: Eclipse Paho MQTT C++ Client Library
Version: 1.3.2
Requires: paho-mqtt3c
Libs: -L${libdir} -lpaho-mqttpp3
Cflags: -I${includedir}
EOF

# 환경 변수 설정
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
ENV BACNET_PORT=linux
ENV BACNET_DEFINES="-DPRINT_ENABLED=1 -DBACAPP_ALL -DBACFILE -DINTRINSIC_REPORTING"

# 개발용 스크립트 생성
RUN echo '#!/bin/bash' > /usr/local/bin/dev-build.sh && \
    echo 'echo "🔧 PulseOne Collector 개발 빌드"' >> /usr/local/bin/dev-build.sh && \
    echo 'cd /app/collector' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "📋 설치된 라이브러리 확인:"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  libmodbus: $(pkg-config --exists libmodbus && echo "✅ OK" || echo "❌ Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  BACnet: $(pkg-config --exists bacnet && echo "✅ OK" || echo "❌ Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  Paho MQTT: $(ls -la /usr/local/lib/libpaho-mqtt3c.so* 2>/dev/null && echo "✅ Found" || echo "❌ Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo ""' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "🔨 빌드 시작:"' >> /usr/local/bin/dev-build.sh && \
    echo 'make clean && make debug' >> /usr/local/bin/dev-build.sh && \
    chmod +x /usr/local/bin/dev-build.sh

# BACnet 설치 확인 스크립트
RUN echo '#!/bin/bash' > /usr/local/bin/check-bacnet.sh && \
    echo 'echo "🔍 BACnet 설치 확인:"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'echo "📂 헤더 파일들:"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'find /usr/local/include/bacnet -name "*.h" 2>/dev/null | head -10 || echo "헤더 파일 없음"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'echo "📋 설정 파일들:"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'ls -la /usr/local/include/bacnet_*.h 2>/dev/null || echo "설정 파일 없음"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'echo "🧪 pkg-config 테스트:"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'pkg-config --cflags bacnet 2>/dev/null || echo "pkg-config 설정 없음"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'pkg-config --libs bacnet 2>/dev/null || echo "pkg-config 라이브러리 없음"' >> /usr/local/bin/check-bacnet.sh && \
    chmod +x /usr/local/bin/check-bacnet.sh

# Bash 프롬프트 개선 및 개발 환경 메시지
RUN echo 'export PS1="\[\033[01;32m\]\u@collector-dev\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ "' >> /root/.bashrc && \
    echo 'echo "🚀 PulseOne Collector Development Environment Ready!"' >> /root/.bashrc && \
    echo 'echo "📋 설치된 라이브러리들:"' >> /root/.bashrc && \
    echo 'echo "  - libmodbus (Modbus 통신)"' >> /root/.bashrc && \
    echo 'echo "  - Paho MQTT C (MQTT 통신)"' >> /root/.bashrc && \
    echo 'echo "  - BACnet Headers (BACnet 통신)"' >> /root/.bashrc && \
    echo 'echo "  - hiredis (Redis 클라이언트)"' >> /root/.bashrc && \
    echo 'echo "  - nlohmann/json (JSON 파싱)"' >> /root/.bashrc && \
    echo 'echo "  - spdlog (로깅)"' >> /root/.bashrc && \
    echo 'echo ""' >> /root/.bashrc && \
    echo 'echo "🔧 유용한 명령어들:"' >> /root/.bashrc && \
    echo 'echo "  dev-build.sh      - 개발 빌드"' >> /root/.bashrc && \
    echo 'echo "  check-bacnet.sh   - BACnet 설치 확인"' >> /root/.bashrc && \
    echo 'echo "  make help         - Makefile 도움말"' >> /root/.bashrc && \
    echo 'echo ""' >> /root/.bashrc

# 기존 개발용 스크립트 수정 - MQTT C++ 확인 추가:
RUN echo '#!/bin/bash' > /usr/local/bin/dev-build.sh && \
    echo 'echo "🔧 PulseOne Collector 개발 빌드"' >> /usr/local/bin/dev-build.sh && \
    echo 'cd /app/collector' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "📋 설치된 라이브러리 확인:"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  libmodbus: $(pkg-config --exists libmodbus && echo "✅ OK" || echo "❌ Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  BACnet: $(pkg-config --exists bacnet && echo "✅ OK" || echo "❌ Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  Paho MQTT C: $(ls -la /usr/local/lib/libpaho-mqtt3c.so* 2>/dev/null && echo "✅ Found" || echo "❌ Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  Paho MQTT C++: $(ls -la /usr/local/lib/libpaho-mqttpp*.so* 2>/dev/null && echo "✅ Found" || echo "❌ Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  MQTT Headers: $(find /usr/local/include -name async_client.h 2>/dev/null && echo "✅ Found" || echo "❌ Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo ""' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "🔨 빌드 시작:"' >> /usr/local/bin/dev-build.sh && \
    echo 'make clean && make debug' >> /usr/local/bin/dev-build.sh && \
    chmod +x /usr/local/bin/dev-build.sh

# 기존 Bash 프롬프트 개선 섹션에서 MQTT C++ 추가:
RUN echo 'export PS1="\[\033[01;32m\]\u@collector-dev\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ "' >> /root/.bashrc && \
    echo 'echo "🚀 PulseOne Collector Development Environment Ready!"' >> /root/.bashrc && \
    echo 'echo "📋 설치된 라이브러리들:"' >> /root/.bashrc && \
    echo 'echo "  - libmodbus (Modbus 통신)"' >> /root/.bashrc && \
    echo 'echo "  - Paho MQTT C (MQTT 통신 - C)"' >> /root/.bashrc && \
    echo 'echo "  - Paho MQTT C++ (MQTT 통신 - C++)"' >> /root/.bashrc && \
    echo 'echo "  - BACnet Headers (BACnet 통신)"' >> /root/.bashrc && \
    echo 'echo "  - hiredis (Redis 클라이언트)"' >> /root/.bashrc && \
    echo 'echo "  - nlohmann/json (JSON 파싱)"' >> /root/.bashrc && \
    echo 'echo "  - spdlog (로깅)"' >> /root/.bashrc && \
    echo 'echo ""' >> /root/.bashrc && \
    echo 'echo "🔧 유용한 명령어들:"' >> /root/.bashrc && \
    echo 'echo "  dev-build.sh      - 개발 빌드"' >> /root/.bashrc && \
    echo 'echo "  check-bacnet.sh   - BACnet 설치 확인"' >> /root/.bashrc && \
    echo 'echo "  make help         - Makefile 도움말"' >> /root/.bashrc && \
    echo 'echo ""' >> /root/.bashrc


# 환경 변수 설정
ENV CC=gcc CXX=g++
ENV CFLAGS="-std=c11 -Wall -Wextra"
ENV CXXFLAGS="-std=c++17 -Wall -Wextra"

# 작업 디렉토리 설정
WORKDIR /app

# 기본 명령어
CMD ["/bin/bash"]

# 빌드 완료 후 확인사항 출력 수정:
RUN echo "🎉 Docker 이미지 빌드 완료!" && \
    echo "📋 BACnet 헤더 파일 개수:" && \
    find /usr/local/include/bacnet -name "*.h" 2>/dev/null | wc -l && \
    echo "📋 MQTT C++ 헤더 확인:" && \
    find /usr/local/include -name "async_client.h" 2>/dev/null | wc -l && \
    echo "✅ 모든 라이브러리 설치 완료 (MQTT C++ 포함)"