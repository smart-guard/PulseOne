# collector/Dockerfile.dev - BACnet 라이브러리 완전 수정 버전
FROM gcc:12

# 기본 패키지 설치
RUN apt-get update && apt-get install -y \
    cmake make build-essential \
    libpqxx-dev libpq-dev libsqlite3-dev \
    sqlite3 sqlite3-doc \
    curl git nodejs npm pkg-config \
    wget unzip vim nano \
    libssl-dev uuid-dev \
    autotools-dev autoconf automake libtool \
    tree htop procps \
    && rm -rf /var/lib/apt/lists/*

# SQLite 설치 확인
RUN echo "🔍 SQLite 설치 확인:" && \
    sqlite3 --version && \
    echo "✅ SQLite3 설치 완료"

# =============================================================================
# 필수 라이브러리들 설치 (안정적인 버전)
# =============================================================================

# 1. libmodbus 설치
RUN echo "🔧 Installing libmodbus..." && \
    cd /tmp && git clone --depth 1 --branch v3.1.10 https://github.com/stephane/libmodbus.git && \
    cd libmodbus && ./autogen.sh && ./configure --prefix=/usr/local && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/libmodbus && echo "✅ libmodbus installed"

# 2. hiredis 설치
RUN echo "🔧 Installing hiredis..." && \
    cd /tmp && git clone --depth 1 --branch v1.2.0 https://github.com/redis/hiredis.git && \
    cd hiredis && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_SSL=ON && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/hiredis && echo "✅ hiredis installed"

# 3. Paho MQTT C 설치
RUN echo "🔧 Installing Paho MQTT C..." && \
    cd /tmp && git clone --depth 1 --branch v1.3.13 https://github.com/eclipse/paho.mqtt.c.git && \
    cd paho.mqtt.c && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DPAHO_WITH_SSL=TRUE -DPAHO_BUILD_DOCUMENTATION=FALSE && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/paho.mqtt.c && echo "✅ Paho MQTT C installed"

# 3-1. Paho MQTT C++ 설치
RUN echo "🔧 Installing Paho MQTT C++..." && \
    cd /tmp && git clone --depth 1 --branch v1.3.2 https://github.com/eclipse/paho.mqtt.cpp.git && \
    cd paho.mqtt.cpp && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local \
             -DPAHO_WITH_SSL=TRUE \
             -DPAHO_BUILD_DOCUMENTATION=FALSE \
             -DPAHO_BUILD_SAMPLES=FALSE \
             -DPAHO_BUILD_TESTS=FALSE && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/paho.mqtt.cpp && echo "✅ Paho MQTT C++ installed"

# 4. nlohmann/json 설치 (소스에서 빌드)
RUN echo "🔧 Installing nlohmann/json..." && \
    cd /tmp && git clone --depth 1 --branch v3.11.3 https://github.com/nlohmann/json.git && \
    cd json && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DJSON_BuildTests=OFF && \
    make -j$(nproc) && make install && \
    cd / && rm -rf /tmp/json && echo "✅ nlohmann/json installed"

# 5. spdlog 설치 (로깅 라이브러리)
RUN echo "🔧 Installing spdlog..." && \
    cd /tmp && git clone --depth 1 --branch v1.12.0 https://github.com/gabime/spdlog.git && \
    cd spdlog && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DSPDLOG_BUILD_SHARED=ON && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/spdlog && echo "✅ spdlog installed"

# 🔥 6. BACnet Stack 정적 라이브러리 빌드 및 설치 (정확한 경로 적용)
# 실제로 성공한 방법과 정확히 동일하게 설치
RUN echo "🔧 Installing BACnet Stack with correct build method..." && \
    cd /tmp && \
    git clone --depth 1 https://github.com/bacnet-stack/bacnet-stack.git && \
    cd bacnet-stack && \
    \
    echo "🔨 Building BACnet library with correct parameters..." && \
    make BACNET_PORT=linux BACDL_DEFINE=-DBACDL_BIP=1 library && \
    \
    echo "📦 Installing BACnet library..." && \
    # 🔥 정확한 경로: apps/lib/libbacnet.a
    echo "🔍 라이브러리 위치 확인:" && \
    find . -name "libbacnet.a" -type f && \
    echo "✅ Found apps/lib/libbacnet.a - copying to /usr/local/lib/" && \
    cp apps/lib/libbacnet.a /usr/local/lib/ && \
    \
    echo "📂 Installing BACnet headers..." && \
    # 🔥 정확한 방법: src/bacnet 디렉토리 전체 복사
    cp -r src/bacnet /usr/local/include/ && \
    \
    echo "🔄 Updating library cache..." && \
    ldconfig && \
    \
    echo "🔍 설치 확인..." && \
    ls -la /usr/local/lib/libbacnet.a && \
    echo "📂 BACnet headers installed:" && \
    ls -la /usr/local/include/bacnet/ | head -10 && \
    echo "📊 라이브러리 크기:" && \
    du -h /usr/local/lib/libbacnet.a && \
    \
    echo "🧹 임시 파일 정리..." && \
    cd / && rm -rf /tmp/bacnet-stack && \
    echo "✅ BACnet Stack library and headers installed successfully"

# 7. BACnet pkg-config 파일 생성 (수정됨)
RUN echo "📝 Creating BACnet pkg-config file..." && \
    mkdir -p /usr/local/lib/pkgconfig && \
    cat > /usr/local/lib/pkgconfig/bacnet.pc << 'EOF'
prefix=/usr/local
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include

Name: BACnet Stack
Description: BACnet protocol library for building automation
Version: 1.0.0
Libs: -L${libdir} -lbacnet -lm
Cflags: -I${includedir} -DPRINT_ENABLED=1 -DBACAPP_ALL -DINTRINSIC_REPORTING
EOF

# 8. libmodbus pkg-config 파일 생성
RUN echo "📝 Creating other pkg-config files..." && \
    cat > /usr/local/lib/pkgconfig/libmodbus.pc << 'EOF'
prefix=/usr/local
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include

Name: libmodbus
Description: Modbus library
Version: 3.1.10
Libs: -L${libdir} -lmodbus
Cflags: -I${includedir}
EOF

# 9. Paho MQTT C++ pkg-config 파일 생성
RUN echo "📝 Creating Paho MQTT C++ pkg-config file..." && \
    cat > /usr/local/lib/pkgconfig/paho-mqttpp3.pc << 'EOF'
prefix=/usr/local
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include

Name: Paho MQTT C++
Description: Eclipse Paho MQTT C++ Client Library
Version: 1.3.2
Requires: paho-mqtt3c
Libs: -L${libdir} -lpaho-mqttpp3
Cflags: -I${includedir}
EOF

# 환경 변수 설정
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
ENV BACNET_PORT=linux
ENV BACDL_DEFINE="-DBACDL_BIP=1"

# 개발용 스크립트 생성 (BACnet 확인 개선)
RUN echo '#!/bin/bash' > /usr/local/bin/dev-build.sh && \
    echo 'echo "🔧 PulseOne Collector 개발 빌드"' >> /usr/local/bin/dev-build.sh && \
    echo 'cd /app/collector' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "📋 설치된 라이브러리 확인:"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  libmodbus: $(pkg-config --exists libmodbus && echo "✅ OK" || echo "❌ Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  BACnet lib: $(ls -la /usr/local/lib/libbacnet.a 2>/dev/null && echo "✅ Found" || echo "❌ Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  BACnet headers: $(ls -d /usr/local/include/bacnet 2>/dev/null && echo "✅ Found" || echo "❌ Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  Paho MQTT C: $(ls -la /usr/local/lib/libpaho-mqtt3c.so* 2>/dev/null && echo "✅ Found" || echo "❌ Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  Paho MQTT C++: $(ls -la /usr/local/lib/libpaho-mqttpp*.so* 2>/dev/null && echo "✅ Found" || echo "❌ Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo ""' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "🔨 빌드 시작:"' >> /usr/local/bin/dev-build.sh && \
    echo 'make clean && make debug' >> /usr/local/bin/dev-build.sh && \
    chmod +x /usr/local/bin/dev-build.sh

# BACnet 설치 확인 스크립트 (향상된 버전)
RUN echo '#!/bin/bash' > /usr/local/bin/check-bacnet.sh && \
    echo 'echo "🔍 BACnet 설치 확인:"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'echo ""' >> /usr/local/bin/check-bacnet.sh && \
    echo 'echo "📚 라이브러리 파일:"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'ls -la /usr/local/lib/libbacnet.a 2>/dev/null || echo "❌ libbacnet.a 없음"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'echo ""' >> /usr/local/bin/check-bacnet.sh && \
    echo 'echo "📂 헤더 디렉토리:"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'ls -la /usr/local/include/bacnet/ 2>/dev/null | head -10 || echo "❌ 헤더 디렉토리 없음"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'echo ""' >> /usr/local/bin/check-bacnet.sh && \
    echo 'echo "🔍 중요한 헤더 파일들:"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'for header in "bip.h" "datalink.h" "address.h" "bacdcode.h" "npdu.h" "apdu.h"; do' >> /usr/local/bin/check-bacnet.sh && \
    echo '  find /usr/local/include/bacnet -name "$header" 2>/dev/null && echo "✅ $header found" || echo "❌ $header missing"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'done' >> /usr/local/bin/check-bacnet.sh && \
    echo 'echo ""' >> /usr/local/bin/check-bacnet.sh && \
    echo 'echo "🧪 pkg-config 테스트:"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'pkg-config --cflags bacnet 2>/dev/null || echo "❌ pkg-config 설정 없음"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'pkg-config --libs bacnet 2>/dev/null || echo "❌ pkg-config 라이브러리 없음"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'echo ""' >> /usr/local/bin/check-bacnet.sh && \
    echo 'echo "🔍 라이브러리 심볼 확인 (nm 명령어):"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'nm /usr/local/lib/libbacnet.a | grep -E "(bip_init|bvlc_send_pdu|address_init)" | head -5 || echo "❌ 주요 심볼들 없음"' >> /usr/local/bin/check-bacnet.sh && \
    chmod +x /usr/local/bin/check-bacnet.sh

# BACnet 라이브러리 심볼 확인 스크립트 (실제 경험 반영)
RUN echo '#!/bin/bash' > /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'echo "🔍 BACnet 라이브러리 심볼 테스트:"' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'echo ""' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'echo "📊 라이브러리 정보:"' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'ls -la /usr/local/lib/libbacnet.a 2>/dev/null || echo "❌ libbacnet.a 없음"' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'du -h /usr/local/lib/libbacnet.a 2>/dev/null || echo "❌ 파일 크기 확인 불가"' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'echo ""' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'echo "📋 핵심 BACnet 함수들 확인:"' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'SYMBOLS=("bip_init" "bvlc_send_pdu" "bip_send_pdu" "address_init" "address_own_device_id_set" "bip_send_mpdu")' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'for symbol in "${SYMBOLS[@]}"; do' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo '  if nm /usr/local/lib/libbacnet.a 2>/dev/null | grep -q "T $symbol"; then' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo '    echo "✅ $symbol - Found"' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo '  else' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo '    echo "❌ $symbol - Missing"' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo '  fi' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'done' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'echo ""' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'echo "🔍 전체 심볼 개수:"' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'nm /usr/local/lib/libbacnet.a 2>/dev/null | grep "T " | wc -l || echo "❌ 심볼 읽기 실패"' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'echo ""' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'echo "🧪 실제 라이브러리 테스트 (간단한 컴파일):"' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'cat > /tmp/test_bacnet.c << "TESTEOF"' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo '#include <stdio.h>' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'extern int bip_init(char *ifname);' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'int main() {' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo '    printf("BACnet library linkage test passed\n");' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo '    return 0;' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo '}' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'TESTEOF' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'if gcc -o /tmp/test_bacnet /tmp/test_bacnet.c -lbacnet -lm 2>/dev/null; then' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo '  echo "✅ BACnet 라이브러리 링킹 성공"' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo '  /tmp/test_bacnet 2>/dev/null && echo "✅ 실행 테스트 성공"' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'else' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo '  echo "❌ BACnet 라이브러리 링킹 실패"' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'fi' >> /usr/local/bin/test-bacnet-symbols.sh && \
    echo 'rm -f /tmp/test_bacnet /tmp/test_bacnet.c 2>/dev/null' >> /usr/local/bin/test-bacnet-symbols.sh && \
    chmod +x /usr/local/bin/test-bacnet-symbols.sh

# Bash 프롬프트 개선 및 개발 환경 메시지
RUN echo 'export PS1="\[\033[01;32m\]\u@collector-dev\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ "' >> /root/.bashrc && \
    echo 'echo "🚀 PulseOne Collector Development Environment Ready!"' >> /root/.bashrc && \
    echo 'echo "📋 설치된 라이브러리들:"' >> /root/.bashrc && \
    echo 'echo "  - libmodbus (Modbus 통신)"' >> /root/.bashrc && \
    echo 'echo "  - Paho MQTT C (MQTT 통신 - C)"' >> /root/.bashrc && \
    echo 'echo "  - Paho MQTT C++ (MQTT 통신 - C++)"' >> /root/.bashrc && \
    echo 'echo "  - BACnet Stack (BACnet 통신)"' >> /root/.bashrc && \
    echo 'echo "  - hiredis (Redis 클라이언트)"' >> /root/.bashrc && \
    echo 'echo "  - nlohmann/json (JSON 파싱)"' >> /root/.bashrc && \
    echo 'echo "  - spdlog (로깅)"' >> /root/.bashrc && \
    echo 'echo ""' >> /root/.bashrc && \
    echo 'echo "🔧 유용한 명령어들:"' >> /root/.bashrc && \
    echo 'echo "  dev-build.sh           - 개발 빌드"' >> /root/.bashrc && \
    echo 'echo "  check-bacnet.sh        - BACnet 설치 확인"' >> /root/.bashrc && \
    echo 'echo "  test-bacnet-symbols.sh - BACnet 심볼 테스트"' >> /root/.bashrc && \
    echo 'echo "  make help              - Makefile 도움말"' >> /root/.bashrc && \
    echo 'echo ""' >> /root/.bashrc

# 환경 변수 설정
ENV CC=gcc CXX=g++
ENV CFLAGS="-std=c11 -Wall -Wextra"
ENV CXXFLAGS="-std=c++17 -Wall -Wextra"

# 작업 디렉토리 설정
WORKDIR /app

# 기본 명령어
CMD ["/bin/bash"]

# 빌드 완료 후 최종 확인
RUN echo "🎉 Docker 이미지 빌드 완료!" && \
    echo "📋 최종 확인:" && \
    echo "  BACnet 라이브러리:" && \
    ls -la /usr/local/lib/libbacnet.a 2>/dev/null && \
    echo "  BACnet 헤더 파일 개수:" && \
    find /usr/local/include/bacnet -name "*.h" 2>/dev/null | wc -l && \
    echo "  MQTT C++ 헤더 확인:" && \
    find /usr/local/include -name "async_client.h" 2>/dev/null | wc -l && \
    echo "✅ 모든 라이브러리 설치 완료 (BACnet 라이브러리 수정됨)"