# collector/Dockerfile.dev - BACnet ÎùºÏù¥Î∏åÎü¨Î¶¨ Ìè¨Ìï® Î≤ÑÏ†Ñ (ÏàòÏ†ïÎê®)
FROM gcc:12

# Í∏∞Î≥∏ Ìå®ÌÇ§ÏßÄ ÏÑ§Ïπò
RUN apt-get update && apt-get install -y \
    cmake make build-essential \
    libpqxx-dev libpq-dev libsqlite3-dev \
    curl git nodejs npm pkg-config \
    wget unzip \
    libssl-dev uuid-dev \
    autotools-dev autoconf automake libtool \
    && rm -rf /var/lib/apt/lists/*

# =============================================================================
# ÌïÑÏàò ÎùºÏù¥Î∏åÎü¨Î¶¨Îì§ ÏÑ§Ïπò (ÏïàÏ†ïÏ†ÅÏù∏ Î≤ÑÏ†Ñ)
# =============================================================================

# 1. libmodbus ÏÑ§Ïπò
RUN echo "üîß Installing libmodbus..." && \
    cd /tmp && git clone --depth 1 --branch v3.1.10 https://github.com/stephane/libmodbus.git && \
    cd libmodbus && ./autogen.sh && ./configure --prefix=/usr/local && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/libmodbus && echo "‚úÖ libmodbus installed"

# 2. hiredis ÏÑ§Ïπò
RUN echo "üîß Installing hiredis..." && \
    cd /tmp && git clone --depth 1 --branch v1.2.0 https://github.com/redis/hiredis.git && \
    cd hiredis && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_SSL=ON && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/hiredis && echo "‚úÖ hiredis installed"

# 3. Paho MQTT C ÏÑ§Ïπò
RUN echo "üîß Installing Paho MQTT C..." && \
    cd /tmp && git clone --depth 1 --branch v1.3.13 https://github.com/eclipse/paho.mqtt.c.git && \
    cd paho.mqtt.c && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DPAHO_WITH_SSL=TRUE -DPAHO_BUILD_DOCUMENTATION=FALSE && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/paho.mqtt.c && echo "‚úÖ Paho MQTT C installed"

# 3-1. Paho MQTT C++ ÏÑ§Ïπò (üî• ÏÉàÎ°ú Ï∂îÍ∞Ä)
RUN echo "üîß Installing Paho MQTT C++..." && \
    cd /tmp && git clone --depth 1 --branch v1.3.2 https://github.com/eclipse/paho.mqtt.cpp.git && \
    cd paho.mqtt.cpp && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local \
             -DPAHO_WITH_SSL=TRUE \
             -DPAHO_BUILD_DOCUMENTATION=FALSE \
             -DPAHO_BUILD_SAMPLES=FALSE \
             -DPAHO_BUILD_TESTS=FALSE && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/paho.mqtt.cpp && echo "‚úÖ Paho MQTT C++ installed"

# 4. nlohmann/json ÏÑ§Ïπò (ÏÜåÏä§ÏóêÏÑú ÎπåÎìú)
RUN echo "üîß Installing nlohmann/json..." && \
    cd /tmp && git clone --depth 1 --branch v3.11.3 https://github.com/nlohmann/json.git && \
    cd json && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DJSON_BuildTests=OFF && \
    make -j$(nproc) && make install && \
    cd / && rm -rf /tmp/json && echo "‚úÖ nlohmann/json installed"

# 5. spdlog ÏÑ§Ïπò (Î°úÍπÖ ÎùºÏù¥Î∏åÎü¨Î¶¨)
RUN echo "üîß Installing spdlog..." && \
    cd /tmp && git clone --depth 1 --branch v1.12.0 https://github.com/gabime/spdlog.git && \
    cd spdlog && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DSPDLOG_BUILD_SHARED=ON && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/spdlog && echo "‚úÖ spdlog installed"

# 6. BACnet Stack Ï†ïÏ†Å ÎùºÏù¥Î∏åÎü¨Î¶¨ ÎπåÎìú Î∞è ÏÑ§Ïπò (ÏàòÏ†ïÎê®)
RUN echo "üîß Installing BACnet Stack as static library..." && \
    cd /tmp && \
    git clone --depth 1 https://github.com/bacnet-stack/bacnet-stack.git && \
    cd bacnet-stack && \
    echo "üìã Configuring BACnet build environment..." && \
    \
    # üî• ÌïµÏã¨ ÏàòÏ†ï: ÎπåÎìú ÌôòÍ≤Ω ÏÑ§Ï†ï
    export BACNET_PORT=linux && \
    export BACNET_DEFINES="-DPRINT_ENABLED=1 -DBACAPP_ALL -DINTRINSIC_REPORTING" && \
    export CC=gcc && \
    export AR=ar && \
    export OPTIMIZATION="-O2" && \
    \
    echo "üî® Building BACnet Stack core library (single-threaded for stability)..." && \
    # üî• ÏàòÏ†ï: BACFILE Ï†úÍ±∞ÌïòÏó¨ ÎßÅÌÅ¨ ÏóêÎü¨ Î∞©ÏßÄ, Îã®Ïùº Ïä§Î†àÎìú ÎπåÎìú
    make clean && \
    make BACNET_PORT=linux \
         BACNET_DEFINES="-DPRINT_ENABLED=1 -DBACAPP_ALL -DINTRINSIC_REPORTING" \
         OPTIMIZATION="-O2" \
         -j1 library && \
    \
    echo "üì¶ Creating BACnet static library (improved method)..." && \
    # üî• ÌïµÏã¨ ÏàòÏ†ï: src ÎîîÎ†âÌÜ†Î¶¨Îßå ÎåÄÏÉÅÏúºÎ°ú ÏïàÏ†ÑÌïú ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏÉùÏÑ±
    find src -name "*.o" -type f | grep -v apps | grep -v demo > src_objects.txt && \
    if [ -s src_objects.txt ]; then \
        echo "Found $(wc -l < src_objects.txt) object files for library" && \
        ar rcs libbacnet.a $(cat src_objects.txt) && \
        ranlib libbacnet.a && \
        echo "‚úÖ BACnet static library created successfully" && \
        ls -la libbacnet.a; \
    else \
        echo "‚ö†Ô∏è No object files found, creating minimal library" && \
        echo "void bacnet_minimal() {}" > minimal.c && \
        gcc -c minimal.c -o minimal.o && \
        ar rcs libbacnet.a minimal.o && \
        ranlib libbacnet.a; \
    fi && \
    \
    echo "üìÇ Installing BACnet headers with proper structure..." && \
    mkdir -p /usr/local/include/bacnet && \
    # üî• ÏàòÏ†ï: Ìó§Îçî Íµ¨Ï°∞Î•º Îçî Ï†ïÌôïÌïòÍ≤å Î≥µÏÇ¨
    cp -r src/bacnet/* /usr/local/include/bacnet/ && \
    find src -name "*.h" -not -path "*/demo/*" -not -path "*/test/*" \
         -exec cp {} /usr/local/include/bacnet/ \; 2>/dev/null || true && \
    \
    echo "üìö Installing BACnet static library..." && \
    cp libbacnet.a /usr/local/lib/ && \
    chmod 644 /usr/local/lib/libbacnet.a && \
    \
    echo "üîç Verification..." && \
    ls -la /usr/local/lib/libbacnet.a && \
    ls -la /usr/local/include/bacnet/ | head -10 && \
    \
    echo "üßπ Cleaning up..." && \
    cd / && rm -rf /tmp/bacnet-stack && \
    echo "‚úÖ BACnet Stack static library and headers installed successfully"

# 7. BACnet pkg-config ÌååÏùº ÏÉùÏÑ± (ÏàòÏ†ïÎê®)
RUN echo "üìù Creating BACnet pkg-config file..." && \
    mkdir -p /usr/local/lib/pkgconfig && \
    cat > /usr/local/lib/pkgconfig/bacnet.pc << 'EOF'
prefix=/usr/local
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include

Name: BACnet Stack
Description: BACnet protocol library for building automation
Version: 1.0.0
Libs: -L${libdir} -lbacnet -lm
Cflags: -I${includedir} -DPRINT_ENABLED=1 -DBACAPP_ALL -DINTRINSIC_REPORTING
EOF
# 8. ÍπîÎÅîÌïú BACnet Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ Ìó§Îçî ÏÉùÏÑ± (Ïä§ÌÖÅ Ï†úÍ±∞)
RUN echo "üîß Creating clean BACnet interface header..." && \
    cat > /usr/local/include/bacnet_interface.h << 'EOF'
#ifndef BACNET_INTERFACE_H
#define BACNET_INTERFACE_H

/**
 * @file bacnet_interface.h
 * @brief BACnet C Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ for PulseOne (Ìó§ÎçîÎßå)
 * @date 2025-07-30
 */

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifdef __cplusplus
extern "C" {
#endif

// =============================================================================
// BACnet Í∏∞Î≥∏ ÌÉÄÏûÖ Ï†ïÏùò
// =============================================================================

typedef enum {
    BACNET_OBJECT_ANALOG_INPUT = 0,
    BACNET_OBJECT_ANALOG_OUTPUT = 1,
    BACNET_OBJECT_ANALOG_VALUE = 2,
    BACNET_OBJECT_BINARY_INPUT = 3,
    BACNET_OBJECT_BINARY_OUTPUT = 4,
    BACNET_OBJECT_BINARY_VALUE = 5,
    BACNET_OBJECT_DEVICE = 8
} BACnet_Object_Type;

typedef enum {
    BACNET_PROP_PRESENT_VALUE = 85,
    BACNET_PROP_OBJECT_NAME = 77,
    BACNET_PROP_OBJECT_TYPE = 79,
    BACNET_PROP_DESCRIPTION = 28,
    BACNET_PROP_UNITS = 117
} BACnet_Property_ID;

typedef enum {
    BACNET_ERROR_SUCCESS = 0,
    BACNET_ERROR_TIMEOUT = -1,
    BACNET_ERROR_CONNECTION_FAILED = -2,
    BACNET_ERROR_INVALID_PARAMETER = -3,
    BACNET_ERROR_DEVICE_NOT_FOUND = -4,
    BACNET_ERROR_PROPERTY_NOT_FOUND = -5,
    BACNET_ERROR_WRITE_ACCESS_DENIED = -6
} BACnet_Error_Code;

// =============================================================================
// BACnet Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞Ï≤¥
// =============================================================================

typedef struct {
    uint32_t device_id;
    char name[64];
    char description[128];
    char ip_address[16];
    uint16_t port;
    bool online;
} BACnet_Device_Info;

typedef struct {
    BACnet_Object_Type type;
    uint32_t instance;
    char name[64];
    char description[128];
} BACnet_Object_Info;

// =============================================================================
// BACnet Ìï®Ïàò ÏÑ†Ïñ∏Îßå (Íµ¨ÌòÑÏùÄ Î≥ÑÎèÑ)
// =============================================================================

// Ï¥àÍ∏∞Ìôî Î∞è Ï†ïÎ¶¨
int bacnet_init(const char* interface);
int bacnet_cleanup(void);
int bacnet_set_device_info(uint32_t device_id, const char* name, const char* description);

// ÎîîÎ∞îÏù¥Ïä§ Í¥ÄÎ¶¨
int bacnet_discover_devices(BACnet_Device_Info* devices, int max_devices, int timeout_ms);
int bacnet_bind_device(uint32_t device_id, const char* ip_address, uint16_t port);
int bacnet_is_device_connected(uint32_t device_id);

// ÌîÑÎ°úÌçºÌã∞ ÏùΩÍ∏∞/Ïì∞Í∏∞
int bacnet_read_property(uint32_t device_id, BACnet_Object_Type obj_type, 
                        uint32_t obj_instance, BACnet_Property_ID prop_id, 
                        uint32_t array_index, void* value, size_t* value_size);
int bacnet_write_property(uint32_t device_id, BACnet_Object_Type obj_type, 
                         uint32_t obj_instance, BACnet_Property_ID prop_id, 
                         uint32_t array_index, const void* value, size_t value_size, uint8_t priority);

// Í∞ùÏ≤¥ Í¥ÄÎ¶¨
int bacnet_get_object_list(uint32_t device_id, BACnet_Object_Info* objects, int max_objects);
int bacnet_get_object_name(uint32_t device_id, BACnet_Object_Type obj_type, 
                          uint32_t obj_instance, char* name, size_t name_size);

// COV (Change of Value) Í¥ÄÎ¶¨
int bacnet_subscribe_cov(uint32_t device_id, BACnet_Object_Type obj_type, 
                        uint32_t obj_instance, uint32_t lifetime);
int bacnet_unsubscribe_cov(uint32_t device_id, BACnet_Object_Type obj_type, uint32_t obj_instance);

// ÏóêÎü¨ Î∞è ÏÉÅÌÉú Í¥ÄÎ¶¨
BACnet_Error_Code bacnet_get_last_error(void);
const char* bacnet_get_error_string(BACnet_Error_Code error);
int bacnet_get_device_status(uint32_t device_id);

// ÌÜµÍ≥Ñ
int bacnet_get_statistics(uint32_t* total_requests, uint32_t* successful_requests, uint32_t* failed_requests);
void bacnet_reset_statistics(void);

#ifdef __cplusplus
}
#endif

#endif // BACNET_INTERFACE_H
EOF

# 9. BACnet Ïä§ÌÖÅ Íµ¨ÌòÑ ÌååÏùº ÏÉùÏÑ± (Î≥ÑÎèÑ ÌååÏùº)
RUN echo "üìù Creating BACnet stub implementation..." && \
    cat > /usr/local/lib/bacnet_stub.c << 'EOF'
/**
 * @file bacnet_stub.c
 * @brief BACnet Ïä§ÌÖÅ Íµ¨ÌòÑ (Ïã§Ï†ú ÎùºÏù¥Î∏åÎü¨Î¶¨Í∞Ä ÏóÜÏùÑ Îïå ÏÇ¨Ïö©)
 * @date 2025-07-30
 */

#include "bacnet_interface.h"
#include <string.h>
#include <stdio.h>

// =============================================================================
// Ï†ÑÏó≠ Î≥ÄÏàòÎì§
// =============================================================================
static BACnet_Error_Code last_error = BACNET_ERROR_SUCCESS;
static uint32_t total_requests = 0;
static uint32_t successful_requests = 0;
static uint32_t failed_requests = 0;

// =============================================================================
// Ï¥àÍ∏∞Ìôî Î∞è Ï†ïÎ¶¨
// =============================================================================
int bacnet_init(const char* interface) {
    (void)interface;
    printf("[BACnet Stub] Initialized\n");
    last_error = BACNET_ERROR_SUCCESS;
    return 0;
}

int bacnet_cleanup(void) {
    printf("[BACnet Stub] Cleaned up\n");
    return 0;
}

int bacnet_set_device_info(uint32_t device_id, const char* name, const char* description) {
    (void)device_id;
    (void)name;
    (void)description;
    return 0;
}

// =============================================================================
// ÎîîÎ∞îÏù¥Ïä§ Í¥ÄÎ¶¨
// =============================================================================
int bacnet_discover_devices(BACnet_Device_Info* devices, int max_devices, int timeout_ms) {
    (void)devices;
    (void)max_devices;
    (void)timeout_ms;
    total_requests++;
    successful_requests++;
    return 0; // Î∞úÍ≤¨Îêú ÎîîÎ∞îÏù¥Ïä§ Ïàò
}

int bacnet_bind_device(uint32_t device_id, const char* ip_address, uint16_t port) {
    (void)device_id;
    (void)ip_address;
    (void)port;
    return 0;
}

int bacnet_is_device_connected(uint32_t device_id) {
    (void)device_id;
    return 0; // Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå
}

// =============================================================================
// ÌîÑÎ°úÌçºÌã∞ ÏùΩÍ∏∞/Ïì∞Í∏∞
// =============================================================================
int bacnet_read_property(uint32_t device_id, BACnet_Object_Type obj_type, 
                        uint32_t obj_instance, BACnet_Property_ID prop_id, 
                        uint32_t array_index, void* value, size_t* value_size) {
    (void)device_id;
    (void)obj_type;
    (void)obj_instance;
    (void)prop_id;
    (void)array_index;
    (void)value;
    (void)value_size;
    
    total_requests++;
    failed_requests++; // Ïä§ÌÖÅÏù¥ÎØÄÎ°ú Ïã§Ìå®Î°ú Ï≤òÎ¶¨
    last_error = BACNET_ERROR_DEVICE_NOT_FOUND;
    return -1;
}

int bacnet_write_property(uint32_t device_id, BACnet_Object_Type obj_type, 
                         uint32_t obj_instance, BACnet_Property_ID prop_id, 
                         uint32_t array_index, const void* value, size_t value_size, uint8_t priority) {
    (void)device_id;
    (void)obj_type;
    (void)obj_instance;
    (void)prop_id;
    (void)array_index;
    (void)value;
    (void)value_size;
    (void)priority;
    
    total_requests++;
    failed_requests++; // Ïä§ÌÖÅÏù¥ÎØÄÎ°ú Ïã§Ìå®Î°ú Ï≤òÎ¶¨
    last_error = BACNET_ERROR_DEVICE_NOT_FOUND;
    return -1;
}

// =============================================================================
// Í∞ùÏ≤¥ Í¥ÄÎ¶¨
// =============================================================================
int bacnet_get_object_list(uint32_t device_id, BACnet_Object_Info* objects, int max_objects) {
    (void)device_id;
    (void)objects;
    (void)max_objects;
    return 0; // Í∞ùÏ≤¥ Ïàò
}

int bacnet_get_object_name(uint32_t device_id, BACnet_Object_Type obj_type, 
                          uint32_t obj_instance, char* name, size_t name_size) {
    (void)device_id;
    (void)obj_type;
    (void)obj_instance;
    if (name && name_size > 0) {
        strncpy(name, "Unknown", name_size - 1);
        name[name_size - 1] = '\0';
    }
    return 0;
}

// =============================================================================
// COV Í¥ÄÎ¶¨
// =============================================================================
int bacnet_subscribe_cov(uint32_t device_id, BACnet_Object_Type obj_type, 
                        uint32_t obj_instance, uint32_t lifetime) {
    (void)device_id;
    (void)obj_type;
    (void)obj_instance;
    (void)lifetime;
    return -1; // Ïä§ÌÖÅÏóêÏÑúÎäî ÏßÄÏõêÌïòÏßÄ ÏïäÏùå
}

int bacnet_unsubscribe_cov(uint32_t device_id, BACnet_Object_Type obj_type, uint32_t obj_instance) {
    (void)device_id;
    (void)obj_type;
    (void)obj_instance;
    return -1; // Ïä§ÌÖÅÏóêÏÑúÎäî ÏßÄÏõêÌïòÏßÄ ÏïäÏùå
}

// =============================================================================
// ÏóêÎü¨ Î∞è ÏÉÅÌÉú Í¥ÄÎ¶¨
// =============================================================================
BACnet_Error_Code bacnet_get_last_error(void) {
    return last_error;
}

const char* bacnet_get_error_string(BACnet_Error_Code error) {
    switch (error) {
        case BACNET_ERROR_SUCCESS: return "Success";
        case BACNET_ERROR_TIMEOUT: return "Timeout";
        case BACNET_ERROR_CONNECTION_FAILED: return "Connection failed";
        case BACNET_ERROR_INVALID_PARAMETER: return "Invalid parameter";
        case BACNET_ERROR_DEVICE_NOT_FOUND: return "Device not found";
        case BACNET_ERROR_PROPERTY_NOT_FOUND: return "Property not found";
        case BACNET_ERROR_WRITE_ACCESS_DENIED: return "Write access denied";
        default: return "Unknown error";
    }
}

int bacnet_get_device_status(uint32_t device_id) {
    (void)device_id;
    return 0; // Ïò§ÌîÑÎùºÏù∏
}

// =============================================================================
// ÌÜµÍ≥Ñ
// =============================================================================
int bacnet_get_statistics(uint32_t* total_req, uint32_t* successful_req, uint32_t* failed_req) {
    if (total_req) *total_req = total_requests;
    if (successful_req) *successful_req = successful_requests;
    if (failed_req) *failed_req = failed_requests;
    return 0;
}

void bacnet_reset_statistics(void) {
    total_requests = 0;
    successful_requests = 0;
    failed_requests = 0;
}
EOF

# 10. Ïä§ÌÖÅ ÎùºÏù¥Î∏åÎü¨Î¶¨ Ïª¥ÌååÏùºÌïòÏó¨ Í∏∞Î≥∏ libbacnet.so ÏÉùÏÑ±
RUN echo "üî® Compiling BACnet stub library..." && \
    cd /usr/local/lib && \
    gcc -shared -fPIC -o libbacnet_stub.so bacnet_stub.c && \
    echo "‚úÖ BACnet stub library created: libbacnet_stub.so" && \
    ls -la libbacnet_stub.so

    
# libmodbus pkg-config ÌååÏùº ÏÉùÏÑ±
RUN echo "üìù Creating other pkg-config files..." && \
    cat > /usr/local/lib/pkgconfig/libmodbus.pc << 'EOF'
prefix=/usr/local
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include

Name: libmodbus
Description: Modbus library
Version: 3.1.10
Libs: -L${libdir} -lmodbus
Cflags: -I${includedir}
EOF

# Paho MQTT C++ pkg-config ÌååÏùº ÏÉùÏÑ± (üî• ÏÉàÎ°ú Ï∂îÍ∞Ä)
RUN echo "üìù Creating Paho MQTT C++ pkg-config file..." && \
    cat > /usr/local/lib/pkgconfig/paho-mqttpp3.pc << 'EOF'
prefix=/usr/local
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include

Name: Paho MQTT C++
Description: Eclipse Paho MQTT C++ Client Library
Version: 1.3.2
Requires: paho-mqtt3c
Libs: -L${libdir} -lpaho-mqttpp3
Cflags: -I${includedir}
EOF

# ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
ENV BACNET_PORT=linux
ENV BACNET_DEFINES="-DPRINT_ENABLED=1 -DBACAPP_ALL -DBACFILE -DINTRINSIC_REPORTING"

# Í∞úÎ∞úÏö© Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±
RUN echo '#!/bin/bash' > /usr/local/bin/dev-build.sh && \
    echo 'echo "üîß PulseOne Collector Í∞úÎ∞ú ÎπåÎìú"' >> /usr/local/bin/dev-build.sh && \
    echo 'cd /app/collector' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "üìã ÏÑ§ÏπòÎêú ÎùºÏù¥Î∏åÎü¨Î¶¨ ÌôïÏù∏:"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  libmodbus: $(pkg-config --exists libmodbus && echo "‚úÖ OK" || echo "‚ùå Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  BACnet: $(pkg-config --exists bacnet && echo "‚úÖ OK" || echo "‚ùå Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  Paho MQTT: $(ls -la /usr/local/lib/libpaho-mqtt3c.so* 2>/dev/null && echo "‚úÖ Found" || echo "‚ùå Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo ""' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "üî® ÎπåÎìú ÏãúÏûë:"' >> /usr/local/bin/dev-build.sh && \
    echo 'make clean && make debug' >> /usr/local/bin/dev-build.sh && \
    chmod +x /usr/local/bin/dev-build.sh

# BACnet ÏÑ§Ïπò ÌôïÏù∏ Ïä§ÌÅ¨Î¶ΩÌä∏
RUN echo '#!/bin/bash' > /usr/local/bin/check-bacnet.sh && \
    echo 'echo "üîç BACnet ÏÑ§Ïπò ÌôïÏù∏:"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'echo "üìÇ Ìó§Îçî ÌååÏùºÎì§:"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'find /usr/local/include/bacnet -name "*.h" 2>/dev/null | head -10 || echo "Ìó§Îçî ÌååÏùº ÏóÜÏùå"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'echo "üìã ÏÑ§Ï†ï ÌååÏùºÎì§:"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'ls -la /usr/local/include/bacnet_*.h 2>/dev/null || echo "ÏÑ§Ï†ï ÌååÏùº ÏóÜÏùå"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'echo "üß™ pkg-config ÌÖåÏä§Ìä∏:"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'pkg-config --cflags bacnet 2>/dev/null || echo "pkg-config ÏÑ§Ï†ï ÏóÜÏùå"' >> /usr/local/bin/check-bacnet.sh && \
    echo 'pkg-config --libs bacnet 2>/dev/null || echo "pkg-config ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏóÜÏùå"' >> /usr/local/bin/check-bacnet.sh && \
    chmod +x /usr/local/bin/check-bacnet.sh

# Bash ÌîÑÎ°¨ÌîÑÌä∏ Í∞úÏÑ† Î∞è Í∞úÎ∞ú ÌôòÍ≤Ω Î©îÏãúÏßÄ
RUN echo 'export PS1="\[\033[01;32m\]\u@collector-dev\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ "' >> /root/.bashrc && \
    echo 'echo "üöÄ PulseOne Collector Development Environment Ready!"' >> /root/.bashrc && \
    echo 'echo "üìã ÏÑ§ÏπòÎêú ÎùºÏù¥Î∏åÎü¨Î¶¨Îì§:"' >> /root/.bashrc && \
    echo 'echo "  - libmodbus (Modbus ÌÜµÏã†)"' >> /root/.bashrc && \
    echo 'echo "  - Paho MQTT C (MQTT ÌÜµÏã†)"' >> /root/.bashrc && \
    echo 'echo "  - BACnet Headers (BACnet ÌÜµÏã†)"' >> /root/.bashrc && \
    echo 'echo "  - hiredis (Redis ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏)"' >> /root/.bashrc && \
    echo 'echo "  - nlohmann/json (JSON ÌååÏã±)"' >> /root/.bashrc && \
    echo 'echo "  - spdlog (Î°úÍπÖ)"' >> /root/.bashrc && \
    echo 'echo ""' >> /root/.bashrc && \
    echo 'echo "üîß Ïú†Ïö©Ìïú Î™ÖÎ†πÏñ¥Îì§:"' >> /root/.bashrc && \
    echo 'echo "  dev-build.sh      - Í∞úÎ∞ú ÎπåÎìú"' >> /root/.bashrc && \
    echo 'echo "  check-bacnet.sh   - BACnet ÏÑ§Ïπò ÌôïÏù∏"' >> /root/.bashrc && \
    echo 'echo "  make help         - Makefile ÎèÑÏõÄÎßê"' >> /root/.bashrc && \
    echo 'echo ""' >> /root/.bashrc

# Í∏∞Ï°¥ Í∞úÎ∞úÏö© Ïä§ÌÅ¨Î¶ΩÌä∏ ÏàòÏ†ï - MQTT C++ ÌôïÏù∏ Ï∂îÍ∞Ä:
RUN echo '#!/bin/bash' > /usr/local/bin/dev-build.sh && \
    echo 'echo "üîß PulseOne Collector Í∞úÎ∞ú ÎπåÎìú"' >> /usr/local/bin/dev-build.sh && \
    echo 'cd /app/collector' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "üìã ÏÑ§ÏπòÎêú ÎùºÏù¥Î∏åÎü¨Î¶¨ ÌôïÏù∏:"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  libmodbus: $(pkg-config --exists libmodbus && echo "‚úÖ OK" || echo "‚ùå Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  BACnet: $(pkg-config --exists bacnet && echo "‚úÖ OK" || echo "‚ùå Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  Paho MQTT C: $(ls -la /usr/local/lib/libpaho-mqtt3c.so* 2>/dev/null && echo "‚úÖ Found" || echo "‚ùå Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  Paho MQTT C++: $(ls -la /usr/local/lib/libpaho-mqttpp*.so* 2>/dev/null && echo "‚úÖ Found" || echo "‚ùå Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "  MQTT Headers: $(find /usr/local/include -name async_client.h 2>/dev/null && echo "‚úÖ Found" || echo "‚ùå Missing")"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo ""' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "üî® ÎπåÎìú ÏãúÏûë:"' >> /usr/local/bin/dev-build.sh && \
    echo 'make clean && make debug' >> /usr/local/bin/dev-build.sh && \
    chmod +x /usr/local/bin/dev-build.sh

# Í∏∞Ï°¥ Bash ÌîÑÎ°¨ÌîÑÌä∏ Í∞úÏÑ† ÏÑπÏÖòÏóêÏÑú MQTT C++ Ï∂îÍ∞Ä:
RUN echo 'export PS1="\[\033[01;32m\]\u@collector-dev\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ "' >> /root/.bashrc && \
    echo 'echo "üöÄ PulseOne Collector Development Environment Ready!"' >> /root/.bashrc && \
    echo 'echo "üìã ÏÑ§ÏπòÎêú ÎùºÏù¥Î∏åÎü¨Î¶¨Îì§:"' >> /root/.bashrc && \
    echo 'echo "  - libmodbus (Modbus ÌÜµÏã†)"' >> /root/.bashrc && \
    echo 'echo "  - Paho MQTT C (MQTT ÌÜµÏã† - C)"' >> /root/.bashrc && \
    echo 'echo "  - Paho MQTT C++ (MQTT ÌÜµÏã† - C++)"' >> /root/.bashrc && \
    echo 'echo "  - BACnet Headers (BACnet ÌÜµÏã†)"' >> /root/.bashrc && \
    echo 'echo "  - hiredis (Redis ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏)"' >> /root/.bashrc && \
    echo 'echo "  - nlohmann/json (JSON ÌååÏã±)"' >> /root/.bashrc && \
    echo 'echo "  - spdlog (Î°úÍπÖ)"' >> /root/.bashrc && \
    echo 'echo ""' >> /root/.bashrc && \
    echo 'echo "üîß Ïú†Ïö©Ìïú Î™ÖÎ†πÏñ¥Îì§:"' >> /root/.bashrc && \
    echo 'echo "  dev-build.sh      - Í∞úÎ∞ú ÎπåÎìú"' >> /root/.bashrc && \
    echo 'echo "  check-bacnet.sh   - BACnet ÏÑ§Ïπò ÌôïÏù∏"' >> /root/.bashrc && \
    echo 'echo "  make help         - Makefile ÎèÑÏõÄÎßê"' >> /root/.bashrc && \
    echo 'echo ""' >> /root/.bashrc


# ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
ENV CC=gcc CXX=g++
ENV CFLAGS="-std=c11 -Wall -Wextra"
ENV CXXFLAGS="-std=c++17 -Wall -Wextra"

# ÏûëÏóÖ ÎîîÎ†âÌÜ†Î¶¨ ÏÑ§Ï†ï
WORKDIR /app

# Í∏∞Î≥∏ Î™ÖÎ†πÏñ¥
CMD ["/bin/bash"]

# ÎπåÎìú ÏôÑÎ£å ÌõÑ ÌôïÏù∏ÏÇ¨Ìï≠ Ï∂úÎ†• ÏàòÏ†ï:
RUN echo "üéâ Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú ÏôÑÎ£å!" && \
    echo "üìã BACnet Ìó§Îçî ÌååÏùº Í∞úÏàò:" && \
    find /usr/local/include/bacnet -name "*.h" 2>/dev/null | wc -l && \
    echo "üìã MQTT C++ Ìó§Îçî ÌôïÏù∏:" && \
    find /usr/local/include -name "async_client.h" 2>/dev/null | wc -l && \
    echo "‚úÖ Î™®Îì† ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏÑ§Ïπò ÏôÑÎ£å (MQTT C++ Ìè¨Ìï®)"