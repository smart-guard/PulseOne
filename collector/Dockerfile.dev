# collector/Dockerfile.dev - 수정된 버전
FROM gcc:latest

# 기본 패키지 설치
RUN apt-get update && apt-get install -y \
    cmake make build-essential \
    libpqxx-dev libpq-dev libsqlite3-dev \
    curl git nodejs npm pkg-config \
    wget unzip \
    libssl-dev uuid-dev \
    && rm -rf /var/lib/apt/lists/*

# =============================================================================
# 필수 라이브러리들만 설치 (안정적인 버전)
# =============================================================================

# 1. libmodbus 설치
RUN echo "🔧 Installing libmodbus..." && \
    cd /tmp && git clone --depth 1 --branch v3.1.10 https://github.com/stephane/libmodbus.git && \
    cd libmodbus && ./autogen.sh && ./configure --prefix=/usr/local && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/libmodbus && echo "✅ libmodbus installed"

# 2. hiredis 설치
RUN echo "🔧 Installing hiredis..." && \
    cd /tmp && git clone --depth 1 --branch v1.2.0 https://github.com/redis/hiredis.git && \
    cd hiredis && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_SSL=ON && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/hiredis && echo "✅ hiredis installed"

# 3. Paho MQTT C 설치
RUN echo "🔧 Installing Paho MQTT C..." && \
    cd /tmp && git clone --depth 1 --branch v1.3.13 https://github.com/eclipse/paho.mqtt.c.git && \
    cd paho.mqtt.c && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DPAHO_WITH_SSL=TRUE -DPAHO_BUILD_DOCUMENTATION=FALSE && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/paho.mqtt.c && echo "✅ Paho MQTT C installed"

# 4. nlohmann/json 설치 (소스에서 빌드)
RUN echo "🔧 Installing nlohmann/json..." && \
    cd /tmp && git clone --depth 1 --branch v3.11.3 https://github.com/nlohmann/json.git && \
    cd json && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DJSON_BuildTests=OFF && \
    make -j$(nproc) && make install && \
    cd / && rm -rf /tmp/json && echo "✅ nlohmann/json installed"

# 5. spdlog 설치 (로깅 라이브러리)
RUN echo "🔧 Installing spdlog..." && \
    cd /tmp && git clone --depth 1 --branch v1.12.0 https://github.com/gabime/spdlog.git && \
    cd spdlog && mkdir -p build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DSPDLOG_BUILD_SHARED=ON && \
    make -j$(nproc) && make install && ldconfig && \
    cd / && rm -rf /tmp/spdlog && echo "✅ spdlog installed"

# 6. BACnet 헤더 파일들 (헤더만 설치)
RUN echo "🔧 Installing BACnet headers..." && \
    cd /tmp && git clone --depth 1 https://github.com/bacnet-stack/bacnet-stack.git && \
    mkdir -p /usr/local/include/bacnet && \
    find bacnet-stack -name "*.h" -exec cp {} /usr/local/include/bacnet/ \; 2>/dev/null || true && \
    cd / && rm -rf /tmp/bacnet-stack && echo "✅ BACnet headers installed"

# =============================================================================
# PKG-CONFIG 파일 생성 (라이브러리 찾기 도움)
# =============================================================================
RUN echo "📝 Creating pkg-config files..." && \
    # libmodbus
    cat > /usr/local/lib/pkgconfig/libmodbus.pc << 'EOF'
prefix=/usr/local
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include

Name: libmodbus
Description: Modbus library
Version: 3.1.10
Libs: -L${libdir} -lmodbus
Cflags: -I${includedir}
EOF

# 환경 변수 설정
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

# 작업 디렉토리 설정
WORKDIR /app

# 개발용 스크립트 추가
RUN echo '#!/bin/bash' > /usr/local/bin/dev-build.sh && \
    echo 'echo "🔧 PulseOne Collector 개발 빌드"' >> /usr/local/bin/dev-build.sh && \
    echo 'cd /app/collector' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "📋 라이브러리 확인:"' >> /usr/local/bin/dev-build.sh && \
    echo 'pkg-config --list-all | grep -E "(modbus|paho|hiredis)" || echo "  (pkg-config에서 확인 안됨)"' >> /usr/local/bin/dev-build.sh && \
    echo 'echo ""' >> /usr/local/bin/dev-build.sh && \
    echo 'echo "🔨 빌드 시작:"' >> /usr/local/bin/dev-build.sh && \
    echo 'make clean && make debug' >> /usr/local/bin/dev-build.sh && \
    chmod +x /usr/local/bin/dev-build.sh

# 기본 명령어
CMD ["/bin/bash"]