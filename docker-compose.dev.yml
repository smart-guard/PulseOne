version: '3.8'

services:
  # PostgreSQL
  postgres:
    image: postgres:15
    container_name: pulseone-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pulseone}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/sql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pulseone_network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: pulseone-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pulseone_network

  # InfluxDB
  influxdb:
    image: influxdb:2.7
    container_name: pulseone-influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUX_USERNAME:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUX_PASSWORD:-influxpassword}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUX_ORG:-pulseone}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUX_BUCKET:-timeseries}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUX_TOKEN:-my-super-secret-auth-token}
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - pulseone_network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: pulseone-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-rabbitmq}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq123}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - pulseone_network

  # Backend (Node.js API 서버)
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    container_name: pulseone-backend-dev
    working_dir: /app
    env_file:
      - ./config/.env
      - ./config/database.env
      - ./config/redis.env
      - ./config/timeseries.env
      - ./config/messaging.env
    environment:
      NODE_ENV: development
      ENV_STAGE: ${ENV_STAGE:-dev}
      BACKEND_PORT: 3000
      DATABASE_TYPE: SQLITE
      SQLITE_DB_PATH: ./data/db/pulseone.db
      REDIS_PRIMARY_ENABLED: "false"
      REDIS_PRIMARY_HOST: redis
      REDIS_PRIMARY_PORT: 6379
    ports:
      - "3000:3000"
      - "9229:9229"
    volumes:
      - ./backend:/app/backend
      - ./config:/app/config
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pulseone_network
    command: >
      sh -c '
        echo "🚀 PulseOne Backend Container Starting..."
        
        # 데이터 디렉토리 생성
        mkdir -p /app/data/db /app/data/backup /app/data/logs /app/data/temp
        
        # 의존성 확인
        cd /app/backend
        if [ ! -d node_modules ]; then
          echo "📦 Installing npm dependencies..."
          npm install
        fi
        
        # 포트 사용 체크 및 자동 조정
        if netstat -tuln | grep -q ":3000 "; then
          echo "⚠️  포트 3000이 사용 중입니다. 포트 3001을 사용합니다."
          export BACKEND_PORT=3001
        else
          export BACKEND_PORT=3000
        fi
        
        echo "🚀 Starting server on port $$BACKEND_PORT..."
        npm run dev
      '

  # Frontend (React + TypeScript + Vite)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: pulseone-frontend-dev
    working_dir: /app
    environment:
      NODE_ENV: development
      ENV_STAGE: ${ENV_STAGE:-dev}
      VITE_API_BASE_URL: http://localhost:3000/api
      VITE_WEBSOCKET_URL: ws://localhost:3000
      CHOKIDAR_USEPOLLING: "true"
      VITE_HMR_HOST: 0.0.0.0
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - pulseone_network
    command: >
      sh -c '
        echo "🎨 PulseOne Frontend Development Environment"
        echo "============================================="
        
        # npm 의존성 설치
        if [ ! -d node_modules ]; then
          echo "📦 Installing npm dependencies..."
          npm install
        fi
        
        # 개발 서버 시작
        echo "🚀 Starting Frontend Development Server..."
        npm run dev -- --host 0.0.0.0
      '

  # 🔧 Shared 라이브러리 빌드 서비스 (새로 추가)
  shared-libs:
    build:
      context: .
      dockerfile: core/shared/Dockerfile.dev
    container_name: pulseone-shared-libs
    working_dir: /app/core/shared
    volumes:
      - ./core/shared:/app/core/shared
      - shared_libs:/app/core/shared/lib  # 빌드된 라이브러리 공유
    command: >
      bash -c '
        echo "📚 Building PulseOne Shared Libraries..."
        echo "========================================"
        
        # 헤더 파일 문법 테스트
        echo "🔍 Testing header files..."
        make test-headers
        
        # 공유 라이브러리 빌드
        echo "🔧 Building shared libraries..."
        make all
        
        echo "✅ Shared libraries build completed!"
        ls -la lib/
        
        # 무한 대기 (다른 서비스에서 라이브러리 사용 가능하도록)
        tail -f /dev/null
      '
    networks:
      - pulseone_network

  # 🔥 Collector (C++ 데이터 수집 엔진) - core 구조 적용
  collector:
    build:
      context: .
      dockerfile: core/collector/Dockerfile.dev
    container_name: pulseone-collector-dev
    tty: true
    stdin_open: true
    working_dir: /app
    env_file:
      - ./config/.env
      - ./config/database.env
      - ./config/redis.env
      - ./config/timeseries.env
      - ./config/messaging.env
    environment:
      # Build 관련 환경변수
      BUILD_TYPE: Debug
      LOG_LEVEL: debug
      ENV_STAGE: ${ENV_STAGE:-dev}
      AUTO_BUILD: "true"
      AUTO_RUN: "false"
      
      # 🔥 Shared 라이브러리 경로 (core 구조)
      SHARED_LIB_DIR: /app/core/shared/lib
      SHARED_INCLUDE_DIR: /app/core/shared/include
      
      # PostgreSQL
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DB: ${POSTGRES_DB:-pulseone}
      
      # InfluxDB
      INFLUXDB_HOST: influxdb
      INFLUXDB_PORT: 8086
      INFLUXDB_TOKEN: ${INFLUX_TOKEN:-my-super-secret-auth-token}
      INFLUXDB_ORG: ${INFLUX_ORG:-pulseone}
      INFLUXDB_BUCKET: ${INFLUX_BUCKET:-timeseries}
      
      # RabbitMQ
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-rabbitmq}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq123}
      
      # SQLite
      SQLITE_PATH: /app/data/pulseone.db
      DATABASE_TYPE: sqlite
      
      # Redis
      REDIS_PRIMARY_HOST: redis
      
    volumes:
      - ./core:/app/core                    # 🔥 core 전체 마운트
      - ./config:/app/config
      - ./secrets:/app/secrets
      - ./logs:/app/logs
      - ./data:/app/data
      - shared_libs:/app/core/shared/lib    # 공유 라이브러리 볼륨
    depends_on:
      shared-libs:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - pulseone_network
    ports:
      - "8080:8080"
    command: >
      bash -c '
        echo "🔧 PulseOne Collector Development Environment (Core Structure)"
        echo "=============================================================="
        
        # Redis 연결 환경 자동 설정
        echo "🔍 Redis 연결 환경 자동 설정:"
        if timeout 3 bash -c "</dev/tcp/redis/6379" 2>/dev/null; then
          echo "✅ 내부 Redis 서비스 연결 성공 (redis:6379)"
          export REDIS_PRIMARY_HOST=redis
        else
          echo "❌ Redis 연결 실패 - 기본값 사용 (redis)"
          export REDIS_PRIMARY_HOST=redis
        fi
        
        echo "📍 최종 Redis 설정: $REDIS_PRIMARY_HOST:$REDIS_PRIMARY_PORT"
        
        # API Key 로드
        if [ -f /app/secrets/anthropic_api_key ]; then
          export ANTHROPIC_API_KEY=$(cat /app/secrets/anthropic_api_key)
          echo "✅ Claude Code API Key 로드됨"
        fi
        
        echo "📋 System Info:"
        echo "  OS: $(uname -s) $(uname -r)"
        echo "  Compiler: $(g++ --version | head -n1)"
        echo "  Build Type: $BUILD_TYPE"
        echo "  Working Dir: $(pwd)"
        echo "  Core Structure: $(ls -la /app/core/)"
        
        # 🔥 Shared 라이브러리 확인
        echo "📚 Shared Libraries Status:"
        if [ -d "/app/core/shared/lib" ] && [ "$(ls -A /app/core/shared/lib 2>/dev/null)" ]; then
          echo "  ✅ Shared libraries found:"
          ls -la /app/core/shared/lib/ | grep "\.a$" || echo "  ⚠️ No .a files yet"
        else
          echo "  ⚠️ Waiting for shared libraries to build..."
          sleep 5
        fi
        
        # 데이터베이스 설정 확인
        echo "🗄️ Database Configuration:"
        echo "  DATABASE_TYPE: $DATABASE_TYPE"
        echo "  POSTGRES_HOST: $POSTGRES_HOST:$POSTGRES_PORT"
        echo "  REDIS_PRIMARY_HOST: $REDIS_PRIMARY_HOST:$REDIS_PRIMARY_PORT"
        echo "  INFLUXDB_HOST: $INFLUXDB_HOST:$INFLUXDB_PORT"
        echo "  SQLITE_PATH: $SQLITE_PATH"
        
        # SQLite 파일 확인
        if [ -f "$SQLITE_PATH" ]; then
          echo "  ✅ SQLite file found: $SQLITE_PATH"
        else
          echo "  📝 Creating SQLite file..."
          mkdir -p $(dirname "$SQLITE_PATH")
          touch "$SQLITE_PATH"
        fi
        
        # 서비스 연결 확인
        echo "🌐 Service Connectivity:"
        timeout 5 bash -c "</dev/tcp/postgres/5432" 2>/dev/null && echo "  ✅ PostgreSQL" || echo "  ❌ PostgreSQL"
        timeout 5 bash -c "</dev/tcp/$REDIS_PRIMARY_HOST/$REDIS_PRIMARY_PORT" 2>/dev/null && echo "  ✅ Redis" || echo "  ❌ Redis"
        timeout 5 bash -c "</dev/tcp/influxdb/8086" 2>/dev/null && echo "  ✅ InfluxDB" || echo "  ❌ InfluxDB"
        timeout 5 bash -c "</dev/tcp/rabbitmq/5672" 2>/dev/null && echo "  ✅ RabbitMQ" || echo "  ❌ RabbitMQ"
        
        # 자동 빌드
        if [ "$AUTO_BUILD" = "true" ]; then
          echo "🔨 Starting automatic build..."
          cd /app/core/collector
          
          # 필수 디렉토리 생성
          echo "📁 Creating required directories..."
          mkdir -p include/Core src/Core include/Drivers src/Drivers bin obj tests/bin
          
          echo "🔧 Building collector with shared libraries..."
          make clean 2>/dev/null || true
          
          # 🔥 환경변수에 shared 라이브러리 경로 추가
          if make debug \
            REDIS_HOST=$REDIS_PRIMARY_HOST \
            POSTGRES_HOST=$POSTGRES_HOST \
            INFLUX_HOST=$INFLUXDB_HOST \
            SHARED_LIB_DIR=$SHARED_LIB_DIR \
            SHARED_INCLUDE_DIR=$SHARED_INCLUDE_DIR; then
            echo "✅ Build successful!"
            
            # 자동 실행
            if [ "$AUTO_RUN" = "true" ]; then
              echo "🚀 Starting collector..."
              make run
            else
              echo "💡 Build completed. Use make run to start collector."
            fi
          else
            echo "❌ Build failed. Check the error messages above."
          fi
        fi
        
        echo ""
        echo "🚀 Available Commands:"
        echo "  cd /app/core/collector && make clean && make debug"
        echo "  cd /app/core/shared && make test-headers"
        echo "  cd /app/core/shared && make all"
        echo ""
        echo "🚀 PulseOne Collector Development Environment Ready!"
        echo "💡 Use: docker exec -it pulseone-collector-dev bash"
        
        # 무한 대기 (컨테이너 유지)
        tail -f /dev/null
      '
    healthcheck:
      test: ["CMD-SHELL", "test -f /app/core/collector/bin/collector || pgrep -f pulseone-collector"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 🆕 Export Gateway (C++ 외부 연동 엔진) - 새로 추가
  export-gateway:
    build:
      context: .
      dockerfile: core/export-gateway/Dockerfile.dev
    container_name: pulseone-export-gateway-dev
    tty: true
    stdin_open: true
    working_dir: /app
    env_file:
      - ./config/.env
      - ./config/database.env
      - ./config/redis.env
      - ./config/export.env  # 🆕 Export Gateway 전용 설정
    environment:
      # Build 관련 환경변수
      BUILD_TYPE: Debug
      LOG_LEVEL: debug
      ENV_STAGE: ${ENV_STAGE:-dev}
      AUTO_BUILD: "true"
      AUTO_RUN: "false"
      
      # 🔥 Shared 라이브러리 경로 (core 구조)
      SHARED_LIB_DIR: /app/core/shared/lib
      SHARED_INCLUDE_DIR: /app/core/shared/include
      
      # 외부 연동 설정
      EXPORT_MODE: development
      AWS_REGION: ${AWS_REGION:-ap-northeast-2}
      
      # Redis (읽기 전용)
      REDIS_PRIMARY_HOST: redis
      REDIS_PRIMARY_PORT: 6379
      REDIS_PRIMARY_DB: ${REDIS_PRIMARY_DB:-0}
      
      # PostgreSQL (읽기 전용)
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DB: ${POSTGRES_DB:-pulseone}
      
    volumes:
      - ./core:/app/core                    # core 전체 마운트
      - ./config:/app/config
      - ./secrets:/app/secrets
      - ./logs:/app/logs
      - shared_libs:/app/core/shared/lib    # 공유 라이브러리 볼륨
    depends_on:
      shared-libs:
        condition: service_started
      collector:
        condition: service_started
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - pulseone_network
    ports:
      - "8081:8081"  # Export Gateway 전용 포트
    command: >
      bash -c '
        echo "🌐 PulseOne Export Gateway Development Environment"
        echo "================================================="
        
        echo "📋 Export Gateway Info:"
        echo "  Working Dir: $(pwd)"
        echo "  Core Structure: $(ls -la /app/core/)"
        echo "  Export Mode: $EXPORT_MODE"
        
        # 🔥 Shared 라이브러리 확인
        echo "📚 Shared Libraries Status:"
        if [ -d "/app/core/shared/lib" ] && [ "$(ls -A /app/core/shared/lib 2>/dev/null)" ]; then
          echo "  ✅ Shared libraries available"
          ls -la /app/core/shared/lib/
        else
          echo "  ⚠️ Waiting for shared libraries..."
          sleep 10
        fi
        
        # 의존 서비스 연결 확인
        echo "🌐 Dependency Services:"
        timeout 5 bash -c "</dev/tcp/redis/6379" 2>/dev/null && echo "  ✅ Redis (data source)" || echo "  ❌ Redis"
        timeout 5 bash -c "</dev/tcp/postgres/5432" 2>/dev/null && echo "  ✅ PostgreSQL (config)" || echo "  ❌ PostgreSQL"
        
        # Collector 데이터 확인
        echo "📊 Data Source Status:"
        if timeout 3 redis-cli -h redis ping >/dev/null 2>&1; then
          DEVICE_COUNT=$(redis-cli -h redis --scan --pattern "device:*:latest" | wc -l)
          echo "  📈 Redis device data: $DEVICE_COUNT devices"
        fi
        
        # 자동 빌드
        if [ "$AUTO_BUILD" = "true" ]; then
          echo "🔨 Building Export Gateway..."
          cd /app/core/export-gateway
          
          # 필수 디렉토리 생성
          mkdir -p include/Export src/Export bin build
          
          # Export Gateway 빌드 (준비되면)
          echo "🔧 Export Gateway build system準備 중..."
          echo "💡 Build system will be implemented in next phase"
        fi
        
        echo ""
        echo "🚀 Export Gateway Commands:"
        echo "  cd /app/core/export-gateway"
        echo "  # Build commands will be available soon"
        echo ""
        echo "🌐 PulseOne Export Gateway Ready!"
        echo "💡 Use: docker exec -it pulseone-export-gateway-dev bash"
        
        # 무한 대기
        tail -f /dev/null
      '
    healthcheck:
      test: ["CMD-SHELL", "test -d /app/core/export-gateway || echo 'Export Gateway container running'"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  pulseone_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  influxdb_data:
  influxdb_config:
  rabbitmq_data:
  shared_libs:  # 🆕 공유 라이브러리 볼륨