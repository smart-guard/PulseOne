services:
  # ============================================================================
  # Backend ÏÑúÎπÑÏä§ (Node.js API ÏÑúÎ≤Ñ)
  # ============================================================================
  backend:
    container_name: pulseone-backend-dev
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    working_dir: /app/backend
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influx:
        condition: service_started
      rabbitmq:
        condition: service_started
    environment:
      - ENV_STAGE=${ENV_STAGE:-dev}
      - ANTHROPIC_API_KEY=./secrets/anthropic_api_key
    env_file:
      - ./config/.env.${ENV_STAGE:-dev}
    volumes:
      - ./backend:/app/backend
      - ./config:/app/config
      - ./secrets:/app/secrets:ro
      - claude_cache:/root/.cache/claude-code
    tty: true
    stdin_open: true
    command: >
      bash -c "
        if [ -f /app/secrets/anthropic_api_key ]; then
          export ANTHROPIC_API_KEY=$(cat /app/secrets/anthropic_api_key)
          echo '‚úÖ ANTHROPIC_API_KEY loaded from secrets'
        else
          echo '‚ö†Ô∏è  ANTHROPIC_API_KEY file not found'
        fi
        echo 'üöÄ PulseOne Backend Development Environment'
        echo 'Available commands:'
        echo '  npm run dev    - Start development server'
        echo '  npm run debug  - Start with debugger'
        echo '  npm test       - Run tests'
        echo '  claude-code    - Use Claude Code CLI'
        echo ''
        /bin/bash
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Frontend Í∞úÎ∞ú ÏÑúÎ≤Ñ (Vite)
  # ============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: pulseone-frontend-dev
    environment:
      VITE_API_BASE_URL: http://localhost:3000/api
      VITE_WEBSOCKET_URL: ws://localhost:3000
      VITE_DEBUG_MODE: "true"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"    # Vite Í∞úÎ∞ú ÏÑúÎ≤Ñ
    depends_on:
      - backend

  # ============================================================================
  # Collector ÏÑúÎπÑÏä§ (C++ Îç∞Ïù¥ÌÑ∞ ÏàòÏßëÍ∏∞)
  # ============================================================================
  collector:
    container_name: pulseone-collector-dev
    build:
      context: .
      dockerfile: collector/Dockerfile.dev
      args:
        BUILD_TYPE: ${BUILD_TYPE:-Debug}
        INSTALL_DEPS: "true"
    working_dir: /app/collector
    volumes:
      - ./collector:/app/collector
      - ./config:/app/config
      - ./secrets:/app/secrets:ro
      - claude_cache:/root/.cache/claude-code
      # ÎìúÎùºÏù¥Î≤Ñ ÏÑ§Ï†ï ÌååÏùºÎì§ ÎßàÏö¥Ìä∏
      - ./config/drivers:/app/config/drivers
      # Î°úÍ∑∏ ÎîîÎ†âÌÜ†Î¶¨ ÎßàÏö¥Ìä∏
      - ./logs/collector:/app/logs
      # ÎùºÏù¥Î∏åÎü¨Î¶¨ Ï∫êÏãú (ÎπåÎìú ÏÑ±Îä• Ìñ•ÏÉÅ)
      - collector_libs:/usr/local/lib
      - collector_includes:/usr/local/include
    ports:
      # ÎîîÎ≤ÑÍπÖÏö© Ìè¨Ìä∏ (gdb ÏõêÍ≤© ÎîîÎ≤ÑÍπÖ)
      - "2345:2345"
      # Î™®ÎãàÌÑ∞ÎßÅÏö© Ìè¨Ìä∏ (Ìñ•ÌõÑ ÌôïÏû•)
      - "8080:8080"
    tty: true
    stdin_open: true
    depends_on:
      rabbitmq:
        condition: service_started
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - ENV_STAGE=${ENV_STAGE:-dev}
      - BUILD_TYPE=${BUILD_TYPE:-Debug}
      - ANTHROPIC_API_KEY_FILE=./secrets/anthropic_api_key
      # ÎùºÏù¥Î∏åÎü¨Î¶¨ Í≤ΩÎ°ú ÏÑ§Ï†ï
      - LD_LIBRARY_PATH=/usr/local/lib:/usr/lib:/lib
      - PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/lib/pkgconfig
      # ÎìúÎùºÏù¥Î≤Ñ ÏÑ§Ï†ï
      - DRIVER_CONFIG_PATH=/app/config/drivers
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - ENABLE_PACKET_LOGGING=${ENABLE_PACKET_LOGGING:-true}
      # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ï†ïÎ≥¥
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=pulseone
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - INFLUX_HOST=influx
      - INFLUX_PORT=8086
      - INFLUX_TOKEN=mytoken
      - INFLUX_ORG=pulseone
      - INFLUX_BUCKET=metrics
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=admin
    command: >
      bash -c "
        echo 'üîß PulseOne Collector Development Environment'
        echo '============================================='
        
        # ANTHROPIC API ÌÇ§ Î°úÎìú
        if [ -f /app/secrets/anthropic_api_key ]; then
          export ANTHROPIC_API_KEY=\$$(cat /app/secrets/anthropic_api_key)
          echo '‚úÖ ANTHROPIC_API_KEY loaded from secrets'
        else
          echo '‚ö†Ô∏è  ANTHROPIC_API_KEY file not found'
        fi
        
        # ÏãúÏä§ÌÖú Ï†ïÎ≥¥ Ï∂úÎ†•
        echo ''
        echo 'üìã System Information:'
        echo \"  OS: \$$(uname -s) \$$(uname -r)\"
        echo \"  Compiler: \$$(g++ --version 2>/dev/null | head -n1 || echo 'Not found')\"
        echo \"  Build Type: \$$BUILD_TYPE\"
        echo \"  Log Level: \$$LOG_LEVEL\"
        echo ''
        
        # ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏÉÅÌÉú Ï≤¥ÌÅ¨
        echo 'üìö Library Status:'
        if pkg-config --exists libmodbus 2>/dev/null; then
          VERSION=\$$(pkg-config --modversion libmodbus 2>/dev/null || echo 'unknown')
          echo \"  ‚úÖ libmodbus: \$$VERSION\"
        else
          echo '  ‚ùå libmodbus: Not found'
        fi
        [ -f /usr/local/include/MQTTClient.h ] && echo '  ‚úÖ Paho MQTT C: Found' || echo '  ‚ùå Paho MQTT C: Not found'
        [ -f /usr/local/include/mqtt/client.h ] && echo '  ‚úÖ Paho MQTT C++: Found' || echo '  ‚ùå Paho MQTT C++: Not found'
        [ -d /usr/local/include/bacnet ] && echo '  ‚úÖ BACnet Stack: Found' || echo '  ‚ùå BACnet Stack: Not found'
        echo ''
        
        # ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ Ï≤¥ÌÅ¨
        echo 'üåê Service Connectivity:'
        timeout 5 bash -c '</dev/tcp/postgres/5432' 2>/dev/null && echo '  ‚úÖ PostgreSQL: Connected' || echo '  ‚ùå PostgreSQL: Not reachable'
        timeout 5 bash -c '</dev/tcp/redis/6379' 2>/dev/null && echo '  ‚úÖ Redis: Connected' || echo '  ‚ùå Redis: Not reachable'
        timeout 5 bash -c '</dev/tcp/influx/8086' 2>/dev/null && echo '  ‚úÖ InfluxDB: Connected' || echo '  ‚ùå InfluxDB: Not reachable'
        timeout 5 bash -c '</dev/tcp/rabbitmq/5672' 2>/dev/null && echo '  ‚úÖ RabbitMQ: Connected' || echo '  ‚ùå RabbitMQ: Not reachable'
        echo ''
        
        # ÏÑ§Ï†ï ÌååÏùº Ï≤¥ÌÅ¨
        echo '‚öôÔ∏è  Configuration Files:'
        [ -f /app/config/.env.dev ] && echo '  ‚úÖ Environment: /app/config/.env.dev' || echo '  ‚ùå Environment: Not found'
        [ -f /app/config/drivers/drivers.conf ] && echo '  ‚úÖ Drivers: /app/config/drivers/drivers.conf' || echo '  ‚ö†Ô∏è  Drivers: Using default config'
        [ -f /app/config/drivers/drivers.dev.conf ] && echo '  ‚úÖ Dev Drivers: /app/config/drivers/drivers.dev.conf' || echo '  ‚ö†Ô∏è  Dev Drivers: Not found'
        echo ''
        
        # ÎπåÎìú ÏÉÅÌÉú Ï≤¥ÌÅ¨
        echo 'üî® Build Status:'
        if [ -f /app/collector/bin/pulseone-collector ]; then
          FILE_SIZE=\$$(ls -lh /app/collector/bin/pulseone-collector 2>/dev/null | awk '{print \$$5}' || echo 'N/A')
          echo \"  ‚úÖ Executable: Found (\$$FILE_SIZE)\"
        else
          echo '  ‚ùå Executable: Not built'
        fi
        [ -f /app/collector/Makefile ] && echo '  ‚úÖ Makefile: Found' || echo '  ‚ùå Makefile: Not found'
        echo ''
        
        echo 'üöÄ Available Commands:'
        echo '  make info           - Show detailed build information'
        echo '  make deps           - Install/update dependencies'
        echo '  make clean          - Clean build files'
        echo '  make debug          - Build in debug mode'
        echo '  make release        - Build in release mode'
        echo '  make drivers        - Build driver plugins'
        echo '  make tests          - Build and run tests'
        echo '  make run            - Build and run collector'
        echo '  make ci             - Run full CI pipeline'
        echo '  make docker-logs    - Show collector logs'
        echo '  claude-code         - Use Claude Code CLI'
        echo ''
        echo 'üîß Development Workflow:'
        echo '  1. make deps        # Install dependencies (if needed)'
        echo '  2. make clean       # Clean previous builds'
        echo '  3. make debug       # Build in debug mode'
        echo '  4. make run         # Run the collector'
        echo ''
        echo 'üí° Tips:'
        echo '  - Use Ctrl+C to stop running processes'
        echo '  - Use \"docker-compose logs collector\" to view logs'
        echo '  - Configuration files are in /app/config/'
        echo '  - Driver configs are in /app/config/drivers/'
        echo ''
        
        /bin/bash
      "
    healthcheck:
      test: ["CMD-SHELL", "pgrep pulseone-collector || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Î¶¨ÏÜåÏä§ Ï†úÌïú (Í∞úÎ∞ú ÌôòÍ≤Ω)
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
    # Î°úÍ∑∏ ÏÑ§Ï†ï
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # PostgreSQL Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§
  # ============================================================================
  postgres:
    image: postgres:15
    container_name: pulseone-postgres
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: pulseone
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Ï¥àÍ∏∞ Ïä§ÌÇ§Îßà Î°úÎìú (ÏûàÎã§Î©¥)
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ============================================================================
  # InfluxDB ÏãúÍ≥ÑÏó¥ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§
  # ============================================================================
  influx:
    image: influxdb:2.7
    container_name: pulseone-influx
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=adminpass
      - DOCKER_INFLUXDB_INIT_ORG=pulseone
      - DOCKER_INFLUXDB_INIT_BUCKET=metrics
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=mytoken
    volumes:
      - influx_data:/var/lib/influxdb2

  # ============================================================================
  # Redis Ï∫êÏãú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§
  # ============================================================================
  redis:
    image: redis:alpine
    container_name: pulseone-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ============================================================================
  # RabbitMQ Î©îÏãúÏßÄ ÌÅê
  # ============================================================================
  rabbitmq:
    image: rabbitmq:3-management
    container_name: pulseone-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"    # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  # ============================================================================
  # Î™®ÎãàÌÑ∞ÎßÅ ÏÑúÎπÑÏä§Îì§ (ÏÑ†ÌÉùÏ†Å)
  # ============================================================================
  monitoring:
    image: prom/prometheus:latest
    container_name: pulseone-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    profiles:
      - monitoring

  loki:
    image: grafana/loki:latest
    container_name: pulseone-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/tmp/loki
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: pulseone-grafana
    ports:
      - "3001:3000"    # Ìè¨Ìä∏ Ï∂©Îèå Î∞©ÏßÄ (backendÍ∞Ä 3000 ÏÇ¨Ïö©)
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    profiles:
      - monitoring

# ============================================================================
# Î≥ºÎ•® Ï†ïÏùò
# ============================================================================
volumes:
  claude_cache:
    driver: local
  postgres_data:
    driver: local
  influx_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  # Collector Í¥ÄÎ†® Î≥ºÎ•®Îì§
  collector_libs:
    driver: local
  collector_includes:
    driver: local
  # Î™®ÎãàÌÑ∞ÎßÅ Í¥ÄÎ†® Î≥ºÎ•®Îì§
  prometheus_data:
    driver: local
  loki_data:
    driver: local
  grafana_data:
    driver: local

# ============================================================================
# ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ïÏùò (Í∏∞Î≥∏ ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÇ¨Ïö©)
# ============================================================================
networks:
  default:
    driver: bridge