services:
  backend:
    container_name: pulseone-backend-dev
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    working_dir: /app/backend
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influx:
        condition: service_started
      rabbitmq:
        condition: service_started
    environment:
      - ENV_STAGE=${ENV_STAGE:-dev}
      - ANTHROPIC_API_KEY=./secrets/anthropic_api_key
    env_file:
      - ./config/.env.${ENV_STAGE:-dev}
    volumes:
      - ./backend:/app/backend
      - ./config:/app/config
      - ./secrets:/app/secrets:ro
      - claude_cache:/root/.cache/claude-code
    tty: true
    stdin_open: true
    command: >
      bash -c "
        if [ -f /app/secrets/anthropic_api_key ]; then
          export ANTHROPIC_API_KEY=$(cat /app/secrets/anthropic_api_key)
          echo '‚úÖ ANTHROPIC_API_KEY loaded from secrets'
        else
          echo '‚ö†Ô∏è  ANTHROPIC_API_KEY file not found'
        fi
        echo 'üöÄ PulseOne Backend Development Environment'
        echo 'Available commands:'
        echo '  npm run dev    - Start development server'
        echo '  npm run debug  - Start with debugger'
        echo '  npm test       - Run tests'
        echo '  claude-code    - Use Claude Code CLI'
        echo ''
        /bin/bash
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  collector:
    container_name: pulseone-collector-dev
    build:
      context: .
      dockerfile: collector/Dockerfile.dev
    working_dir: /app/collector
    volumes:
      - ./collector:/app/collector
      - ./config:/app/config
      - ./secrets:/app/secrets:ro
      - claude_cache:/root/.cache/claude-code
    tty: true
    stdin_open: true
    depends_on:
      rabbitmq:
        condition: service_started
    environment:
      - ENV_STAGE=${ENV_STAGE:-dev}
      - ANTHROPIC_API_KEY_FILE=./secrets/anthropic_api_key
    command: >
      bash -c "
        if [ -f /app/secrets/anthropic_api_key ]; then
          export ANTHROPIC_API_KEY=$(cat /app/secrets/anthropic_api_key)
          echo '‚úÖ ANTHROPIC_API_KEY loaded from secrets'
        else
          echo '‚ö†Ô∏è  ANTHROPIC_API_KEY file not found'
        fi
        echo 'üîß PulseOne Collector Development Environment'
        echo 'Available commands:'
        echo '  make build     - Build collector'
        echo '  make run       - Run collector'
        echo '  claude-code    - Use Claude Code CLI'
        echo ''
        /bin/bash
      "

  postgres:
    image: postgres:15
    container_name: pulseone-postgres
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: pulseone
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 10s
      timeout: 5s
      retries: 3

  influx:
    image: influxdb:2.7
    container_name: pulseone-influx
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=adminpass
      - DOCKER_INFLUXDB_INIT_ORG=pulseone
      - DOCKER_INFLUXDB_INIT_BUCKET=metrics
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=mytoken
    volumes:
      - influx_data:/var/lib/influxdb2

  redis:
    image: redis:alpine
    container_name: pulseone-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  rabbitmq:
    image: rabbitmq:3-management
    container_name: pulseone-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

volumes:
  claude_cache:
    driver: local
  postgres_data:
    driver: local
  influx_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local