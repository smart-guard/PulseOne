version: '3.8'

services:
  # PostgreSQL
  postgres:
    image: postgres:15
    container_name: pulseone-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pulseone}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pulseone_network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: pulseone-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pulseone_network

  # InfluxDB (새로 추가)
  influxdb:
    image: influxdb:2.7
    container_name: pulseone-influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUX_USERNAME:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUX_PASSWORD:-influxpassword}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUX_ORG:-pulseone}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUX_BUCKET:-timeseries}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUX_TOKEN:-my-super-secret-auth-token}
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - pulseone_network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: pulseone-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-rabbitmq}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq123}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - pulseone_network

  # Backend
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    container_name: pulseone-backend-dev
    working_dir: /app  # 🎯 작업 디렉토리 명시
    env_file:
      - ./config/.env
      - ./config/database.env
      - ./config/redis.env
      - ./config/timeseries.env
      - ./config/messaging.env
    environment:
      NODE_ENV: development
      ENV_STAGE: ${ENV_STAGE:-dev}
      # 기존 Docker 서비스 연결 정보 유지
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
      INFLUX_URL: http://influxdb:8086
      INFLUX_TOKEN: ${INFLUX_TOKEN:-my-super-secret-auth-token}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-rabbitmq}:${RABBITMQ_PASSWORD:-rabbitmq123}@rabbitmq:5672
    ports:
      - "3000:3000"
      - "9229:9229"
    volumes:
      - ./backend:/app/backend
      - ./config:/app/config
      - ./secrets:/app/secrets
      - ./data:/app/data  # 🎯 SQLite 파일 접근용 볼륨 추가
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - pulseone_network

# Collector (완성된 버전)
  collector:
    build:
      context: .
      dockerfile: collector/Dockerfile.dev
    container_name: pulseone-collector-dev
    tty: true
    stdin_open: true
    working_dir: /app  # 🎯 작업 디렉토리 명시
    env_file:
      - ./config/.env
      - ./config/database.env
      - ./config/redis.env
      - ./config/timeseries.env
      - ./config/messaging.env
    environment:
      BUILD_TYPE: Debug
      LOG_LEVEL: debug
      ENV_STAGE: ${ENV_STAGE:-dev}
      AUTO_BUILD: "true"          # 자동 빌드 활성화
      AUTO_RUN: "false"           # 자동 실행 비활성화 (개발용)
    volumes:
      - ./collector:/app/collector
      - ./config:/app/config
      - ./secrets:/app/secrets
      - ./logs:/app/logs
      - ./data:/app/data  # 🎯 SQLite 파일 접근용 볼륨 추가
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: >
      bash -c "
        echo '🔧 PulseOne Collector Development Environment'
        echo '============================================='
        
        # 환경 정보 출력
        if [ -f /app/secrets/anthropic_api_key ]; then
          export ANTHROPIC_API_KEY=\$$(cat /app/secrets/anthropic_api_key)
          echo '✅ ANTHROPIC_API_KEY loaded'
        fi
        
        echo '📋 System Info:'
        echo \"  OS: \$$(uname -s) \$$(uname -r)\"
        echo \"  Compiler: \$$(g++ --version | head -n1)\"
        echo \"  Build Type: \$$BUILD_TYPE\"
        echo \"  Working Dir: \$$(pwd)\"
        
        # 🎯 데이터베이스 설정 확인 추가
        echo '🗄️ Database Configuration:'
        echo \"  DATABASE_TYPE: \$$DATABASE_TYPE\"
        echo \"  SQLITE_PATH: \$$SQLITE_PATH\"
        if [ -f \"\$$SQLITE_PATH\" ]; then
          echo \"  ✅ SQLite file found: \$$SQLITE_PATH\"
          sqlite3 \"\$$SQLITE_PATH\" 'SELECT COUNT(*) as device_count FROM devices;' 2>/dev/null && echo \"  📊 Database accessible\" || echo \"  ⚠️ Database query failed\"
        else
          echo \"  ❌ SQLite file not found: \$$SQLITE_PATH\"
        fi
        
        # 라이브러리 상태 확인
        echo '📚 Library Status:'
        pkg-config --exists libmodbus && echo \"  ✅ libmodbus: \$$(pkg-config --modversion libmodbus)\" || echo '  ❌ libmodbus'
        [ -f /usr/local/include/MQTTClient.h ] && echo '  ✅ Paho MQTT C: Found' || echo '  ❌ Paho MQTT C'
        [ -f /usr/local/include/mqtt/client.h ] && echo '  ✅ Paho MQTT C++: Found' || echo '  ❌ Paho MQTT C++'
        [ -d /usr/local/include/bacnet ] && echo '  ✅ BACnet: Found' || echo '  ❌ BACnet'
        
        # 서비스 연결 확인
        echo '🌐 Service Connectivity:'
        timeout 5 bash -c '</dev/tcp/postgres/5432' 2>/dev/null && echo '  ✅ PostgreSQL' || echo '  ❌ PostgreSQL'
        timeout 5 bash -c '</dev/tcp/redis/6379' 2>/dev/null && echo '  ✅ Redis' || echo '  ❌ Redis'
        timeout 5 bash -c '</dev/tcp/influxdb/8086' 2>/dev/null && echo '  ✅ InfluxDB' || echo '  ❌ InfluxDB'
        timeout 5 bash -c '</dev/tcp/rabbitmq/5672' 2>/dev/null && echo '  ✅ RabbitMQ' || echo '  ❌ RabbitMQ'
        
        # 자동 빌드 (선택적)
        if [ \"\$$AUTO_BUILD\" = \"true\" ]; then
          echo '🔨 Starting automatic build...'
          cd /app/collector
          
          # 누락된 파일들 체크
          echo '📁 Checking required files...'
          
          # 필수 디렉토리 생성
          mkdir -p include/Core src/Core include/Drivers src/Drivers
          
          echo '🔧 Building collector...'
          make clean 2>/dev/null || true
          
          if make debug; then
            echo '✅ Build successful!'
            
            # 자동 실행 (선택적)
            if [ \"\$$AUTO_RUN\" = \"true\" ]; then
              echo '🚀 Starting collector...'
              make run
            else
              echo '💡 Build completed. Use \"make run\" to start collector.'
            fi
          else
            echo '❌ Build failed. Check the error messages above.'
            echo '💡 You can still access the container to debug:'
            echo '   docker exec -it pulseone-collector-dev bash'
          fi
        fi
        
        echo ''
        echo '🚀 Available Commands:'
        echo '  make clean && make debug  - Build collector'
        echo '  make run                  - Run collector'
        echo '  make tests                - Run tests'
        echo '  claude-code               - Use Claude Code CLI'
        echo ''
        echo '📊 Database Commands:'
        echo '  sqlite3 \$$SQLITE_PATH    - Access SQLite database'
        echo '  sqlite3 \$$SQLITE_PATH \".tables\"  - List tables'
        echo ''
        echo '🚀 PulseOne Collector Development Environment Ready!'
        echo '💡 Use: docker exec -it pulseone-collector-dev bash'
        
        # 무한 대기
        tail -f /dev/null
      "
    healthcheck:
      test: ["CMD-SHELL", "pgrep pulseone-collector || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - pulseone_network

networks:
  pulseone_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  influxdb_data:
  influxdb_config:
  rabbitmq_data: