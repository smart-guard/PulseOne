FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# =============================================================================
# 1. 기본 패키지 설치
# =============================================================================
RUN apt-get update && apt-get install -y \
    gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 \
    make cmake pkg-config git \
    wget curl unzip patch \
    build-essential autotools-dev automake autoconf libtool \
    libssl-dev zlib1g-dev uuid-dev \
    mingw-w64-tools mingw-w64-x86-64-dev \
    vim nano tree htop procps \
    && rm -rf /var/lib/apt/lists/*

# MinGW 설정
RUN update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix && \
    update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix

ENV CC=x86_64-w64-mingw32-gcc
ENV CXX=x86_64-w64-mingw32-g++
ENV AR=x86_64-w64-mingw32-ar
ENV STRIP=x86_64-w64-mingw32-strip
ENV WINDRES=x86_64-w64-mingw32-windres
ENV MINGW_PREFIX=/usr/x86_64-w64-mingw32
ENV PATH="${MINGW_PREFIX}/bin:${PATH}"

# =============================================================================
# 2. SQLite3
# =============================================================================
RUN cd /tmp && \
    wget https://www.sqlite.org/2023/sqlite-amalgamation-3420000.zip -O sqlite.zip && \
    unzip sqlite.zip && \
    cd sqlite-amalgamation-3420000 && \
    ${CC} -c sqlite3.c -o sqlite3.o \
        -DSQLITE_THREADSAFE=1 \
        -DSQLITE_ENABLE_FTS5 \
        -DSQLITE_ENABLE_JSON1 \
        -DSQLITE_ENABLE_RTREE \
        -DSQLITE_USE_URI=1 && \
    ${AR} rcs ${MINGW_PREFIX}/lib/libsqlite3.a sqlite3.o && \
    cp sqlite3.h sqlite3ext.h ${MINGW_PREFIX}/include/ && \
    rm -rf /tmp/sqlite* && \
    echo "SQLite3 설치 완료"

# =============================================================================
# 3. OpenSSL
# =============================================================================
RUN cd /tmp && \
    wget https://www.openssl.org/source/openssl-1.1.1w.tar.gz && \
    tar xzf openssl-1.1.1w.tar.gz && \
    cd openssl-1.1.1w && \
    ./Configure mingw64 no-shared no-asm \
        --prefix=${MINGW_PREFIX} \
        --openssldir=${MINGW_PREFIX}/ssl && \
    make CC=${CC} AR=${AR} RANLIB=x86_64-w64-mingw32-ranlib && \
    make install_sw && \
    rm -rf /tmp/openssl* && \
    echo "OpenSSL 설치 완료"

# =============================================================================
# 4. libmodbus
# =============================================================================
RUN cd /tmp && \
    git clone --depth 1 --branch v3.1.10 https://github.com/stephane/libmodbus.git && \
    cd libmodbus && \
    ./autogen.sh && \
    ./configure --host=x86_64-w64-mingw32 \
                --prefix=${MINGW_PREFIX} \
                --enable-static \
                --disable-shared \
                --disable-tests \
                CFLAGS="-O2 -D_WIN32_WINNT=0x0601" && \
    make && make install && \
    rm -rf /tmp/libmodbus && \
    echo "libmodbus 설치 완료"

# =============================================================================
# 5. hiredis
# =============================================================================
RUN cd /tmp && \
    git clone --depth 1 --branch v1.2.0 https://github.com/redis/hiredis.git && \
    cd hiredis && \
    make CC=${CC} AR=${AR} PREFIX=${MINGW_PREFIX} \
         CFLAGS="-O2 -DWIN32_LEAN_AND_MEAN -D_WIN32_WINNT=0x0601 -w" \
         LDFLAGS="-lws2_32" \
         WARNINGS="" && \
    make PREFIX=${MINGW_PREFIX} install && \
    rm -rf /tmp/hiredis && \
    echo "hiredis 설치 완료"

# =============================================================================
# 6. Windows용 완전한 poll.h 생성
# =============================================================================
RUN cat > ${MINGW_PREFIX}/include/poll.h << 'EOF'
#ifndef POLL_H
#define POLL_H

#ifdef _WIN32
#include <winsock2.h>
#include <ws2tcpip.h>
#include <windows.h>

#define POLLIN      0x0001
#define POLLPRI     0x0002
#define POLLOUT     0x0004
#define POLLERR     0x0008
#define POLLHUP     0x0010
#define POLLNVAL    0x0020

struct pollfd {
    SOCKET fd;
    short events;
    short revents;
};

typedef unsigned long nfds_t;

#ifdef __cplusplus
extern "C" {
#endif

static inline int poll(struct pollfd *fds, nfds_t nfds, int timeout) {
    #if defined(WSAPoll)
        return WSAPoll(fds, nfds, timeout);
    #else
        fd_set readfds, writefds, exceptfds;
        struct timeval tv, *tvp = NULL;
        SOCKET maxfd = 0;
        int result, i;

        if (timeout >= 0) {
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
            tvp = &tv;
        }

        FD_ZERO(&readfds);
        FD_ZERO(&writefds);
        FD_ZERO(&exceptfds);

        for (i = 0; i < nfds; i++) {
            if (fds[i].fd == INVALID_SOCKET) continue;
            
            if (fds[i].events & POLLIN) FD_SET(fds[i].fd, &readfds);
            if (fds[i].events & POLLOUT) FD_SET(fds[i].fd, &writefds);
            FD_SET(fds[i].fd, &exceptfds);
            
            if (fds[i].fd > maxfd) maxfd = fds[i].fd;
            fds[i].revents = 0;
        }

        result = select(maxfd + 1, &readfds, &writefds, &exceptfds, tvp);
        if (result <= 0) return result;

        for (i = 0; i < nfds; i++) {
            if (fds[i].fd == INVALID_SOCKET) continue;
            
            if (FD_ISSET(fds[i].fd, &readfds)) fds[i].revents |= POLLIN;
            if (FD_ISSET(fds[i].fd, &writefds)) fds[i].revents |= POLLOUT;
            if (FD_ISSET(fds[i].fd, &exceptfds)) fds[i].revents |= POLLERR;
        }

        return result;
    #endif
}

#ifdef __cplusplus
}
#endif

#else
#include <sys/poll.h>
#endif /* _WIN32 */

#endif /* POLL_H */
EOF

# =============================================================================
# 7. MQTT C 라이브러리 (완전한 헤더 포함 버전)
# =============================================================================
RUN cd /tmp && \
    git clone --depth 1 --branch v1.3.13 https://github.com/eclipse/paho.mqtt.c.git paho-c && \
    cd paho-c/src

# 완전한 VersionInfo.h 생성
RUN cd /tmp/paho-c/src && \
    cat > VersionInfo.h << 'VEOF'
#ifndef VERSIONINFO_H
#define VERSIONINFO_H
#define CLIENT_VERSION "1.3.13"
#define BUILD_TIMESTAMP "2024-01-01 12:00:00Z"
#endif
VEOF

# 모든 MQTT C 헤더 파일들 복사 (MQTTAsync.h 포함)
RUN cd /tmp/paho-c/src && \
    cp MQTT*.h ${MINGW_PREFIX}/include/

# MQTT C 라이브러리 컴파일 및 설치
RUN cd /tmp/paho-c/src && \
    ${CC} -O2 -D_WIN32_WINNT=0x0601 -DWIN32_LEAN_AND_MEAN -I. -c \
        Socket.c MQTTClient.c MQTTPacket.c MQTTPacketOut.c Heap.c LinkedList.c Log.c && \
    ${AR} rcs libpaho-mqtt3c.a *.o && \
    cp libpaho-mqtt3c.a ${MINGW_PREFIX}/lib/ && \
    cp libpaho-mqtt3c.a ${MINGW_PREFIX}/lib/libpaho-mqtt3cs.a && \
    cp libpaho-mqtt3c.a ${MINGW_PREFIX}/lib/libpaho-mqtt3a.a && \
    cp libpaho-mqtt3c.a ${MINGW_PREFIX}/lib/libpaho-mqtt3as.a && \
    rm -rf /tmp/paho-c && \
    echo "MQTT C 라이브러리 설치 완료"

# =============================================================================
# 8. MQTT C++ 라이브러리 (실제 작동하는 완전한 버전)
# =============================================================================
RUN cd /tmp && \
    git clone --depth 1 --branch v1.3.2 https://github.com/eclipse/paho.mqtt.cpp.git paho-cpp

# MQTT C++ 헤더 디렉토리 생성 및 복사
RUN cd /tmp/paho-cpp && \
    mkdir -p ${MINGW_PREFIX}/include/mqtt && \
    cp src/mqtt/*.h ${MINGW_PREFIX}/include/mqtt/

# MQTT C++ 핵심 파일들 개별 컴파일
RUN cd /tmp/paho-cpp/src && \
    ${CXX} -std=c++11 -O2 -D_WIN32_WINNT=0x0601 -DWIN32_LEAN_AND_MEAN \
           -I. -Imqtt -I${MINGW_PREFIX}/include \
           -c async_client.cpp -o async_client.o

RUN cd /tmp/paho-cpp/src && \
    ${CXX} -std=c++11 -O2 -D_WIN32_WINNT=0x0601 -DWIN32_LEAN_AND_MEAN \
           -I. -Imqtt -I${MINGW_PREFIX}/include \
           -c client.cpp -o client.o

RUN cd /tmp/paho-cpp/src && \
    ${CXX} -std=c++11 -O2 -D_WIN32_WINNT=0x0601 -DWIN32_LEAN_AND_MEAN \
           -I. -Imqtt -I${MINGW_PREFIX}/include \
           -c message.cpp -o message.o

RUN cd /tmp/paho-cpp/src && \
    ${CXX} -std=c++11 -O2 -D_WIN32_WINNT=0x0601 -DWIN32_LEAN_AND_MEAN \
           -I. -Imqtt -I${MINGW_PREFIX}/include \
           -c token.cpp -o token.o

RUN cd /tmp/paho-cpp/src && \
    ${CXX} -std=c++11 -O2 -D_WIN32_WINNT=0x0601 -DWIN32_LEAN_AND_MEAN \
           -I. -Imqtt -I${MINGW_PREFIX}/include \
           -c topic.cpp -o topic.o

# 실제 C++ 라이브러리 생성
RUN cd /tmp/paho-cpp/src && \
    ${AR} rcs libpaho-mqttpp3.a *.o && \
    cp libpaho-mqttpp3.a ${MINGW_PREFIX}/lib/ && \
    rm -rf /tmp/paho-cpp && \
    echo "MQTT C++ 라이브러리 설치 완료"

# =============================================================================
# 9. QuickJS
# =============================================================================
RUN cd /tmp && \
    git clone --depth 1 https://github.com/bellard/quickjs.git && \
    cd quickjs && \
    sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' Makefile && \
    sed -i 's/-Werror//' Makefile && \
    export CFLAGS="-O2 -Wno-format -Wno-format-extra-args" && \
    make CC=${CC} AR=${AR} libquickjs.a && \
    cp quickjs.h quickjs-libc.h ${MINGW_PREFIX}/include/ && \
    cp libquickjs.a ${MINGW_PREFIX}/lib/ && \
    rm -rf /tmp/quickjs && \
    echo "QuickJS 설치 완료"

# =============================================================================
# 10. BACnet Stack (완전한 헤더 파일들)
# =============================================================================
RUN mkdir -p ${MINGW_PREFIX}/include/bacnet && \
    echo "BACnet 헤더 파일 생성 중..."

# 완전한 bacenum.h 생성
RUN cat > ${MINGW_PREFIX}/include/bacnet/bacenum.h << 'BACEOF'
#ifndef BACENUM_H
#define BACENUM_H
#include <stdint.h>

/**
 * @brief BACnet 객체 타입
 */
typedef enum {
    OBJECT_ANALOG_INPUT = 0,
    OBJECT_ANALOG_OUTPUT = 1,
    OBJECT_ANALOG_VALUE = 2,
    OBJECT_BINARY_INPUT = 3,
    OBJECT_BINARY_OUTPUT = 4,
    OBJECT_BINARY_VALUE = 5,
    OBJECT_CALENDAR = 6,
    OBJECT_COMMAND = 7,
    OBJECT_DEVICE = 8,
    OBJECT_EVENT_ENROLLMENT = 9,
    OBJECT_FILE = 10,
    OBJECT_GROUP = 11,
    OBJECT_LOOP = 12,
    OBJECT_MULTI_STATE_INPUT = 13,
    OBJECT_MULTI_STATE_OUTPUT = 14,
    OBJECT_NOTIFICATION_CLASS = 15,
    OBJECT_PROGRAM = 16,
    OBJECT_SCHEDULE = 17,
    OBJECT_AVERAGING = 18,
    OBJECT_MULTI_STATE_VALUE = 19,
    OBJECT_TREND_LOG = 20,
    OBJECT_LIFE_SAFETY_POINT = 21,
    OBJECT_LIFE_SAFETY_ZONE = 22,
    OBJECT_ACCUMULATOR = 23,
    OBJECT_PULSE_CONVERTER = 24,
    OBJECT_EVENT_LOG = 25,
    OBJECT_GLOBAL_GROUP = 26,
    OBJECT_TREND_LOG_MULTIPLE = 27,
    OBJECT_LOAD_CONTROL = 28,
    OBJECT_STRUCTURED_VIEW = 29,
    OBJECT_ACCESS_DOOR = 30,
    OBJECT_PROPRIETARY_MIN = 128,
    MAX_BACNET_OBJECT_TYPE = 1023
} BACNET_OBJECT_TYPE;

/**
 * @brief BACnet 프로퍼티 ID
 */
typedef enum {
    PROP_ACKED_TRANSITIONS = 0,
    PROP_ACK_REQUIRED = 1,
    PROP_ACTION = 2,
    PROP_ACTION_TEXT = 3,
    PROP_ACTIVE_TEXT = 4,
    PROP_ACTIVE_VT_SESSIONS = 5,
    PROP_ALARM_VALUE = 6,
    PROP_ALARM_VALUES = 7,
    PROP_ALL = 8,
    PROP_ALL_WRITES_SUCCESSFUL = 9,
    PROP_APDU_SEGMENT_TIMEOUT = 10,
    PROP_APDU_TIMEOUT = 11,
    PROP_APPLICATION_SOFTWARE_VERSION = 12,
    PROP_ARCHIVE = 13,
    PROP_BIAS = 14,
    PROP_CHANGE_OF_STATE_COUNT = 15,
    PROP_CHANGE_OF_STATE_TIME = 16,
    PROP_NOTIFICATION_CLASS = 17,
    PROP_CONTROLLED_VARIABLE_REFERENCE = 19,
    PROP_CONTROLLED_VARIABLE_UNITS = 20,
    PROP_CONTROLLED_VARIABLE_VALUE = 21,
    PROP_COV_INCREMENT = 22,
    PROP_DATE_LIST = 23,
    PROP_DAYLIGHT_SAVINGS_STATUS = 24,
    PROP_DEADBAND = 25,
    PROP_DERIVATIVE_CONSTANT = 26,
    PROP_DERIVATIVE_CONSTANT_UNITS = 27,
    PROP_DESCRIPTION = 28,
    PROP_DESCRIPTION_OF_HALT = 29,
    PROP_DEVICE_ADDRESS_BINDING = 30,
    PROP_DEVICE_TYPE = 31,
    PROP_EFFECTIVE_PERIOD = 32,
    PROP_ELAPSED_ACTIVE_TIME = 33,
    PROP_ERROR_LIMIT = 34,
    PROP_EVENT_ENABLE = 35,
    PROP_EVENT_STATE = 36,
    PROP_EVENT_TYPE = 37,
    PROP_EXCEPTION_SCHEDULE = 38,
    PROP_FAULT_VALUES = 39,
    PROP_FEEDBACK_VALUE = 40,
    PROP_FILE_ACCESS_METHOD = 41,
    PROP_FILE_SIZE = 42,
    PROP_FILE_TYPE = 43,
    PROP_FIRMWARE_REVISION = 44,
    PROP_HIGH_LIMIT = 45,
    PROP_INACTIVE_TEXT = 46,
    PROP_IN_PROCESS = 47,
    PROP_INSTANCE_OF = 48,
    PROP_INTEGRAL_CONSTANT = 49,
    PROP_INTEGRAL_CONSTANT_UNITS = 50,
    PROP_ISSUE_CONFIRMED_NOTIFICATIONS = 51,
    PROP_LIMIT_ENABLE = 52,
    PROP_LIST_OF_GROUP_MEMBERS = 53,
    PROP_LIST_OF_OBJECT_PROPERTY_REFERENCES = 54,
    PROP_LOCAL_DATE = 55,
    PROP_LOCAL_TIME = 56,
    PROP_LOCATION = 57,
    PROP_LOW_LIMIT = 58,
    PROP_MANIPULATED_VARIABLE_REFERENCE = 59,
    PROP_MAXIMUM_OUTPUT = 60,
    PROP_MAX_APDU_LENGTH_ACCEPTED = 61,
    PROP_MAX_INFO_FRAMES = 62,
    PROP_MAX_MASTER = 63,
    PROP_MAX_PRES_VALUE = 64,
    PROP_MINIMUM_OFF_TIME = 65,
    PROP_MINIMUM_ON_TIME = 66,
    PROP_MINIMUM_OUTPUT = 67,
    PROP_MIN_PRES_VALUE = 68,
    PROP_MODEL_NAME = 69,
    PROP_MODIFICATION_DATE = 70,
    PROP_NOTIFY_TYPE = 71,
    PROP_NUMBER_OF_APDU_RETRIES = 72,
    PROP_NUMBER_OF_STATES = 73,
    PROP_OBJECT_IDENTIFIER = 75,
    PROP_OBJECT_LIST = 76,
    PROP_OBJECT_NAME = 77,
    PROP_OBJECT_PROPERTY_REFERENCE = 78,
    PROP_OBJECT_TYPE = 79,
    PROP_OPTIONAL = 80,
    PROP_OUT_OF_SERVICE = 81,
    PROP_OUTPUT_UNITS = 82,
    PROP_EVENT_PARAMETERS = 83,
    PROP_POLARITY = 84,
    PROP_PRESENT_VALUE = 85,
    PROP_PRIORITY = 86,
    PROP_PRIORITY_ARRAY = 87,
    PROP_PRIORITY_FOR_WRITING = 88,
    PROP_PROCESS_IDENTIFIER = 89,
    PROP_PROGRAM_CHANGE = 90,
    PROP_PROGRAM_LOCATION = 91,
    PROP_PROGRAM_STATE = 92,
    PROP_PROPORTIONAL_CONSTANT = 93,
    PROP_PROPORTIONAL_CONSTANT_UNITS = 94,
    PROP_PROTOCOL_CONFORMANCE_CLASS = 95,
    PROP_PROTOCOL_OBJECT_TYPES_SUPPORTED = 96,
    PROP_PROTOCOL_SERVICES_SUPPORTED = 97,
    PROP_PROTOCOL_VERSION = 98,
    PROP_READ_ONLY = 99,
    PROP_REASON_FOR_HALT = 100,
    PROP_RECIPIENT = 101,
    PROP_RECIPIENT_LIST = 102,
    PROP_RELIABILITY = 103,
    PROP_RELINQUISH_DEFAULT = 104,
    PROP_REQUIRED = 105,
    PROP_RESOLUTION = 106,
    PROP_SEGMENTATION_SUPPORTED = 107,
    PROP_SETPOINT = 108,
    PROP_SETPOINT_REFERENCE = 109,
    PROP_STATE_TEXT = 110,
    PROP_STATUS_FLAGS = 111,
    PROP_SYSTEM_STATUS = 112,
    PROP_TIME_DELAY = 113,
    PROP_TIME_OF_ACTIVE_TIME_RESET = 114,
    PROP_TIME_OF_STATE_COUNT_RESET = 115,
    PROP_TIME_SYNCHRONIZATION_RECIPIENTS = 116,
    PROP_UNITS = 117,
    PROP_UPDATE_INTERVAL = 118,
    PROP_UTC_OFFSET = 119,
    PROP_VENDOR_IDENTIFIER = 120,
    PROP_VENDOR_NAME = 121,
    PROP_VT_CLASSES_SUPPORTED = 122,
    PROP_WEEKLY_SCHEDULE = 123,
    PROP_ATTEMPTED_SAMPLES = 124,
    PROP_AVERAGE_VALUE = 125,
    PROP_BUFFER_SIZE = 126,
    PROP_CLIENT_COV_INCREMENT = 127,
    PROP_COV_RESUBSCRIPTION_INTERVAL = 128,
    PROP_CURRENT_NOTIFY_TIME = 129,
    PROP_EVENT_TIME_STAMPS = 130,
    MAX_BACNET_PROPERTY_ID = 4194303
} BACNET_PROPERTY_ID;

/**
 * @brief BACnet 에러 코드
 */
typedef enum {
    ERROR_CODE_OTHER = 0,
    ERROR_CODE_AUTHENTICATION_FAILED = 1,
    ERROR_CODE_CONFIGURATION_IN_PROGRESS = 2,
    ERROR_CODE_DEVICE_BUSY = 3,
    ERROR_CODE_DYNAMIC_CREATION_NOT_SUPPORTED = 4,
    ERROR_CODE_FILE_ACCESS_DENIED = 5,
    ERROR_CODE_INCOMPATIBLE_SECURITY_LEVELS = 6,
    ERROR_CODE_INCONSISTENT_PARAMETERS = 7,
    ERROR_CODE_INCONSISTENT_SELECTION_CRITERION = 8,
    ERROR_CODE_INVALID_DATA_TYPE = 9,
    ERROR_CODE_INVALID_FILE_ACCESS_METHOD = 10,
    ERROR_CODE_INVALID_FILE_START_POSITION = 11,
    ERROR_CODE_INVALID_OPERATOR_NAME = 12,
    ERROR_CODE_INVALID_PARAMETER_DATA_TYPE = 13,
    ERROR_CODE_INVALID_TIME_STAMP = 14,
    ERROR_CODE_KEY_GENERATION_ERROR = 15,
    ERROR_CODE_MISSING_REQUIRED_PARAMETER = 16,
    ERROR_CODE_NO_OBJECTS_OF_SPECIFIED_TYPE = 17,
    ERROR_CODE_NO_SPACE_FOR_OBJECT = 18,
    ERROR_CODE_NO_SPACE_TO_ADD_LIST_ELEMENT = 19,
    ERROR_CODE_NO_SPACE_TO_WRITE_PROPERTY = 20,
    ERROR_CODE_NO_VT_SESSIONS_AVAILABLE = 21,
    ERROR_CODE_PROPERTY_IS_NOT_A_LIST = 22,
    ERROR_CODE_OBJECT_DELETION_NOT_PERMITTED = 23,
    ERROR_CODE_OBJECT_IDENTIFIER_ALREADY_EXISTS = 24,
    ERROR_CODE_OPERATIONAL_PROBLEM = 25,
    ERROR_CODE_PASSWORD_FAILURE = 26,
    ERROR_CODE_READ_ACCESS_DENIED = 27,
    ERROR_CODE_SECURITY_NOT_SUPPORTED = 28,
    ERROR_CODE_SERVICE_REQUEST_DENIED = 29,
    ERROR_CODE_TIMEOUT = 30,
    ERROR_CODE_UNKNOWN_OBJECT = 31,
    ERROR_CODE_UNKNOWN_PROPERTY = 32,
    ERROR_CODE_UNSUPPORTED_OBJECT_TYPE = 35,
    ERROR_CODE_VALUE_OUT_OF_RANGE = 37,
    ERROR_CODE_VT_SESSION_ALREADY_CLOSED = 38,
    ERROR_CODE_VT_SESSION_TERMINATION_FAILURE = 39,
    ERROR_CODE_WRITE_ACCESS_DENIED = 40,
    ERROR_CODE_CHARACTER_SET_NOT_SUPPORTED = 41,
    ERROR_CODE_INVALID_ARRAY_INDEX = 42,
    ERROR_CODE_COV_SUBSCRIPTION_FAILED = 43,
    ERROR_CODE_NOT_COV_PROPERTY = 44,
    ERROR_CODE_OPTIONAL_FUNCTIONALITY_NOT_SUPPORTED = 45,
    ERROR_CODE_INVALID_CONFIGURATION_DATA = 46,
    ERROR_CODE_DATATYPE_NOT_SUPPORTED = 47,
    ERROR_CODE_DUPLICATE_NAME = 48,
    ERROR_CODE_DUPLICATE_OBJECT_ID = 49,
    ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY = 50,
    MAX_BACNET_ERROR_CODE = 255
} BACNET_ERROR_CODE;

/**
 * @brief BACnet 응용 데이터 값
 */
typedef struct {
    uint8_t tag;
    uint32_t type;
    union {
        bool boolean;
        uint32_t unsigned_int;
        int32_t signed_int;
        float real;
        double double_precision;
        char *character_string;
        uint8_t *octet_string;
        struct {
            uint8_t year;
            uint8_t month;
            uint8_t day;
            uint8_t wday;
        } date;
        struct {
            uint8_t hour;
            uint8_t minute;
            uint8_t second;
            uint8_t hundredths;
        } time;
        struct {
            uint32_t instance_number;
            uint16_t type;
        } object_id;
    } value;
    uint8_t *next;
} BACNET_APPLICATION_DATA_VALUE;

/**
 * @brief BACnet 주소
 */
typedef struct {
    uint8_t mac[6];
    uint8_t mac_len;
    uint16_t net;
    uint8_t len;
    uint8_t adr[7];
} BACNET_ADDRESS;

/**
 * @brief BACnet 읽기 속성 데이터
 */
typedef struct {
    BACNET_OBJECT_TYPE object_type;
    uint32_t object_instance;
    BACNET_PROPERTY_ID object_property;
    uint32_t array_index;
} BACNET_READ_PROPERTY_DATA;

/**
 * @brief BACnet COV 구독 데이터
 */
typedef struct {
    uint32_t subscriberProcessIdentifier;
    BACNET_OBJECT_TYPE monitoredObjectIdentifier;
    uint32_t monitoredObjectInstance;
    bool issueConfirmedNotifications;
    uint32_t lifetime;
} BACNET_COV_SUBSCRIPTION;

/**
 * @brief BACnet 서비스 선택
 */
typedef enum {
    SERVICE_CONFIRMED_ACKNOWLEDGE_ALARM = 0,
    SERVICE_CONFIRMED_COV_NOTIFICATION = 1,
    SERVICE_CONFIRMED_EVENT_NOTIFICATION = 2,
    SERVICE_CONFIRMED_GET_ALARM_SUMMARY = 3,
    SERVICE_CONFIRMED_GET_ENROLLMENT_SUMMARY = 4,
    SERVICE_CONFIRMED_SUBSCRIBE_COV = 5,
    SERVICE_CONFIRMED_ATOMIC_READ_FILE = 6,
    SERVICE_CONFIRMED_ATOMIC_WRITE_FILE = 7,
    SERVICE_CONFIRMED_ADD_LIST_ELEMENT = 8,
    SERVICE_CONFIRMED_REMOVE_LIST_ELEMENT = 9,
    SERVICE_CONFIRMED_CREATE_OBJECT = 10,
    SERVICE_CONFIRMED_DELETE_OBJECT = 11,
    SERVICE_CONFIRMED_READ_PROPERTY = 12,
    SERVICE_CONFIRMED_READ_PROP_CONDITIONAL = 13,
    SERVICE_CONFIRMED_READ_PROP_MULTIPLE = 14,
    SERVICE_CONFIRMED_WRITE_PROPERTY = 15,
    SERVICE_CONFIRMED_WRITE_PROP_MULTIPLE = 16,
    SERVICE_CONFIRMED_DEVICE_COMMUNICATION_CONTROL = 17,
    SERVICE_CONFIRMED_PRIVATE_TRANSFER = 18,
    SERVICE_CONFIRMED_TEXT_MESSAGE = 19,
    SERVICE_CONFIRMED_REINITIALIZE_DEVICE = 20,
    SERVICE_CONFIRMED_VT_OPEN = 21,
    SERVICE_CONFIRMED_VT_CLOSE = 22,
    SERVICE_CONFIRMED_VT_DATA = 23,
    SERVICE_CONFIRMED_AUTHENTICATE = 24,
    SERVICE_CONFIRMED_REQUEST_KEY = 25,
    SERVICE_UNCONFIRMED_I_AM = 0,
    SERVICE_UNCONFIRMED_I_HAVE = 1,
    SERVICE_UNCONFIRMED_COV_NOTIFICATION = 2,
    SERVICE_UNCONFIRMED_EVENT_NOTIFICATION = 3,
    SERVICE_UNCONFIRMED_PRIVATE_TRANSFER = 4,
    SERVICE_UNCONFIRMED_TEXT_MESSAGE = 5,
    SERVICE_UNCONFIRMED_TIME_SYNCHRONIZATION = 6,
    SERVICE_UNCONFIRMED_WHO_HAS = 7,
    SERVICE_UNCONFIRMED_WHO_IS = 8,
    SERVICE_UNCONFIRMED_UTC_TIME_SYNCHRONIZATION = 9,
    MAX_BACNET_CONFIRMED_SERVICE = 40,
    MAX_BACNET_UNCONFIRMED_SERVICE = 40
} BACNET_CONFIRMED_SERVICE;

#endif // BACENUM_H
BACEOF

# bacdef.h 생성
RUN cat > ${MINGW_PREFIX}/include/bacnet/bacdef.h << 'BACDEFEOF'
#ifndef BACDEF_H
#define BACDEF_H

#include "bacenum.h"
#include <stdint.h>
#include <stdbool.h>

// BACnet 기본 상수들
#define MAX_BACNET_OBJECT_ID 0x3FF
#define MAX_BACNET_INSTANCE 0x3FFFFF
#define BACNET_PROTOCOL_VERSION 1
#define BACNET_PROTOCOL_REVISION 22

// 기본 데이터 타입
#define MAX_APDU 1476
#define MAX_NPDU (MAX_APDU)

// 인코딩 관련
#define DECODE_UNSIGNED(buffer, value) \
    do { \
        value = 0; \
        for (int i = 0; i < sizeof(value); i++) { \
            value = (value << 8) | buffer[i]; \
        } \
    } while(0)

#define ENCODE_UNSIGNED(buffer, value) \
    do { \
        for (int i = sizeof(value) - 1; i >= 0; i--) { \
            buffer[i] = (uint8_t)(value & 0xFF); \
            value >>= 8; \
        } \
    } while(0)

// 더미 함수들 (실제 구현은 없음)
static inline int bacnet_encode_unsigned(uint8_t *apdu, uint32_t value) {
    if (!apdu) return 0;
    ENCODE_UNSIGNED(apdu, value);
    return sizeof(uint32_t);
}

static inline int bacnet_decode_unsigned(uint8_t *apdu, uint32_t *value) {
    if (!apdu || !value) return 0;
    DECODE_UNSIGNED(apdu, *value);
    return sizeof(uint32_t);
}

#endif // BACDEF_H
BACDEFEOF

# bactext.h 생성
RUN cat > ${MINGW_PREFIX}/include/bacnet/bactext.h << 'BACTEXTEOF'
#ifndef BACTEXT_H
#define BACTEXT_H

#include "bacenum.h"

// 텍스트 변환 함수들 (더미 구현)
static inline const char* bactext_object_type_name(BACNET_OBJECT_TYPE type) {
    switch (type) {
        case OBJECT_ANALOG_INPUT: return "ANALOG_INPUT";
        case OBJECT_ANALOG_OUTPUT: return "ANALOG_OUTPUT";
        case OBJECT_ANALOG_VALUE: return "ANALOG_VALUE";
        case OBJECT_BINARY_INPUT: return "BINARY_INPUT";
        case OBJECT_BINARY_OUTPUT: return "BINARY_OUTPUT";
        case OBJECT_BINARY_VALUE: return "BINARY_VALUE";
        case OBJECT_DEVICE: return "DEVICE";
        default: return "UNKNOWN";
    }
}

static inline const char* bactext_property_name(BACNET_PROPERTY_ID prop) {
    switch (prop) {
        case PROP_PRESENT_VALUE: return "PRESENT_VALUE";
        case PROP_OBJECT_NAME: return "OBJECT_NAME";
        case PROP_OBJECT_TYPE: return "OBJECT_TYPE";
        case PROP_OBJECT_IDENTIFIER: return "OBJECT_IDENTIFIER";
        case PROP_DESCRIPTION: return "DESCRIPTION";
        default: return "UNKNOWN";
    }
}

#endif // BACTEXT_H
BACTEXTEOF

# BACnet 더미 라이브러리 생성
RUN ${AR} rcs ${MINGW_PREFIX}/lib/libbacnet.a && \
    echo "BACnet 헤더 및 더미 라이브러리 설치 완료"

# =============================================================================
# 11. 헤더 온리 라이브러리들
# =============================================================================
# nlohmann/json
RUN cd /tmp && \
    git clone --depth 1 --branch v3.11.3 https://github.com/nlohmann/json.git && \
    cd json && \
    mkdir -p ${MINGW_PREFIX}/include/nlohmann && \
    cp single_include/nlohmann/json.hpp ${MINGW_PREFIX}/include/nlohmann/ && \
    rm -rf /tmp/json && \
    echo "nlohmann/json 설치 완료"

# cpp-httplib
RUN wget https://raw.githubusercontent.com/yhirose/cpp-httplib/v0.14.1/httplib.h \
         -O ${MINGW_PREFIX}/include/httplib.h && \
    echo "cpp-httplib 설치 완료"

# spdlog
RUN cd /tmp && \
    git clone --depth 1 --branch v1.12.0 https://github.com/gabime/spdlog.git && \
    cd spdlog && \
    cp -r include/spdlog ${MINGW_PREFIX}/include/ && \
    cd /tmp && rm -rf spdlog && \
    echo "spdlog 설치 완료"

# =============================================================================
# 12. 검증 스크립트 및 entrypoint
# =============================================================================
RUN cat > /usr/local/bin/check-all-libs << 'EOF'
#!/bin/bash
echo "설치된 라이브러리 확인:"
echo "=============================="
for lib in sqlite3 ssl crypto modbus hiredis paho-mqtt3c paho-mqtt3cs paho-mqtt3a paho-mqtt3as paho-mqttpp3 quickjs bacnet; do
    if [ -f "/usr/x86_64-w64-mingw32/lib/lib${lib}.a" ]; then
        size=$(du -h "/usr/x86_64-w64-mingw32/lib/lib${lib}.a" | cut -f1)
        printf "  ✅ %-20s %s\n" "lib${lib}.a" "($size)"
    else
        printf "  ❌ %-20s\n" "lib${lib}.a"
    fi
done

echo ""
echo "MQTT 헤더 파일 확인:"
echo "=============================="
if [ -f "/usr/x86_64-w64-mingw32/include/MQTTClient.h" ]; then
    echo "  ✅ MQTTClient.h"
else
    echo "  ❌ MQTTClient.h"
fi

if [ -f "/usr/x86_64-w64-mingw32/include/MQTTAsync.h" ]; then
    echo "  ✅ MQTTAsync.h"
else
    echo "  ❌ MQTTAsync.h"
fi

if [ -d "/usr/x86_64-w64-mingw32/include/mqtt" ]; then
    echo "  ✅ mqtt/ 디렉토리"
    echo "  📁 C++ 헤더 개수: $(find /usr/x86_64-w64-mingw32/include/mqtt/ -name "*.h" | wc -l)"
else
    echo "  ❌ mqtt/ 디렉토리"
fi

echo ""
echo "BACnet 헤더 파일 확인:"
echo "=============================="
if [ -d "/usr/x86_64-w64-mingw32/include/bacnet" ]; then
    echo "  ✅ bacnet/ 디렉토리"
    echo "  📁 헤더 개수: $(find /usr/x86_64-w64-mingw32/include/bacnet/ -name "*.h" | wc -l)"
    for header in bacenum.h bacdef.h bactext.h; do
        if [ -f "/usr/x86_64-w64-mingw32/include/bacnet/$header" ]; then
            echo "  ✅ $header"
        else
            echo "  ❌ $header"
        fi
    done
else
    echo "  ❌ bacnet/ 디렉토리"
fi

echo ""
echo "PulseOne Collector 실행파일:"
echo "=============================="
if [ -f "/usr/local/bin/pulseone-collector.exe" ]; then
    echo "  ✅ pulseone-collector.exe"
    echo "  📁 크기: $(du -h /usr/local/bin/pulseone-collector.exe | cut -f1)"
    echo "  🔍 타입: $(file /usr/local/bin/pulseone-collector.exe | cut -d: -f2)"
else
    echo "  ❌ pulseone-collector.exe"
fi
EOF

RUN chmod +x /usr/local/bin/check-all-libs

ENV PKG_CONFIG_PATH="${MINGW_PREFIX}/lib/pkgconfig"
ENV CPPFLAGS="-I${MINGW_PREFIX}/include"
ENV LDFLAGS="-L${MINGW_PREFIX}/lib"

WORKDIR /src

# 최종 확인
RUN /usr/local/bin/check-all-libs

RUN echo '#!/bin/bash' > /usr/local/bin/entrypoint.sh && \
    echo 'echo "================================================"' >> /usr/local/bin/entrypoint.sh && \
    echo 'echo "  PulseOne Windows Cross-Compile COMPLETE"' >> /usr/local/bin/entrypoint.sh && \
    echo 'echo "================================================"' >> /usr/local/bin/entrypoint.sh && \
    echo '/usr/local/bin/check-all-libs' >> /usr/local/bin/entrypoint.sh && \
    echo 'echo ""' >> /usr/local/bin/entrypoint.sh && \
    echo 'echo "🚀 실행 방법:"' >> /usr/local/bin/entrypoint.sh && \
    echo 'echo "  - Windows에서 실행: /usr/local/bin/pulseone-collector.exe"' >> /usr/local/bin/entrypoint.sh && \
    echo 'echo "  - 파일 복사: cp /usr/local/bin/pulseone-collector.exe /output/"' >> /usr/local/bin/entrypoint.sh && \
    echo 'exec "$@"' >> /usr/local/bin/entrypoint.sh && \
    chmod +x /usr/local/bin/entrypoint.sh

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["bash"]