# =============================================================================
# shared/Makefile - PulseOne Í≥µÏú† ÎùºÏù¥Î∏åÎü¨Î¶¨ (ÌÅ¨Î°úÏä§ ÌîåÎû´Ìèº)
# =============================================================================

# ÌîåÎû´Ìèº Í∞êÏßÄ
UNAME := $(shell uname -s 2>/dev/null || echo Windows)
ifeq ($(UNAME),Linux)
    PLATFORM := Linux
    IS_WINDOWS := 0
else ifeq ($(OS),Windows_NT)
    PLATFORM := Windows
    IS_WINDOWS := 1
else
    PLATFORM := $(UNAME)
    IS_WINDOWS := 0
endif

# Ïª¥ÌååÏùºÎü¨ ÏÑ§Ï†ï
CXX = g++
CXXFLAGS = -std=c++17 -Wall -Wextra -O2 -fPIC

# Windows ÌÅ¨Î°úÏä§ Ïª¥ÌååÏùº ÏßÄÏõê
ifeq ($(CROSS_COMPILE_WINDOWS),1)
    CXX = x86_64-w64-mingw32-g++
    CXXFLAGS += -DWIN32 -D_WIN32_WINNT=0x0601 -DWIN32_LEAN_AND_MEAN -DNOMINMAX
    PLATFORM := Windows-Cross
    MINGW_PREFIX = /usr/x86_64-w64-mingw32
    INCLUDES += -I$(MINGW_PREFIX)/include
    LIB_SUFFIX = .a
else ifeq ($(IS_WINDOWS),1)
    CXXFLAGS += -DPULSEONE_WINDOWS=1
    LIB_SUFFIX = .a
else
    CXXFLAGS += -DPULSEONE_LINUX=1
    LIB_SUFFIX = .a
endif

# ÎîîÎ†âÌÜ†Î¶¨ ÏÑ§Ï†ï
SRC_DIR = src
INCLUDE_DIR = include
BUILD_DIR = build
LIB_DIR = lib

# Include Í≤ΩÎ°ú (collector Ìå®ÌÑ¥Í≥º ÎèôÏùº)
INCLUDES = -I$(INCLUDE_DIR) \
           -I$(INCLUDE_DIR)/Platform \
           -I$(INCLUDE_DIR)/Common \
           -I$(INCLUDE_DIR)/Utils \
           -I$(INCLUDE_DIR)/Database \
           -I$(INCLUDE_DIR)/Database/Entities \
           -I$(INCLUDE_DIR)/Database/Repositories \
           -I$(INCLUDE_DIR)/Client \
           -I$(INCLUDE_DIR)/Export

# ÎùºÏù¥Î∏åÎü¨Î¶¨ Í∞êÏßÄ (collector Ìå®ÌÑ¥)
HAS_NLOHMANN_JSON := $(shell echo '\#include <nlohmann/json.hpp>' | $(CXX) -E -x c++ - >/dev/null 2>&1 && echo "1" || echo "0")
HAS_HIREDIS := $(shell echo '\#include <hiredis/hiredis.h>' | $(CXX) -E -x c++ - >/dev/null 2>&1 && echo "1" || echo "0")

# Ï°∞Í±¥Î∂Ä ÌîåÎûòÍ∑∏
ifeq ($(HAS_NLOHMANN_JSON),1)
    CXXFLAGS += -DHAS_NLOHMANN_JSON
endif
ifeq ($(HAS_HIREDIS),1)
    CXXFLAGS += -DHAS_HIREDIS
endif

# ÏÜåÏä§ ÌååÏùº ÏàòÏßë (ÌòÑÏû¨Îäî Ìó§Îçî Ï†ÑÏö©Ïù¥ÏßÄÎßå Ìñ•ÌõÑ ÌôïÏû• ÎåÄÎπÑ)
COMMON_SOURCES = $(wildcard $(SRC_DIR)/Common/*.cpp) \
                $(wildcard $(SRC_DIR)/Utils/*.cpp) \
                $(wildcard $(SRC_DIR)/Platform/*.cpp)

DATABASE_SOURCES = $(wildcard $(SRC_DIR)/Database/*.cpp) \
                  $(wildcard $(SRC_DIR)/Database/Entities/*.cpp) \
                  $(wildcard $(SRC_DIR)/Database/Repositories/*.cpp)

CLIENT_SOURCES = $(wildcard $(SRC_DIR)/Client/*.cpp)

EXPORT_SOURCES = $(wildcard $(SRC_DIR)/Export/*.cpp)

# Ïò§Î∏åÏ†ùÌä∏ ÌååÏùº
COMMON_OBJECTS = $(COMMON_SOURCES:$(SRC_DIR)/%.cpp=$(BUILD_DIR)/%.o)
DATABASE_OBJECTS = $(DATABASE_SOURCES:$(SRC_DIR)/%.cpp=$(BUILD_DIR)/%.o)
CLIENT_OBJECTS = $(CLIENT_SOURCES:$(SRC_DIR)/%.cpp=$(BUILD_DIR)/%.o)
EXPORT_OBJECTS = $(EXPORT_SOURCES:$(SRC_DIR)/%.cpp=$(BUILD_DIR)/%.o)

# ÎùºÏù¥Î∏åÎü¨Î¶¨ ÌååÏùºÎì§
COMMON_LIB = $(LIB_DIR)/libpulseone-common$(LIB_SUFFIX)
DATABASE_LIB = $(LIB_DIR)/libpulseone-database$(LIB_SUFFIX)
CLIENT_LIB = $(LIB_DIR)/libpulseone-client$(LIB_SUFFIX)
EXPORT_LIB = $(LIB_DIR)/libpulseone-export$(LIB_SUFFIX)

# ÏÉâÏÉÅ Ï†ïÏùò
GREEN = \033[0;32m
BLUE = \033[0;34m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m

# =============================================================================
# Î©îÏù∏ ÌÉÄÍ≤üÎì§
# =============================================================================

.PHONY: all clean common database client export test-headers help info

all: $(BUILD_DIR) $(LIB_DIR) common database client export
	@echo -e "$(GREEN)‚úÖ Î™®Îì† Í≥µÏú† ÎùºÏù¥Î∏åÎü¨Î¶¨ ÎπåÎìú ÏôÑÎ£å [$(PLATFORM)]$(NC)"

# ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
$(BUILD_DIR) $(LIB_DIR):
	@mkdir -p $@
	@mkdir -p $(BUILD_DIR)/Common $(BUILD_DIR)/Utils $(BUILD_DIR)/Platform
	@mkdir -p $(BUILD_DIR)/Database/Entities $(BUILD_DIR)/Database/Repositories
	@mkdir -p $(BUILD_DIR)/Client $(BUILD_DIR)/Export

# =============================================================================
# ÎùºÏù¥Î∏åÎü¨Î¶¨ ÎπåÎìú (Ìó§Îçî Ï†ÑÏö©, Ìñ•ÌõÑ ÏÜåÏä§ Ï∂îÍ∞Ä ÎåÄÎπÑ)
# =============================================================================

common: $(COMMON_LIB)
$(COMMON_LIB): $(COMMON_OBJECTS) | $(LIB_DIR)
	@echo -e "$(BLUE)üîß Building libpulseone-common [$(PLATFORM)]$(NC)"
ifneq ($(COMMON_OBJECTS),)
	@ar rcs $@ $(COMMON_OBJECTS)
	@ranlib $@ 2>/dev/null || true
else
	@echo "# Header-only library" > /tmp/dummy.c && $(CXX) -c /tmp/dummy.c -o /tmp/dummy.o
	@ar rcs $@ /tmp/dummy.o && rm -f /tmp/dummy.c /tmp/dummy.o
endif

database: $(DATABASE_LIB)
$(DATABASE_LIB): $(DATABASE_OBJECTS) | $(LIB_DIR)
	@echo -e "$(BLUE)üîß Building libpulseone-database [$(PLATFORM)]$(NC)"
ifneq ($(DATABASE_OBJECTS),)
	@ar rcs $@ $(DATABASE_OBJECTS)
	@ranlib $@ 2>/dev/null || true
else
	@echo "# Header-only library" > /tmp/dummy.c && $(CXX) -c /tmp/dummy.c -o /tmp/dummy.o
	@ar rcs $@ /tmp/dummy.o && rm -f /tmp/dummy.c /tmp/dummy.o
endif

client: $(CLIENT_LIB)
$(CLIENT_LIB): $(CLIENT_OBJECTS) | $(LIB_DIR)
	@echo -e "$(BLUE)üîß Building libpulseone-client [$(PLATFORM)]$(NC)"
ifneq ($(CLIENT_OBJECTS),)
	@ar rcs $@ $(CLIENT_OBJECTS)
	@ranlib $@ 2>/dev/null || true
else
	@echo "# Header-only library" > /tmp/dummy.c && $(CXX) -c /tmp/dummy.c -o /tmp/dummy.o
	@ar rcs $@ /tmp/dummy.o && rm -f /tmp/dummy.c /tmp/dummy.o
endif

export: $(EXPORT_LIB)
$(EXPORT_LIB): $(EXPORT_OBJECTS) | $(LIB_DIR)
	@echo -e "$(BLUE)üîß Building libpulseone-export [$(PLATFORM)]$(NC)"
ifneq ($(EXPORT_OBJECTS),)
	@ar rcs $@ $(EXPORT_OBJECTS)
	@ranlib $@ 2>/dev/null || true
else
	@echo "# Header-only library" > /tmp/dummy.c && $(CXX) -c /tmp/dummy.c -o /tmp/dummy.o
	@ar rcs $@ /tmp/dummy.o && rm -f /tmp/dummy.c /tmp/dummy.o
endif

# =============================================================================
# Ïò§Î∏åÏ†ùÌä∏ ÌååÏùº Ïª¥ÌååÏùº
# =============================================================================

$(BUILD_DIR)/%.o: $(SRC_DIR)/%.cpp | $(BUILD_DIR)
	@mkdir -p $(dir $@)
	@echo -e "$(YELLOW)‚öôÔ∏è Compiling $< [$(PLATFORM)]$(NC)"
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

# =============================================================================
# ÌÖåÏä§Ìä∏ Î∞è Í≤ÄÏ¶ù
# =============================================================================

test-headers:
	@echo -e "$(BLUE)üîç Testing shared header files [$(PLATFORM)]...$(NC)"
	@echo "Testing Common headers..."
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -fsyntax-only include/Common/BasicTypes.h 2>/dev/null && echo "  ‚úÖ BasicTypes.h" || echo "  ‚ùå BasicTypes.h"
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -fsyntax-only include/Common/Enums.h 2>/dev/null && echo "  ‚úÖ Enums.h" || echo "  ‚ùå Enums.h"
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -fsyntax-only include/Common/Structs.h 2>/dev/null && echo "  ‚úÖ Structs.h" || echo "  ‚ùå Structs.h"
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -fsyntax-only include/Common/Utils.h 2>/dev/null && echo "  ‚úÖ Utils.h" || echo "  ‚ùå Utils.h"
	@echo "Testing Utils headers..."
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -fsyntax-only include/Utils/LogManager.h 2>/dev/null && echo "  ‚úÖ LogManager.h" || echo "  ‚ùå LogManager.h"
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -fsyntax-only include/Utils/ConfigManager.h 2>/dev/null && echo "  ‚úÖ ConfigManager.h" || echo "  ‚ùå ConfigManager.h"
	@echo "Testing Export headers..."
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -fsyntax-only include/Export/ExportTypes.h 2>/dev/null && echo "  ‚úÖ ExportTypes.h" || echo "  ‚ùå ExportTypes.h"
	@echo -e "$(GREEN)‚úÖ Header syntax check completed [$(PLATFORM)]$(NC)"

test-compile:
	@echo -e "$(BLUE)üß™ Testing compilation [$(PLATFORM)]...$(NC)"
	@echo '#include "Common/BasicTypes.h"' > /tmp/test_shared.cpp
	@echo '#include "Export/ExportTypes.h"' >> /tmp/test_shared.cpp
	@echo 'int main() { return 0; }' >> /tmp/test_shared.cpp
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c /tmp/test_shared.cpp -o /tmp/test_shared.o 2>/dev/null && echo "  ‚úÖ Compilation test passed" || echo "  ‚ùå Compilation test failed"
	@rm -f /tmp/test_shared.cpp /tmp/test_shared.o

# =============================================================================
# ÌÅ¨Î°úÏä§ Ïª¥ÌååÏùº ÏßÄÏõê
# =============================================================================

windows-cross:
	@echo -e "$(YELLOW)üîß Building for Windows (cross-compile)...$(NC)"
	$(MAKE) CROSS_COMPILE_WINDOWS=1 all

# =============================================================================
# Ï†ïÎ≥¥ Î∞è ÏÉÅÌÉú
# =============================================================================

info:
	@echo -e "$(BLUE)üìã PulseOne Shared Library Build Info$(NC)"
	@echo "=================================="
	@echo "Platform: $(PLATFORM)"
	@echo "Compiler: $(CXX)"
	@echo "Flags: $(CXXFLAGS)"
	@echo "Header files: $(shell find $(INCLUDE_DIR) -name '*.h' 2>/dev/null | wc -l)"
	@echo "Source files: $(words $(COMMON_SOURCES) $(DATABASE_SOURCES) $(CLIENT_SOURCES) $(EXPORT_SOURCES))"
	@echo ""
	@echo "Library Support:"
	@echo "JSON (nlohmann): $(if $(filter 1,$(HAS_NLOHMANN_JSON)),‚úÖ available,‚ùå missing)"
	@echo "Redis (hiredis): $(if $(filter 1,$(HAS_HIREDIS)),‚úÖ available,‚ùå missing)"
	@echo ""
	@echo "Libraries:"
	@echo "libpulseone-common: $(if $(wildcard $(COMMON_LIB)),‚úÖ exists,‚ùå missing)"
	@echo "libpulseone-database: $(if $(wildcard $(DATABASE_LIB)),‚úÖ exists,‚ùå missing)"
	@echo "libpulseone-client: $(if $(wildcard $(CLIENT_LIB)),‚úÖ exists,‚ùå missing)"
	@echo "libpulseone-export: $(if $(wildcard $(EXPORT_LIB)),‚úÖ exists,‚ùå missing)"

# =============================================================================
# Ïú†Ìã∏Î¶¨Ìã∞
# =============================================================================

clean:
	@echo -e "$(YELLOW)üßπ Cleaning shared libraries [$(PLATFORM)]...$(NC)"
	@rm -rf $(BUILD_DIR) $(LIB_DIR)
	@echo -e "$(GREEN)‚úÖ Clean completed$(NC)"

install: all
	@echo -e "$(BLUE)üì¶ Installing shared libraries [$(PLATFORM)]...$(NC)"
ifeq ($(IS_WINDOWS),1)
	@echo "Windows install not implemented yet"
else
	@sudo mkdir -p /usr/local/lib/pulseone /usr/local/include/pulseone
	@sudo cp -r $(LIB_DIR)/* /usr/local/lib/pulseone/ 2>/dev/null || true
	@sudo cp -r $(INCLUDE_DIR)/* /usr/local/include/pulseone/ 2>/dev/null || true
	@sudo ldconfig 2>/dev/null || true
	@echo -e "$(GREEN)‚úÖ Installation completed$(NC)"
endif

help:
	@echo -e "$(BLUE)üöÄ PulseOne Shared Library Makefile$(NC)"
	@echo "======================================"
	@echo ""
	@echo -e "$(GREEN)Main Targets:$(NC)"
	@echo "  make all          - Build all shared libraries"
	@echo "  make common       - Build common library (BasicTypes, Utils, etc.)"
	@echo "  make database     - Build database library (Entities, Repositories)"
	@echo "  make client       - Build client library (Redis, InfluxDB clients)"
	@echo "  make export       - Build export library (Export types)"
	@echo ""
	@echo -e "$(GREEN)Testing:$(NC)"
	@echo "  make test-headers - Test header file syntax"
	@echo "  make test-compile - Test compilation"
	@echo ""
	@echo -e "$(GREEN)Cross-Compilation:$(NC)"
	@echo "  make windows-cross - Build for Windows (requires mingw-w64)"
	@echo ""
	@echo -e "$(GREEN)Utilities:$(NC)"
	@echo "  make info         - Show build information"
	@echo "  make clean        - Clean build files"
	@echo "  make install      - Install to system (Linux only)"
	@echo "  make help         - Show this help"
	@echo ""
	@echo -e "$(YELLOW)Current Platform: $(PLATFORM)$(NC)"
	@echo -e "$(YELLOW)Header files: $(shell find $(INCLUDE_DIR) -name '*.h' 2>/dev/null | wc -l)$(NC)"

.DEFAULT_GOAL := help
