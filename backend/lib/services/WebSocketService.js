// =============================================================================
// backend/lib/services/WebSocketService.js - Ïó∞Í≤∞ Î¨∏Ï†ú Ìï¥Í≤∞ Î≤ÑÏ†Ñ
// =============================================================================

class WebSocketService {
    constructor(server) {
        this.server = server;
        this.io = null;
        this.clients = new Map();
        this.rooms = new Map();
        this.isInitialized = false;
        
        this.initialize();
    }

    // =========================================================================
    // Ï¥àÍ∏∞Ìôî
    // =========================================================================
    initialize() {
        try {
            const socketIo = require('socket.io');
            console.log('‚úÖ Socket.IO Î™®Îìà Î°úÎìú ÏÑ±Í≥µ');
            
            this.setupServer(socketIo);
            this.setupEngineEvents();
            this.setupConnectionHandlers(); // üéØ ÌïµÏã¨: Ïó∞Í≤∞ Ìï∏Îì§Îü¨ ÏÑ§Ï†ï
            this.startStatusMonitoring();
            
            this.isInitialized = true;
            console.log('‚úÖ WebSocket ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Socket.IO Î™®ÎìàÏù¥ ÏóÜÏäµÎãàÎã§. ÏÑ§ÏπòÌïòÎ†§Î©¥: npm install socket.io');
            console.warn('   WebSocket Í∏∞Îä•Ïù¥ ÎπÑÌôúÏÑ±ÌôîÎê©ÎãàÎã§.');
            this.isInitialized = false;
        }
    }

    // =========================================================================
    // Socket.IO ÏÑúÎ≤Ñ ÏÑ§Ï†ï
    // =========================================================================
    setupServer(socketIo) {
        const corsOrigins = process.env.CORS_ORIGINS?.split(',') || [
            "http://localhost:3000", 
            "http://localhost:5173",
            "http://localhost:8080",
            "http://127.0.0.1:5173",
            "http://127.0.0.1:3000"
        ];

        this.io = socketIo(this.server, {
            cors: {
                origin: corsOrigins,
                methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
                credentials: false,
                allowedHeaders: ["Content-Type", "Authorization", "Accept"]
            },
            
            // üéØ Ïó∞Í≤∞ ÏÑ§Ï†ï ÏµúÏ†ÅÌôî
            allowEIO3: true,
            transports: ['polling', 'websocket'], // polling Ïö∞ÏÑ†
            
            // üéØ ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï
            pingTimeout: 60000,      // 1Î∂Ñ
            pingInterval: 25000,     // 25Ï¥à  
            connectTimeout: 45000,   // 45Ï¥à
            upgradeTimeout: 10000,   // ÏóÖÍ∑∏Î†àÏù¥Îìú ÌÉÄÏûÑÏïÑÏõÉ
            
            // ÏÑ±Îä• ÏÑ§Ï†ï
            maxHttpBufferSize: 1e6,
            httpCompression: true,
            perMessageDeflate: true,
            
            path: '/socket.io/',
            serveClient: false
        });

        console.log('üìã Socket.IO ÏÑúÎ≤Ñ ÏÑ§Ï†ï:', {
            corsOrigins,
            transports: ['polling', 'websocket'],
            pingTimeout: '60Ï¥à',
            connectTimeout: '45Ï¥à'
        });
    }

    // =========================================================================
    // Engine Ïù¥Î≤§Ìä∏ ÏÑ§Ï†ï
    // =========================================================================
    setupEngineEvents() {
        if (!this.io) return;

        this.io.engine.on('initial_headers', (headers, req) => {
            console.log('üìã Socket.IO Initial Headers:', {
                url: req.url,
                method: req.method,
                origin: req.headers.origin
            });
            
            // CORS Ìó§Îçî ÏÑ§Ï†ï
            headers['Access-Control-Allow-Origin'] = req.headers.origin || '*';
            headers['Access-Control-Allow-Methods'] = 'GET,HEAD,PUT,PATCH,POST,DELETE';
            headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization, Accept';
        });

        this.io.engine.on('connection_error', (err) => {
            console.error('‚ùå Socket.IO Engine Ïó∞Í≤∞ ÏóêÎü¨:', {
                message: err.message,
                code: err.code,
                type: err.type,
                context: err.context
            });
        });

        this.io.engine.on('connection', (socket) => {
            console.log('üîß Engine Î†àÎ≤® Ïó∞Í≤∞ ÏÑ±Í≥µ:', socket.id);
        });

        this.io.engine.on('disconnect', (socket) => {
            console.log('üîß Engine Î†àÎ≤® Ïó∞Í≤∞ Ìï¥Ï†ú:', socket.id);
        });
    }

    // =========================================================================
    // üéØ ÌïµÏã¨ ÏàòÏ†ï: Ïó∞Í≤∞ Ìï∏Îì§Îü¨ ÏÑ§Ï†ï
    // =========================================================================
    setupConnectionHandlers() {
        if (!this.io) return;

        console.log('üîó Socket.IO connection Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨ ÏÑ§Ï†ï Ï§ë...');

        // üéØ ÌïµÏã¨: connection Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
        this.io.on('connection', (socket) => {
            const connectionTime = Date.now();
            
            console.log('üéâ ÏÉàÎ°úÏö¥ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞Îê®!');
            console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
            console.log('   Socket ID:', socket.id);
            console.log('   Client IP:', socket.handshake.address);
            console.log('   Transport:', socket.conn.transport.name);
            console.log('   Ïó∞Í≤∞ ÏãúÍ∞Ñ:', new Date().toISOString());
            console.log('   Query Params:', JSON.stringify(socket.handshake.query, null, 2));
            console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

            // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï†ïÎ≥¥ Ï†ÄÏû•
            this.clients.set(socket.id, {
                socket,
                connectedAt: new Date(),
                rooms: new Set(),
                metadata: this.extractClientMetadata(socket)
            });

            const connectedCount = this.clients.size;
            console.log(`üìä ÌòÑÏû¨ Ïó∞Í≤∞Îêú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏: ${connectedCount}Î™Ö`);

            // üéØ Ï¶âÏãú Ïó∞Í≤∞ ÌôïÏù∏ Î©îÏãúÏßÄ Ï†ÑÏÜ°
            socket.emit('connection_status', {
                status: 'connected',
                socket_id: socket.id,
                server_time: new Date().toISOString(),
                transport: socket.conn.transport.name,
                client_count: connectedCount
            });

            // üéØ Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨ ÏÑ§Ï†ï
            this.setupSocketEvents(socket);

            // üéØ Ïó∞Í≤∞ Ìï¥Ï†ú Ìï∏Îì§Îü¨
            socket.on('disconnect', (reason) => {
                this.handleDisconnection(socket, reason, connectionTime);
            });

            // üéØ ÏóêÎü¨ Ìï∏Îì§Îü¨
            socket.on('error', (error) => {
                console.error(`‚ùå Socket ÏóêÎü¨ (${socket.id}):`, error);
            });
        });

        console.log('‚úÖ Socket.IO connection Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨ ÏÑ§Ï†ï ÏôÑÎ£å');
    }

    // =========================================================================
    // Socket Ïù¥Î≤§Ìä∏ ÏÑ§Ï†ï
    // =========================================================================
    setupSocketEvents(socket) {
        // üéØ ÌÖåÏä§Ìä∏ Î©îÏãúÏßÄ Ìï∏Îì§Îü¨
        socket.on('test-message', (data) => {
            console.log('üì® ÌÖåÏä§Ìä∏ Î©îÏãúÏßÄ ÏàòÏã†:', data);
            socket.emit('test-response', {
                message: 'ÏÑúÎ≤Ñ ÏùëÎãµ',
                received_data: data,
                server_time: new Date().toISOString(),
                socket_id: socket.id,
                transport: socket.conn.transport.name
            });
        });

        // üéØ Î£∏ Í¥ÄÎ¶¨
        socket.on('join_tenant', (tenantId) => {
            this.joinRoom(socket, `tenant:${tenantId}`, { tenantId });
        });

        socket.on('join_admin', () => {
            this.joinRoom(socket, 'admins', { role: 'admin' });
        });

        // üéØ ÏïåÎûå Ï≤òÎ¶¨
        socket.on('acknowledge_alarm', (data) => {
            console.log('üìù ÏïåÎûå ÌôïÏù∏:', data);
            socket.emit('alarm_acknowledged', {
                ...data,
                timestamp: new Date().toISOString(),
                success: true
            });
        });

        // üéØ Í∞úÎ∞ú Î™®ÎìúÏóêÏÑú Î™®Îì† Ïù¥Î≤§Ìä∏ Î°úÍπÖ
        if (process.env.NODE_ENV === 'development') {
            socket.onAny((eventName, ...args) => {
                if (!['ping', 'pong'].includes(eventName)) {
                    console.log(`üì° Socket ${socket.id} Ïù¥Î≤§Ìä∏ ÏàòÏã†: ${eventName}`, 
                               args.length > 0 ? args : '(no args)');
                }
            });
        }
    }

    // =========================================================================
    // Î£∏ Í¥ÄÎ¶¨
    // =========================================================================
    joinRoom(socket, roomName, metadata = {}) {
        socket.join(roomName);
        
        // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Î£∏ Ï∂îÍ∞Ä
        const client = this.clients.get(socket.id);
        if (client) {
            client.rooms.add(roomName);
        }

        // Î£∏ ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
        if (!this.rooms.has(roomName)) {
            this.rooms.set(roomName, new Set());
        }
        this.rooms.get(roomName).add(socket.id);

        console.log(`üë• Socket ${socket.id} joined room: ${roomName}`);
        
        socket.emit('room_joined', {
            room: roomName,
            metadata,
            timestamp: new Date().toISOString(),
            success: true
        });
    }

    // =========================================================================
    // Ïó∞Í≤∞ Ìï¥Ï†ú Ï≤òÎ¶¨
    // =========================================================================
    handleDisconnection(socket, reason, connectionTime) {
        const duration = Date.now() - connectionTime;
        
        console.log('üëã ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ Ìï¥Ï†ú:', {
            socketId: socket.id,
            reason,
            duration: Math.round(duration / 1000) + 'Ï¥à',
            remaining: Math.max(0, this.clients.size - 1)
        });

        // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï†ïÎ≥¥ÏóêÏÑú Î£∏ Ï†úÍ±∞
        const client = this.clients.get(socket.id);
        if (client) {
            client.rooms.forEach(roomName => {
                const roomClients = this.rooms.get(roomName);
                if (roomClients) {
                    roomClients.delete(socket.id);
                    if (roomClients.size === 0) {
                        this.rooms.delete(roomName);
                    }
                }
            });
        }

        // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï†úÍ±∞
        this.clients.delete(socket.id);
    }

    // =========================================================================
    // Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏ Î©îÏÑúÎìúÎì§
    // =========================================================================
    broadcastToAll(event, data) {
        if (!this.io) return false;
        
        this.io.emit(event, data);
        console.log(`üì° Ï†ÑÏ≤¥ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏: ${event}`);
        return true;
    }

    broadcastToRoom(roomName, event, data) {
        if (!this.io) return false;
        
        this.io.to(roomName).emit(event, data);
        console.log(`üì° Î£∏ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏ (${roomName}): ${event}`);
        return true;
    }

    broadcastToTenant(tenantId, event, data) {
        return this.broadcastToRoom(`tenant:${tenantId}`, event, data);
    }

    broadcastToAdmins(event, data) {
        return this.broadcastToRoom('admins', event, data);
    }

    // =========================================================================
    // ÏïåÎûå Ï†ÑÏö© Î©îÏÑúÎìúÎì§
    // =========================================================================
    sendAlarm(alarmData) {
        if (!this.io) return false;

        const event = {
            type: 'alarm_triggered',
            data: alarmData,
            timestamp: new Date().toISOString()
        };

        // Ìï¥Îãπ ÌÖåÎÑåÌä∏ÏóêÍ≤å Ï†ÑÏÜ°
        this.broadcastToTenant(alarmData.tenant_id, 'alarm:new', event);

        // Í∏¥Í∏â ÏïåÎûåÏùÄ Í¥ÄÎ¶¨ÏûêÏóêÍ≤åÎèÑ
        if (alarmData.severity_level >= 3) {
            this.broadcastToAdmins('alarm:critical', {
                ...event,
                type: 'critical_alarm',
                requires_action: true
            });
        }

        return true;
    }

    // =========================================================================
    // ÏÉÅÌÉú Ï°∞Ìöå Î©îÏÑúÎìúÎì§
    // =========================================================================
    getStatus() {
        if (!this.io) {
            return {
                enabled: false,
                reason: 'Socket.IO not initialized'
            };
        }

        return {
            enabled: true,
            stats: {
                engine_clients: this.io.engine.clientsCount,
                socket_clients: this.clients.size,
                rooms: this.rooms.size,
                uptime: process.uptime(),
                initialized: this.isInitialized
            }
        };
    }

    getClients() {
        const clients = [];
        
        this.clients.forEach((client, socketId) => {
            clients.push({
                socket_id: socketId,
                connected_at: client.connectedAt.toISOString(),
                rooms: Array.from(client.rooms),
                transport: client.socket.conn.transport.name,
                ...client.metadata
            });
        });

        return clients;
    }

    getRooms() {
        const rooms = {};
        
        this.rooms.forEach((clients, roomName) => {
            rooms[roomName] = {
                client_count: clients.size,
                clients: Array.from(clients),
                type: this.getRoomType(roomName)
            };
        });

        return rooms;
    }

    // =========================================================================
    // Ïú†Ìã∏Î¶¨Ìã∞ Î©îÏÑúÎìúÎì§
    // =========================================================================
    extractClientMetadata(socket) {
        return {
            address: socket.handshake.address,
            user_agent: socket.handshake.headers['user-agent']?.substring(0, 100),
            referer: socket.handshake.headers.referer,
            query: socket.handshake.query
        };
    }

    getRoomType(roomName) {
        if (roomName.startsWith('tenant:')) return 'tenant';
        if (roomName.startsWith('device:')) return 'device';
        if (roomName === 'admins') return 'admin';
        return 'custom';
    }

    startStatusMonitoring() {
        if (process.env.NODE_ENV !== 'development') return;

        setInterval(() => {
            if (!this.io) return;

            const engineClients = this.io.engine.clientsCount;
            const socketClients = this.clients.size;
            const rooms = this.rooms.size;

            if (engineClients > 0 || socketClients > 0) {
                console.log('üìä WebSocket ÏÉÅÌÉú:', {
                    engine_clients: engineClients,
                    socket_clients: socketClients,
                    rooms: rooms,
                    timestamp: new Date().toISOString()
                });
                
                if (engineClients !== socketClients) {
                    console.warn('‚ö†Ô∏è EngineÍ≥º Socket ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïàò Î∂àÏùºÏπò!');
                    console.warn(`   Engine: ${engineClients}, Socket: ${socketClients}`);
                }
            }
        }, 30000);
    }
}

module.exports = WebSocketService;